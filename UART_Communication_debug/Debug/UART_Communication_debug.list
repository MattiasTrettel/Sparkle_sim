
UART_Communication_debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b08  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08005c98  08005c98  00006c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005da8  08005da8  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005da8  08005da8  00006da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005db0  08005db0  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005db0  08005db0  00006db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005db4  08005db4  00006db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005db8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000598  20000070  08005e28  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  08005e28  00007608  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2a4  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020fa  00000000  00000000  00014344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  00016440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000838  00000000  00000000  00016f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026aff  00000000  00000000  00017740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d424  00000000  00000000  0003e23f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9cc6  00000000  00000000  0004b663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135329  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000334c  00000000  00000000  0013536c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001386b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c80 	.word	0x08005c80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005c80 	.word	0x08005c80

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000578:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800057c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000580:	f003 0301 	and.w	r3, r3, #1
 8000584:	2b00      	cmp	r3, #0
 8000586:	d013      	beq.n	80005b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000588:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800058c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000590:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000594:	2b00      	cmp	r3, #0
 8000596:	d00b      	beq.n	80005b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000598:	e000      	b.n	800059c <ITM_SendChar+0x2c>
    {
      __NOP();
 800059a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800059c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d0f9      	beq.n	800059a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005a6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	b2d2      	uxtb	r2, r2
 80005ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b0:	687b      	ldr	r3, [r7, #4]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <calculate_crc>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

uint16_t calculate_crc(uint8_t *data, size_t length){
 80005be:	b480      	push	{r7}
 80005c0:	b087      	sub	sp, #28
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
    uint16_t crc = CRC_INIT;
 80005c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005cc:	82fb      	strh	r3, [r7, #22]
    for (size_t i = 0; i < length; i++) {
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	e027      	b.n	8000624 <calculate_crc+0x66>
        crc ^= (data[i] << 8);
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	693b      	ldr	r3, [r7, #16]
 80005d8:	4413      	add	r3, r2
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	021b      	lsls	r3, r3, #8
 80005de:	b21a      	sxth	r2, r3
 80005e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80005e4:	4053      	eors	r3, r2
 80005e6:	b21b      	sxth	r3, r3
 80005e8:	82fb      	strh	r3, [r7, #22]
        for (int bit = 0; bit < 8; bit++) {
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	e013      	b.n	8000618 <calculate_crc+0x5a>
            if (crc & 0x8000) {
 80005f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	da09      	bge.n	800060c <calculate_crc+0x4e>
                crc = (crc << 1) ^ CRC_POLY;
 80005f8:	8afb      	ldrh	r3, [r7, #22]
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	b21b      	sxth	r3, r3
 80005fe:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8000602:	f083 0301 	eor.w	r3, r3, #1
 8000606:	b21b      	sxth	r3, r3
 8000608:	82fb      	strh	r3, [r7, #22]
 800060a:	e002      	b.n	8000612 <calculate_crc+0x54>
            }else{
                crc <<= 1;
 800060c:	8afb      	ldrh	r3, [r7, #22]
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	82fb      	strh	r3, [r7, #22]
        for (int bit = 0; bit < 8; bit++) {
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	3301      	adds	r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2b07      	cmp	r3, #7
 800061c:	dde8      	ble.n	80005f0 <calculate_crc+0x32>
    for (size_t i = 0; i < length; i++) {
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	3301      	adds	r3, #1
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693a      	ldr	r2, [r7, #16]
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	429a      	cmp	r2, r3
 800062a:	d3d3      	bcc.n	80005d4 <calculate_crc+0x16>
            }
        }
    }
    return crc & 0xFFFF; // Ritorna un valore a 16 bit
 800062c:	8afb      	ldrh	r3, [r7, #22]
}
 800062e:	4618      	mov	r0, r3
 8000630:	371c      	adds	r7, #28
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <get_cuc_time>:
//function to get time
void get_cuc_time(uint32_t *coarse, uint8_t *fine) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
    if (sync_tick == 0) {
 8000646:	4b28      	ldr	r3, [pc, #160]	@ (80006e8 <get_cuc_time+0xac>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d10b      	bne.n	8000666 <get_cuc_time+0x2a>
        // Se non è ancora sincronizzato, usa il tick corrente
        *coarse = (HAL_GetTick() / 1000) + EPOCH_OFFSET;
 800064e:	f000 fe3b 	bl	80012c8 <HAL_GetTick>
 8000652:	4603      	mov	r3, r0
 8000654:	4a25      	ldr	r2, [pc, #148]	@ (80006ec <get_cuc_time+0xb0>)
 8000656:	fba2 2303 	umull	r2, r3, r2, r3
 800065a:	099a      	lsrs	r2, r3, #6
 800065c:	4b24      	ldr	r3, [pc, #144]	@ (80006f0 <get_cuc_time+0xb4>)
 800065e:	4413      	add	r3, r2
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	e016      	b.n	8000694 <get_cuc_time+0x58>
    } else {
        // Calcola il tempo corretto
        uint32_t elapsed_time = (HAL_GetTick() - sync_tick) / 1000;
 8000666:	f000 fe2f 	bl	80012c8 <HAL_GetTick>
 800066a:	4602      	mov	r2, r0
 800066c:	4b1e      	ldr	r3, [pc, #120]	@ (80006e8 <get_cuc_time+0xac>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	4a1e      	ldr	r2, [pc, #120]	@ (80006ec <get_cuc_time+0xb0>)
 8000674:	fba2 2303 	umull	r2, r3, r2, r3
 8000678:	099b      	lsrs	r3, r3, #6
 800067a:	617b      	str	r3, [r7, #20]
        *coarse = received_MET + elapsed_time;
 800067c:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <get_cuc_time+0xb8>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	441a      	add	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	601a      	str	r2, [r3, #0]
        *coarse += 3600;     //Italy time
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f503 6261 	add.w	r2, r3, #3600	@ 0xe10
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	601a      	str	r2, [r3, #0]
    }

    uint32_t millis = (HAL_GetTick() - sync_tick) % 1000;  // Millisecondi rimanenti
 8000694:	f000 fe18 	bl	80012c8 <HAL_GetTick>
 8000698:	4602      	mov	r2, r0
 800069a:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <get_cuc_time+0xac>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	4a12      	ldr	r2, [pc, #72]	@ (80006ec <get_cuc_time+0xb0>)
 80006a2:	fba2 1203 	umull	r1, r2, r2, r3
 80006a6:	0992      	lsrs	r2, r2, #6
 80006a8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006ac:	fb01 f202 	mul.w	r2, r1, r2
 80006b0:	1a9b      	subs	r3, r3, r2
 80006b2:	613b      	str	r3, [r7, #16]
    uint32_t fine_time = millis * 16777;  // Normalizzazione su 24 bit
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	f244 1289 	movw	r2, #16777	@ 0x4189
 80006ba:	fb02 f303 	mul.w	r3, r2, r3
 80006be:	60fb      	str	r3, [r7, #12]

    fine[0] = (fine_time >> 16) & 0xFF;  // Byte più significativo
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	0c1b      	lsrs	r3, r3, #16
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	701a      	strb	r2, [r3, #0]
    fine[1] = (fine_time >> 8) & 0xFF;   // Byte centrale
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	0a1a      	lsrs	r2, r3, #8
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	3301      	adds	r3, #1
 80006d2:	b2d2      	uxtb	r2, r2
 80006d4:	701a      	strb	r2, [r3, #0]
    fine[2] = fine_time & 0xFF;          // Byte meno significativo
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	3302      	adds	r3, #2
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	b2d2      	uxtb	r2, r2
 80006de:	701a      	strb	r2, [r3, #0]
}
 80006e0:	bf00      	nop
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000160 	.word	0x20000160
 80006ec:	10624dd3 	.word	0x10624dd3
 80006f0:	612ec280 	.word	0x612ec280
 80006f4:	2000015c 	.word	0x2000015c

080006f8 <send_packet>:

void send_packet(UART_HandleTypeDef* huart) {
 80006f8:	b5b0      	push	{r4, r5, r7, lr}
 80006fa:	b08e      	sub	sp, #56	@ 0x38
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
    static uint16_t packet_counter = 0;
    char cargo[] = "Hello from STM32";
 8000700:	4b3a      	ldr	r3, [pc, #232]	@ (80007ec <send_packet+0xf4>)
 8000702:	f107 0420 	add.w	r4, r7, #32
 8000706:	461d      	mov	r5, r3
 8000708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070c:	682b      	ldr	r3, [r5, #0]
 800070e:	7023      	strb	r3, [r4, #0]
    uint16_t cargo_length = strlen(cargo) /*+ 20*/;
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fd5b 	bl	80001d0 <strlen>
 800071a:	4603      	mov	r3, r0
 800071c:	867b      	strh	r3, [r7, #50]	@ 0x32
    if(cargo_length>MAX_TM_CARGO_SIZE){
 800071e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000720:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000724:	d85d      	bhi.n	80007e2 <send_packet+0xea>
    }

    static uint8_t buffer[TM_HEADER_SIZE + MAX_TM_CARGO_SIZE + 2];

    TM_Header header;
    header.magic[0] = MAGIC_NUM_1;
 8000726:	23a5      	movs	r3, #165	@ 0xa5
 8000728:	733b      	strb	r3, [r7, #12]
	header.magic[1] = MAGIC_NUM_2;
 800072a:	23a5      	movs	r3, #165	@ 0xa5
 800072c:	737b      	strb	r3, [r7, #13]
	header.magic[2] = MAGIC_NUM_3;
 800072e:	23a5      	movs	r3, #165	@ 0xa5
 8000730:	73bb      	strb	r3, [r7, #14]
	header.magic[3] = MAGIC_NUM_4;
 8000732:	23a5      	movs	r3, #165	@ 0xa5
 8000734:	73fb      	strb	r3, [r7, #15]

	header.payload_id = PAYLOAD_ID;
 8000736:	23ff      	movs	r3, #255	@ 0xff
 8000738:	743b      	strb	r3, [r7, #16]
	header.packet_type = PACKET_TYPE_TM_SC;
 800073a:	2302      	movs	r3, #2
 800073c:	747b      	strb	r3, [r7, #17]
	header.cargo_length = cargo_length;
 800073e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000740:	827b      	strh	r3, [r7, #18]
	header.packet_counter = packet_counter++;
 8000742:	4b2b      	ldr	r3, [pc, #172]	@ (80007f0 <send_packet+0xf8>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	1c5a      	adds	r2, r3, #1
 8000748:	b291      	uxth	r1, r2
 800074a:	4a29      	ldr	r2, [pc, #164]	@ (80007f0 <send_packet+0xf8>)
 800074c:	8011      	strh	r1, [r2, #0]
 800074e:	82bb      	strh	r3, [r7, #20]

    get_cuc_time(&header.coarse_time, header.fine_time);
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	f103 0210 	add.w	r2, r3, #16
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	330c      	adds	r3, #12
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff6b 	bl	800063c <get_cuc_time>


    memcpy(buffer, &header, TM_HEADER_SIZE);
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	2211      	movs	r2, #17
 800076c:	4619      	mov	r1, r3
 800076e:	4821      	ldr	r0, [pc, #132]	@ (80007f4 <send_packet+0xfc>)
 8000770:	f004 fca7 	bl	80050c2 <memcpy>

    //strcpy((char*)&buffer[17], cargo);
    memcpy(buffer + TM_HEADER_SIZE, &cargo, cargo_length);
 8000774:	4820      	ldr	r0, [pc, #128]	@ (80007f8 <send_packet+0x100>)
 8000776:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8000778:	f107 0320 	add.w	r3, r7, #32
 800077c:	4619      	mov	r1, r3
 800077e:	f004 fca0 	bl	80050c2 <memcpy>

    //uint32_t timestamp = HAL_GetTick() / 1000;
    //snprintf((char*)&buffer[17 + strlen(cargo)], sizeof(buffer) - (17 + strlen(cargo)), " %u", (unsigned int)timestamp);

    uint16_t crc = calculate_crc(buffer, TM_HEADER_SIZE + cargo_length);
 8000782:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000784:	3311      	adds	r3, #17
 8000786:	4619      	mov	r1, r3
 8000788:	481a      	ldr	r0, [pc, #104]	@ (80007f4 <send_packet+0xfc>)
 800078a:	f7ff ff18 	bl	80005be <calculate_crc>
 800078e:	4603      	mov	r3, r0
 8000790:	817b      	strh	r3, [r7, #10]
    memcpy(buffer + TM_HEADER_SIZE + cargo_length, &crc, sizeof(uint16_t));
 8000792:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000794:	3311      	adds	r3, #17
 8000796:	4a17      	ldr	r2, [pc, #92]	@ (80007f4 <send_packet+0xfc>)
 8000798:	4413      	add	r3, r2
 800079a:	897a      	ldrh	r2, [r7, #10]
 800079c:	801a      	strh	r2, [r3, #0]
    printf("Sending packet: ");
 800079e:	4817      	ldr	r0, [pc, #92]	@ (80007fc <send_packet+0x104>)
 80007a0:	f004 fba4 	bl	8004eec <iprintf>
	for (int i = 0; i < TM_HEADER_SIZE+cargo_length+2; i++) {
 80007a4:	2300      	movs	r3, #0
 80007a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80007a8:	e00a      	b.n	80007c0 <send_packet+0xc8>
		printf(" %02X", buffer[i]);
 80007aa:	4a12      	ldr	r2, [pc, #72]	@ (80007f4 <send_packet+0xfc>)
 80007ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007ae:	4413      	add	r3, r2
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	4619      	mov	r1, r3
 80007b4:	4812      	ldr	r0, [pc, #72]	@ (8000800 <send_packet+0x108>)
 80007b6:	f004 fb99 	bl	8004eec <iprintf>
	for (int i = 0; i < TM_HEADER_SIZE+cargo_length+2; i++) {
 80007ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007bc:	3301      	adds	r3, #1
 80007be:	637b      	str	r3, [r7, #52]	@ 0x34
 80007c0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80007c2:	3312      	adds	r3, #18
 80007c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007c6:	429a      	cmp	r2, r3
 80007c8:	ddef      	ble.n	80007aa <send_packet+0xb2>
	}
	printf("\n");
 80007ca:	200a      	movs	r0, #10
 80007cc:	f004 fba0 	bl	8004f10 <putchar>

    HAL_UART_Transmit_DMA(huart, buffer, TM_HEADER_SIZE+cargo_length+2);
 80007d0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80007d2:	3313      	adds	r3, #19
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	461a      	mov	r2, r3
 80007d8:	4906      	ldr	r1, [pc, #24]	@ (80007f4 <send_packet+0xfc>)
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f002 fec2 	bl	8003564 <HAL_UART_Transmit_DMA>
 80007e0:	e000      	b.n	80007e4 <send_packet+0xec>
    	return;
 80007e2:	bf00      	nop
}
 80007e4:	3738      	adds	r7, #56	@ 0x38
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bdb0      	pop	{r4, r5, r7, pc}
 80007ea:	bf00      	nop
 80007ec:	08005cb4 	.word	0x08005cb4
 80007f0:	20000388 	.word	0x20000388
 80007f4:	2000038c 	.word	0x2000038c
 80007f8:	2000039d 	.word	0x2000039d
 80007fc:	08005c98 	.word	0x08005c98
 8000800:	08005cac 	.word	0x08005cac

08000804 <send_response>:

void send_response(UART_HandleTypeDef* huart, bool acknowledge, uint16_t counter){
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	@ 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	70fb      	strb	r3, [r7, #3]
 8000810:	4613      	mov	r3, r2
 8000812:	803b      	strh	r3, [r7, #0]
    static uint8_t response_buffer[TM_HEADER_SIZE + 2];

    TM_Header header;
    header.magic[0] = MAGIC_NUM_1;
 8000814:	23a5      	movs	r3, #165	@ 0xa5
 8000816:	743b      	strb	r3, [r7, #16]
	header.magic[1] = MAGIC_NUM_2;
 8000818:	23a5      	movs	r3, #165	@ 0xa5
 800081a:	747b      	strb	r3, [r7, #17]
	header.magic[2] = MAGIC_NUM_3;
 800081c:	23a5      	movs	r3, #165	@ 0xa5
 800081e:	74bb      	strb	r3, [r7, #18]
	header.magic[3] = MAGIC_NUM_4;
 8000820:	23a5      	movs	r3, #165	@ 0xa5
 8000822:	74fb      	strb	r3, [r7, #19]

	header.payload_id = PAYLOAD_ID;
 8000824:	23ff      	movs	r3, #255	@ 0xff
 8000826:	753b      	strb	r3, [r7, #20]
	if(acknowledge){
 8000828:	78fb      	ldrb	r3, [r7, #3]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d002      	beq.n	8000834 <send_response+0x30>
		header.packet_type = PACKET_TYPE_TM_ACK;
 800082e:	2303      	movs	r3, #3
 8000830:	757b      	strb	r3, [r7, #21]
 8000832:	e001      	b.n	8000838 <send_response+0x34>
	}
	else{
		header.packet_type = PACKET_TYPE_TM_NAK;
 8000834:	2304      	movs	r3, #4
 8000836:	757b      	strb	r3, [r7, #21]
	}
	header.cargo_length = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	82fb      	strh	r3, [r7, #22]
	header.packet_counter = counter;
 800083c:	883b      	ldrh	r3, [r7, #0]
 800083e:	833b      	strh	r3, [r7, #24]

    get_cuc_time(&header.coarse_time, header.fine_time);
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	f103 0210 	add.w	r2, r3, #16
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	330c      	adds	r3, #12
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fef3 	bl	800063c <get_cuc_time>


    memcpy(response_buffer, &header, TM_HEADER_SIZE);
 8000856:	f107 0310 	add.w	r3, r7, #16
 800085a:	2211      	movs	r2, #17
 800085c:	4619      	mov	r1, r3
 800085e:	4816      	ldr	r0, [pc, #88]	@ (80008b8 <send_response+0xb4>)
 8000860:	f004 fc2f 	bl	80050c2 <memcpy>


    uint16_t crc = calculate_crc(response_buffer, TM_HEADER_SIZE);
 8000864:	2111      	movs	r1, #17
 8000866:	4814      	ldr	r0, [pc, #80]	@ (80008b8 <send_response+0xb4>)
 8000868:	f7ff fea9 	bl	80005be <calculate_crc>
 800086c:	4603      	mov	r3, r0
 800086e:	81fb      	strh	r3, [r7, #14]
    memcpy(response_buffer + TM_HEADER_SIZE, &crc, sizeof(uint16_t));
 8000870:	4a12      	ldr	r2, [pc, #72]	@ (80008bc <send_response+0xb8>)
 8000872:	89fb      	ldrh	r3, [r7, #14]
 8000874:	8013      	strh	r3, [r2, #0]
    printf("Sending response: ");
 8000876:	4812      	ldr	r0, [pc, #72]	@ (80008c0 <send_response+0xbc>)
 8000878:	f004 fb38 	bl	8004eec <iprintf>
	for (int i = 0; i < TM_HEADER_SIZE+2; i++) {
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000880:	e00a      	b.n	8000898 <send_response+0x94>
		printf(" %02X", response_buffer[i]);
 8000882:	4a0d      	ldr	r2, [pc, #52]	@ (80008b8 <send_response+0xb4>)
 8000884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000886:	4413      	add	r3, r2
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	4619      	mov	r1, r3
 800088c:	480d      	ldr	r0, [pc, #52]	@ (80008c4 <send_response+0xc0>)
 800088e:	f004 fb2d 	bl	8004eec <iprintf>
	for (int i = 0; i < TM_HEADER_SIZE+2; i++) {
 8000892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000894:	3301      	adds	r3, #1
 8000896:	627b      	str	r3, [r7, #36]	@ 0x24
 8000898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800089a:	2b12      	cmp	r3, #18
 800089c:	ddf1      	ble.n	8000882 <send_response+0x7e>
	}
	printf("\n");
 800089e:	200a      	movs	r0, #10
 80008a0:	f004 fb36 	bl	8004f10 <putchar>
    HAL_UART_Transmit_DMA(huart, response_buffer, TM_HEADER_SIZE+2);
 80008a4:	2213      	movs	r2, #19
 80008a6:	4904      	ldr	r1, [pc, #16]	@ (80008b8 <send_response+0xb4>)
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f002 fe5b 	bl	8003564 <HAL_UART_Transmit_DMA>
}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	@ 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200004a0 	.word	0x200004a0
 80008bc:	200004b1 	.word	0x200004b1
 80008c0:	08005cc8 	.word	0x08005cc8
 80008c4:	08005cac 	.word	0x08005cac

080008c8 <_write>:
bool positive_response = true;
uint16_t pkg_counter_response=0;
int delay = 1000;


int _write(int file, char* ptr, int len){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx < len; DataIdx++){
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	e009      	b.n	80008ee <_write+0x26>
		ITM_SendChar(*ptr++);
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	1c5a      	adds	r2, r3, #1
 80008de:	60ba      	str	r2, [r7, #8]
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fe44 	bl	8000570 <ITM_SendChar>
	for(DataIdx=0; DataIdx < len; DataIdx++){
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	3301      	adds	r3, #1
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	697a      	ldr	r2, [r7, #20]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	dbf1      	blt.n	80008da <_write+0x12>
	}
	return len;
 80008f6:	687b      	ldr	r3, [r7, #4]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000906:	f000 fc6f 	bl	80011e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090a:	f000 f867 	bl	80009dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090e:	f000 f907 	bl	8000b20 <MX_GPIO_Init>
  MX_DMA_Init();
 8000912:	f000 f8e7 	bl	8000ae4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000916:	f000 f8b3 	bl	8000a80 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 800091a:	220a      	movs	r2, #10
 800091c:	4926      	ldr	r1, [pc, #152]	@ (80009b8 <main+0xb8>)
 800091e:	4827      	ldr	r0, [pc, #156]	@ (80009bc <main+0xbc>)
 8000920:	f002 fdd4 	bl	80034cc <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Wait until the DMA has completed the previous transmission
	  	  if (tx_complete)
 8000924:	4b26      	ldr	r3, [pc, #152]	@ (80009c0 <main+0xc0>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d03e      	beq.n	80009ac <main+0xac>
	  	  {
	  		  if(sending_response){
 800092e:	4b25      	ldr	r3, [pc, #148]	@ (80009c4 <main+0xc4>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	2b00      	cmp	r3, #0
 8000936:	d029      	beq.n	800098c <main+0x8c>
	  			  tx_complete = false;
 8000938:	4b21      	ldr	r3, [pc, #132]	@ (80009c0 <main+0xc0>)
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
	  			  sending_response = false;
 800093e:	4b21      	ldr	r3, [pc, #132]	@ (80009c4 <main+0xc4>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
	  			  send_response(&huart1, positive_response, pkg_counter_response);
 8000944:	4b20      	ldr	r3, [pc, #128]	@ (80009c8 <main+0xc8>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	4a20      	ldr	r2, [pc, #128]	@ (80009cc <main+0xcc>)
 800094a:	8812      	ldrh	r2, [r2, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	481b      	ldr	r0, [pc, #108]	@ (80009bc <main+0xbc>)
 8000950:	f7ff ff58 	bl	8000804 <send_response>
	  			  if(sync) {
 8000954:	4b1e      	ldr	r3, [pc, #120]	@ (80009d0 <main+0xd0>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d026      	beq.n	80009ac <main+0xac>
	  				  uint32_t start_time = HAL_GetTick();
 800095e:	f000 fcb3 	bl	80012c8 <HAL_GetTick>
 8000962:	6078      	str	r0, [r7, #4]
	  				  while(sync){
 8000964:	e00c      	b.n	8000980 <main+0x80>
	  					  __WFI();  // Wait in low-power mode
 8000966:	bf30      	wfi
	  					  if((HAL_GetTick() - start_time) > SYNC_TIMEOUT_MS){
 8000968:	f000 fcae 	bl	80012c8 <HAL_GetTick>
 800096c:	4602      	mov	r2, r0
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000976:	4293      	cmp	r3, r2
 8000978:	d902      	bls.n	8000980 <main+0x80>
	  						  sync = false;
 800097a:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <main+0xd0>)
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]
	  				  while(sync){
 8000980:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <main+0xd0>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	d1ed      	bne.n	8000966 <main+0x66>
 800098a:	e00f      	b.n	80009ac <main+0xac>
	  					  }
	  				  }
	  			  }
	  		  }
	  		  else if(send_tm){
 800098c:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <main+0xd4>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	d00a      	beq.n	80009ac <main+0xac>
	  			  tx_complete = false;  // Reset flag
 8000996:	4b0a      	ldr	r3, [pc, #40]	@ (80009c0 <main+0xc0>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
	  			  //HAL_UART_Transmit_DMA(&huart1, tx_buffer, strlen((char *)tx_buffer)); //old
	  			  send_packet(&huart1);
 800099c:	4807      	ldr	r0, [pc, #28]	@ (80009bc <main+0xbc>)
 800099e:	f7ff feab 	bl	80006f8 <send_packet>
	  			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80009a2:	2120      	movs	r1, #32
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a8:	f001 fa08 	bl	8001dbc <HAL_GPIO_TogglePin>
	  		  }
	  	  }
	  	  HAL_Delay(delay);  // Delay for periodic data sending
 80009ac:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <main+0xd8>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 fc95 	bl	80012e0 <HAL_Delay>
	  	  if (tx_complete)
 80009b6:	e7b5      	b.n	8000924 <main+0x24>
 80009b8:	20000270 	.word	0x20000270
 80009bc:	2000008c 	.word	0x2000008c
 80009c0:	20000000 	.word	0x20000000
 80009c4:	20000383 	.word	0x20000383
 80009c8:	20000001 	.word	0x20000001
 80009cc:	20000386 	.word	0x20000386
 80009d0:	20000384 	.word	0x20000384
 80009d4:	20000382 	.word	0x20000382
 80009d8:	20000004 	.word	0x20000004

080009dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b096      	sub	sp, #88	@ 0x58
 80009e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	2244      	movs	r2, #68	@ 0x44
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f004 fadb 	bl	8004fa6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f0:	463b      	mov	r3, r7
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a02:	f001 fa03 	bl	8001e0c <HAL_PWREx_ControlVoltageScaling>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a0c:	f000 fa28 	bl	8000e60 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a10:	2302      	movs	r3, #2
 8000a12:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a18:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a1a:	2310      	movs	r3, #16
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a22:	2302      	movs	r3, #2
 8000a24:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a26:	2301      	movs	r3, #1
 8000a28:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a2a:	230a      	movs	r3, #10
 8000a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a2e:	2307      	movs	r3, #7
 8000a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a32:	2302      	movs	r3, #2
 8000a34:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a36:	2302      	movs	r3, #2
 8000a38:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f001 fa3a 	bl	8001eb8 <HAL_RCC_OscConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a4a:	f000 fa09 	bl	8000e60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4e:	230f      	movs	r3, #15
 8000a50:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a52:	2303      	movs	r3, #3
 8000a54:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a62:	463b      	mov	r3, r7
 8000a64:	2104      	movs	r1, #4
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 fe02 	bl	8002670 <HAL_RCC_ClockConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a72:	f000 f9f5 	bl	8000e60 <Error_Handler>
  }
}
 8000a76:	bf00      	nop
 8000a78:	3758      	adds	r7, #88	@ 0x58
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a84:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <MX_USART1_UART_Init+0x5c>)
 8000a86:	4a16      	ldr	r2, [pc, #88]	@ (8000ae0 <MX_USART1_UART_Init+0x60>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <MX_USART1_UART_Init+0x5c>)
 8000a8c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000a90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000a92:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <MX_USART1_UART_Init+0x5c>)
 8000a94:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a98:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a9a:	4b10      	ldr	r3, [pc, #64]	@ (8000adc <MX_USART1_UART_Init+0x5c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <MX_USART1_UART_Init+0x5c>)
 8000aa2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000aa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <MX_USART1_UART_Init+0x5c>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <MX_USART1_UART_Init+0x5c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <MX_USART1_UART_Init+0x5c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <MX_USART1_UART_Init+0x5c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <MX_USART1_UART_Init+0x5c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	@ (8000adc <MX_USART1_UART_Init+0x5c>)
 8000ac8:	f002 fcb2 	bl	8003430 <HAL_UART_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000ad2:	f000 f9c5 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	2000008c 	.word	0x2000008c
 8000ae0:	40013800 	.word	0x40013800

08000ae4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aea:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <MX_DMA_Init+0x38>)
 8000aec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aee:	4a0b      	ldr	r2, [pc, #44]	@ (8000b1c <MX_DMA_Init+0x38>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <MX_DMA_Init+0x38>)
 8000af8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2100      	movs	r1, #0
 8000b06:	200e      	movs	r0, #14
 8000b08:	f000 fce9 	bl	80014de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000b0c:	200e      	movs	r0, #14
 8000b0e:	f000 fd02 	bl	8001516 <HAL_NVIC_EnableIRQ>

}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000

08000b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	@ 0x28
 8000b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b36:	4b2b      	ldr	r3, [pc, #172]	@ (8000be4 <MX_GPIO_Init+0xc4>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	4a2a      	ldr	r2, [pc, #168]	@ (8000be4 <MX_GPIO_Init+0xc4>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b42:	4b28      	ldr	r3, [pc, #160]	@ (8000be4 <MX_GPIO_Init+0xc4>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4e:	4b25      	ldr	r3, [pc, #148]	@ (8000be4 <MX_GPIO_Init+0xc4>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	4a24      	ldr	r2, [pc, #144]	@ (8000be4 <MX_GPIO_Init+0xc4>)
 8000b54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b5a:	4b22      	ldr	r3, [pc, #136]	@ (8000be4 <MX_GPIO_Init+0xc4>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b1f      	ldr	r3, [pc, #124]	@ (8000be4 <MX_GPIO_Init+0xc4>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	4a1e      	ldr	r2, [pc, #120]	@ (8000be4 <MX_GPIO_Init+0xc4>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b72:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <MX_GPIO_Init+0xc4>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	4b19      	ldr	r3, [pc, #100]	@ (8000be4 <MX_GPIO_Init+0xc4>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	4a18      	ldr	r2, [pc, #96]	@ (8000be4 <MX_GPIO_Init+0xc4>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b8a:	4b16      	ldr	r3, [pc, #88]	@ (8000be4 <MX_GPIO_Init+0xc4>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2120      	movs	r1, #32
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b9e:	f001 f8f5 	bl	8001d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ba8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	480b      	ldr	r0, [pc, #44]	@ (8000be8 <MX_GPIO_Init+0xc8>)
 8000bba:	f000 ff3d 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bbe:	2320      	movs	r3, #32
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd8:	f000 ff2e 	bl	8001a38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bdc:	bf00      	nop
 8000bde:	3728      	adds	r7, #40	@ 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40021000 	.word	0x40021000
 8000be8:	48000800 	.word	0x48000800

08000bec <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)  // CHeck if it's the channel USART1
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a05      	ldr	r2, [pc, #20]	@ (8000c10 <HAL_UART_TxCpltCallback+0x24>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d102      	bne.n	8000c04 <HAL_UART_TxCpltCallback+0x18>
    {
        tx_complete = 1;  // Set the transmission as complete
 8000bfe:	4b05      	ldr	r3, [pc, #20]	@ (8000c14 <HAL_UART_TxCpltCallback+0x28>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	701a      	strb	r2, [r3, #0]
    }
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	40013800 	.word	0x40013800
 8000c14:	20000000 	.word	0x20000000

08000c18 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a7a      	ldr	r2, [pc, #488]	@ (8000e10 <HAL_UART_RxCpltCallback+0x1f8>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	f040 80ef 	bne.w	8000e0a <HAL_UART_RxCpltCallback+0x1f2>
    {
        if (receiving_stage == 0)  // Receiving header
 8000c2c:	4b79      	ldr	r3, [pc, #484]	@ (8000e14 <HAL_UART_RxCpltCallback+0x1fc>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d153      	bne.n	8000cdc <HAL_UART_RxCpltCallback+0xc4>
        {
        	printf("Received packet header: ");
 8000c34:	4878      	ldr	r0, [pc, #480]	@ (8000e18 <HAL_UART_RxCpltCallback+0x200>)
 8000c36:	f004 f959 	bl	8004eec <iprintf>
			for (int i = 0; i < TC_HEADER_SIZE; i++) {
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	e00a      	b.n	8000c56 <HAL_UART_RxCpltCallback+0x3e>
				printf(" %02X", rx_buffer[i]);
 8000c40:	4a76      	ldr	r2, [pc, #472]	@ (8000e1c <HAL_UART_RxCpltCallback+0x204>)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	4413      	add	r3, r2
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4875      	ldr	r0, [pc, #468]	@ (8000e20 <HAL_UART_RxCpltCallback+0x208>)
 8000c4c:	f004 f94e 	bl	8004eec <iprintf>
			for (int i = 0; i < TC_HEADER_SIZE; i++) {
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	3301      	adds	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	2b09      	cmp	r3, #9
 8000c5a:	ddf1      	ble.n	8000c40 <HAL_UART_RxCpltCallback+0x28>
			}
			printf("\n");
 8000c5c:	200a      	movs	r0, #10
 8000c5e:	f004 f957 	bl	8004f10 <putchar>
            memcpy(&received_packet.header, rx_buffer, TC_HEADER_SIZE);
 8000c62:	4b70      	ldr	r3, [pc, #448]	@ (8000e24 <HAL_UART_RxCpltCallback+0x20c>)
 8000c64:	4a6d      	ldr	r2, [pc, #436]	@ (8000e1c <HAL_UART_RxCpltCallback+0x204>)
 8000c66:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c68:	c303      	stmia	r3!, {r0, r1}
 8000c6a:	801a      	strh	r2, [r3, #0]
            expected_cargo_length = received_packet.header.cargo_length;
 8000c6c:	4b6d      	ldr	r3, [pc, #436]	@ (8000e24 <HAL_UART_RxCpltCallback+0x20c>)
 8000c6e:	88da      	ldrh	r2, [r3, #6]
 8000c70:	4b6d      	ldr	r3, [pc, #436]	@ (8000e28 <HAL_UART_RxCpltCallback+0x210>)
 8000c72:	801a      	strh	r2, [r3, #0]
            if(received_packet.header.magic[0]!=MAGIC_NUM_1 || received_packet.header.magic[1]!=MAGIC_NUM_2 ||
 8000c74:	4b6b      	ldr	r3, [pc, #428]	@ (8000e24 <HAL_UART_RxCpltCallback+0x20c>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2ba5      	cmp	r3, #165	@ 0xa5
 8000c7a:	d10b      	bne.n	8000c94 <HAL_UART_RxCpltCallback+0x7c>
 8000c7c:	4b69      	ldr	r3, [pc, #420]	@ (8000e24 <HAL_UART_RxCpltCallback+0x20c>)
 8000c7e:	785b      	ldrb	r3, [r3, #1]
 8000c80:	2ba5      	cmp	r3, #165	@ 0xa5
 8000c82:	d107      	bne.n	8000c94 <HAL_UART_RxCpltCallback+0x7c>
               received_packet.header.magic[2]!=MAGIC_NUM_3 || received_packet.header.magic[3]!=MAGIC_NUM_4)
 8000c84:	4b67      	ldr	r3, [pc, #412]	@ (8000e24 <HAL_UART_RxCpltCallback+0x20c>)
 8000c86:	789b      	ldrb	r3, [r3, #2]
            if(received_packet.header.magic[0]!=MAGIC_NUM_1 || received_packet.header.magic[1]!=MAGIC_NUM_2 ||
 8000c88:	2ba5      	cmp	r3, #165	@ 0xa5
 8000c8a:	d103      	bne.n	8000c94 <HAL_UART_RxCpltCallback+0x7c>
               received_packet.header.magic[2]!=MAGIC_NUM_3 || received_packet.header.magic[3]!=MAGIC_NUM_4)
 8000c8c:	4b65      	ldr	r3, [pc, #404]	@ (8000e24 <HAL_UART_RxCpltCallback+0x20c>)
 8000c8e:	78db      	ldrb	r3, [r3, #3]
 8000c90:	2ba5      	cmp	r3, #165	@ 0xa5
 8000c92:	d008      	beq.n	8000ca6 <HAL_UART_RxCpltCallback+0x8e>
            {
            	receiving_stage = 0;  // Reset
 8000c94:	4b5f      	ldr	r3, [pc, #380]	@ (8000e14 <HAL_UART_RxCpltCallback+0x1fc>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
            	HAL_UART_Receive_IT(&huart1, rx_buffer, TC_HEADER_SIZE);
 8000c9a:	220a      	movs	r2, #10
 8000c9c:	495f      	ldr	r1, [pc, #380]	@ (8000e1c <HAL_UART_RxCpltCallback+0x204>)
 8000c9e:	4863      	ldr	r0, [pc, #396]	@ (8000e2c <HAL_UART_RxCpltCallback+0x214>)
 8000ca0:	f002 fc14 	bl	80034cc <HAL_UART_Receive_IT>
            	return;
 8000ca4:	e0b1      	b.n	8000e0a <HAL_UART_RxCpltCallback+0x1f2>
            }
            if (expected_cargo_length > MAX_TC_CARGO_SIZE)  // Check
 8000ca6:	4b60      	ldr	r3, [pc, #384]	@ (8000e28 <HAL_UART_RxCpltCallback+0x210>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000cae:	d908      	bls.n	8000cc2 <HAL_UART_RxCpltCallback+0xaa>
            {
                receiving_stage = 0;  // Reset
 8000cb0:	4b58      	ldr	r3, [pc, #352]	@ (8000e14 <HAL_UART_RxCpltCallback+0x1fc>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
                HAL_UART_Receive_IT(&huart1, rx_buffer, TC_HEADER_SIZE);
 8000cb6:	220a      	movs	r2, #10
 8000cb8:	4958      	ldr	r1, [pc, #352]	@ (8000e1c <HAL_UART_RxCpltCallback+0x204>)
 8000cba:	485c      	ldr	r0, [pc, #368]	@ (8000e2c <HAL_UART_RxCpltCallback+0x214>)
 8000cbc:	f002 fc06 	bl	80034cc <HAL_UART_Receive_IT>
                return;
 8000cc0:	e0a3      	b.n	8000e0a <HAL_UART_RxCpltCallback+0x1f2>
            }
            receiving_stage = 1;
 8000cc2:	4b54      	ldr	r3, [pc, #336]	@ (8000e14 <HAL_UART_RxCpltCallback+0x1fc>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&huart1, rx_payload_buffer, expected_cargo_length + 2);
 8000cc8:	4b57      	ldr	r3, [pc, #348]	@ (8000e28 <HAL_UART_RxCpltCallback+0x210>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	3302      	adds	r3, #2
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4957      	ldr	r1, [pc, #348]	@ (8000e30 <HAL_UART_RxCpltCallback+0x218>)
 8000cd4:	4855      	ldr	r0, [pc, #340]	@ (8000e2c <HAL_UART_RxCpltCallback+0x214>)
 8000cd6:	f002 fbf9 	bl	80034cc <HAL_UART_Receive_IT>
 8000cda:	e096      	b.n	8000e0a <HAL_UART_RxCpltCallback+0x1f2>
        }
        else if (receiving_stage == 1)  // Receiving payload + CRC
 8000cdc:	4b4d      	ldr	r3, [pc, #308]	@ (8000e14 <HAL_UART_RxCpltCallback+0x1fc>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	f040 8092 	bne.w	8000e0a <HAL_UART_RxCpltCallback+0x1f2>
        {
        	printf("Received second half packet: ");
 8000ce6:	4853      	ldr	r0, [pc, #332]	@ (8000e34 <HAL_UART_RxCpltCallback+0x21c>)
 8000ce8:	f004 f900 	bl	8004eec <iprintf>
			for (int i = 0; i < expected_cargo_length+2; i++) {
 8000cec:	2300      	movs	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	e00a      	b.n	8000d08 <HAL_UART_RxCpltCallback+0xf0>
				printf(" %02X", rx_payload_buffer[i]);
 8000cf2:	4a4f      	ldr	r2, [pc, #316]	@ (8000e30 <HAL_UART_RxCpltCallback+0x218>)
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4848      	ldr	r0, [pc, #288]	@ (8000e20 <HAL_UART_RxCpltCallback+0x208>)
 8000cfe:	f004 f8f5 	bl	8004eec <iprintf>
			for (int i = 0; i < expected_cargo_length+2; i++) {
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	3301      	adds	r3, #1
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	4b47      	ldr	r3, [pc, #284]	@ (8000e28 <HAL_UART_RxCpltCallback+0x210>)
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	ddee      	ble.n	8000cf2 <HAL_UART_RxCpltCallback+0xda>
			}
			printf("\n");
 8000d14:	200a      	movs	r0, #10
 8000d16:	f004 f8fb 	bl	8004f10 <putchar>

            memcpy(received_packet.cargo, rx_payload_buffer, expected_cargo_length);
 8000d1a:	4b43      	ldr	r3, [pc, #268]	@ (8000e28 <HAL_UART_RxCpltCallback+0x210>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4943      	ldr	r1, [pc, #268]	@ (8000e30 <HAL_UART_RxCpltCallback+0x218>)
 8000d22:	4845      	ldr	r0, [pc, #276]	@ (8000e38 <HAL_UART_RxCpltCallback+0x220>)
 8000d24:	f004 f9cd 	bl	80050c2 <memcpy>
            memcpy(&received_packet.crc, rx_payload_buffer + expected_cargo_length, 2);
 8000d28:	4b3f      	ldr	r3, [pc, #252]	@ (8000e28 <HAL_UART_RxCpltCallback+0x210>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b40      	ldr	r3, [pc, #256]	@ (8000e30 <HAL_UART_RxCpltCallback+0x218>)
 8000d30:	4413      	add	r3, r2
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	4b3b      	ldr	r3, [pc, #236]	@ (8000e24 <HAL_UART_RxCpltCallback+0x20c>)
 8000d38:	f8a3 210a 	strh.w	r2, [r3, #266]	@ 0x10a


            // Check CRC
            uint16_t calculated_crc = calculate_crc((uint8_t*)&received_packet, TC_HEADER_SIZE + expected_cargo_length);
 8000d3c:	4b3a      	ldr	r3, [pc, #232]	@ (8000e28 <HAL_UART_RxCpltCallback+0x210>)
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	330a      	adds	r3, #10
 8000d42:	4619      	mov	r1, r3
 8000d44:	4837      	ldr	r0, [pc, #220]	@ (8000e24 <HAL_UART_RxCpltCallback+0x20c>)
 8000d46:	f7ff fc3a 	bl	80005be <calculate_crc>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	81fb      	strh	r3, [r7, #14]
            pkg_counter_response=received_packet.header.packet_counter;
 8000d4e:	4b35      	ldr	r3, [pc, #212]	@ (8000e24 <HAL_UART_RxCpltCallback+0x20c>)
 8000d50:	891a      	ldrh	r2, [r3, #8]
 8000d52:	4b3a      	ldr	r3, [pc, #232]	@ (8000e3c <HAL_UART_RxCpltCallback+0x224>)
 8000d54:	801a      	strh	r2, [r3, #0]
            positive_response = false;
 8000d56:	4b3a      	ldr	r3, [pc, #232]	@ (8000e40 <HAL_UART_RxCpltCallback+0x228>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
            if (calculated_crc == received_packet.crc)
 8000d5c:	4b31      	ldr	r3, [pc, #196]	@ (8000e24 <HAL_UART_RxCpltCallback+0x20c>)
 8000d5e:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 8000d62:	89fa      	ldrh	r2, [r7, #14]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d145      	bne.n	8000df4 <HAL_UART_RxCpltCallback+0x1dc>
            {// Check packet type
            	if(received_packet.header.packet_type == PACKET_TYPE_TC_GENERIC)
 8000d68:	4b2e      	ldr	r3, [pc, #184]	@ (8000e24 <HAL_UART_RxCpltCallback+0x20c>)
 8000d6a:	795b      	ldrb	r3, [r3, #5]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d121      	bne.n	8000db4 <HAL_UART_RxCpltCallback+0x19c>
            	{// Check command
					if (strncmp((char*)received_packet.cargo, "Request TM", expected_cargo_length) == 0)
 8000d70:	4b2d      	ldr	r3, [pc, #180]	@ (8000e28 <HAL_UART_RxCpltCallback+0x210>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4933      	ldr	r1, [pc, #204]	@ (8000e44 <HAL_UART_RxCpltCallback+0x22c>)
 8000d78:	482f      	ldr	r0, [pc, #188]	@ (8000e38 <HAL_UART_RxCpltCallback+0x220>)
 8000d7a:	f004 f91c 	bl	8004fb6 <strncmp>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d106      	bne.n	8000d92 <HAL_UART_RxCpltCallback+0x17a>
					{
						positive_response = true;
 8000d84:	4b2e      	ldr	r3, [pc, #184]	@ (8000e40 <HAL_UART_RxCpltCallback+0x228>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
						send_tm = true;
 8000d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e48 <HAL_UART_RxCpltCallback+0x230>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
 8000d90:	e030      	b.n	8000df4 <HAL_UART_RxCpltCallback+0x1dc>
					}
					else if (strncmp((char*)received_packet.cargo, "Stop TM", expected_cargo_length) == 0)
 8000d92:	4b25      	ldr	r3, [pc, #148]	@ (8000e28 <HAL_UART_RxCpltCallback+0x210>)
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	461a      	mov	r2, r3
 8000d98:	492c      	ldr	r1, [pc, #176]	@ (8000e4c <HAL_UART_RxCpltCallback+0x234>)
 8000d9a:	4827      	ldr	r0, [pc, #156]	@ (8000e38 <HAL_UART_RxCpltCallback+0x220>)
 8000d9c:	f004 f90b 	bl	8004fb6 <strncmp>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d126      	bne.n	8000df4 <HAL_UART_RxCpltCallback+0x1dc>
					{
						positive_response = true;
 8000da6:	4b26      	ldr	r3, [pc, #152]	@ (8000e40 <HAL_UART_RxCpltCallback+0x228>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]
						send_tm = false;
 8000dac:	4b26      	ldr	r3, [pc, #152]	@ (8000e48 <HAL_UART_RxCpltCallback+0x230>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
 8000db2:	e01f      	b.n	8000df4 <HAL_UART_RxCpltCallback+0x1dc>
					}
            	}
            	else if(received_packet.header.packet_type == PACKET_TYPE_TC_TIME)
 8000db4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e24 <HAL_UART_RxCpltCallback+0x20c>)
 8000db6:	795b      	ldrb	r3, [r3, #5]
 8000db8:	2b0e      	cmp	r3, #14
 8000dba:	d10c      	bne.n	8000dd6 <HAL_UART_RxCpltCallback+0x1be>
				{
            		positive_response = true;
 8000dbc:	4b20      	ldr	r3, [pc, #128]	@ (8000e40 <HAL_UART_RxCpltCallback+0x228>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]
            		memcpy(&received_MET, received_packet.cargo, 4);
 8000dc2:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <HAL_UART_RxCpltCallback+0x20c>)
 8000dc4:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b21      	ldr	r3, [pc, #132]	@ (8000e50 <HAL_UART_RxCpltCallback+0x238>)
 8000dcc:	601a      	str	r2, [r3, #0]
            		sync = true;
 8000dce:	4b21      	ldr	r3, [pc, #132]	@ (8000e54 <HAL_UART_RxCpltCallback+0x23c>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
 8000dd4:	e00e      	b.n	8000df4 <HAL_UART_RxCpltCallback+0x1dc>
            	}
            	else if(received_packet.header.packet_type == PACKET_TYPE_TC_SYN)
 8000dd6:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <HAL_UART_RxCpltCallback+0x20c>)
 8000dd8:	795b      	ldrb	r3, [r3, #5]
 8000dda:	2b0f      	cmp	r3, #15
 8000ddc:	d10a      	bne.n	8000df4 <HAL_UART_RxCpltCallback+0x1dc>
            	{
            		positive_response = true;
 8000dde:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <HAL_UART_RxCpltCallback+0x228>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	701a      	strb	r2, [r3, #0]
            		sync_tick = HAL_GetTick();
 8000de4:	f000 fa70 	bl	80012c8 <HAL_GetTick>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4a1b      	ldr	r2, [pc, #108]	@ (8000e58 <HAL_UART_RxCpltCallback+0x240>)
 8000dec:	6013      	str	r3, [r2, #0]
            		sync = false;
 8000dee:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <HAL_UART_RxCpltCallback+0x23c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
            	}
            }
            sending_response = true;
 8000df4:	4b19      	ldr	r3, [pc, #100]	@ (8000e5c <HAL_UART_RxCpltCallback+0x244>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	701a      	strb	r2, [r3, #0]

            // Restart with header
            receiving_stage = 0;
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <HAL_UART_RxCpltCallback+0x1fc>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&huart1, rx_buffer, TC_HEADER_SIZE);
 8000e00:	220a      	movs	r2, #10
 8000e02:	4906      	ldr	r1, [pc, #24]	@ (8000e1c <HAL_UART_RxCpltCallback+0x204>)
 8000e04:	4809      	ldr	r0, [pc, #36]	@ (8000e2c <HAL_UART_RxCpltCallback+0x214>)
 8000e06:	f002 fb61 	bl	80034cc <HAL_UART_Receive_IT>
        }
    }
}
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40013800 	.word	0x40013800
 8000e14:	2000037e 	.word	0x2000037e
 8000e18:	08005cdc 	.word	0x08005cdc
 8000e1c:	20000270 	.word	0x20000270
 8000e20:	08005cac 	.word	0x08005cac
 8000e24:	20000164 	.word	0x20000164
 8000e28:	20000380 	.word	0x20000380
 8000e2c:	2000008c 	.word	0x2000008c
 8000e30:	2000027c 	.word	0x2000027c
 8000e34:	08005cf8 	.word	0x08005cf8
 8000e38:	2000016e 	.word	0x2000016e
 8000e3c:	20000386 	.word	0x20000386
 8000e40:	20000001 	.word	0x20000001
 8000e44:	08005d18 	.word	0x08005d18
 8000e48:	20000382 	.word	0x20000382
 8000e4c:	08005d24 	.word	0x08005d24
 8000e50:	2000015c 	.word	0x2000015c
 8000e54:	20000384 	.word	0x20000384
 8000e58:	20000160 	.word	0x20000160
 8000e5c:	20000383 	.word	0x20000383

08000e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e64:	b672      	cpsid	i
}
 8000e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <Error_Handler+0x8>

08000e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <HAL_MspInit+0x44>)
 8000e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e76:	4a0e      	ldr	r2, [pc, #56]	@ (8000eb0 <HAL_MspInit+0x44>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <HAL_MspInit+0x44>)
 8000e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8a:	4b09      	ldr	r3, [pc, #36]	@ (8000eb0 <HAL_MspInit+0x44>)
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e8e:	4a08      	ldr	r2, [pc, #32]	@ (8000eb0 <HAL_MspInit+0x44>)
 8000e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e94:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e96:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <HAL_MspInit+0x44>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0ac      	sub	sp, #176	@ 0xb0
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2288      	movs	r2, #136	@ 0x88
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f004 f866 	bl	8004fa6 <memset>
  if(huart->Instance==USART1)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a3a      	ldr	r2, [pc, #232]	@ (8000fc8 <HAL_UART_MspInit+0x114>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d16d      	bne.n	8000fc0 <HAL_UART_MspInit+0x10c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f001 fde1 	bl	8002ab8 <HAL_RCCEx_PeriphCLKConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000efc:	f7ff ffb0 	bl	8000e60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f00:	4b32      	ldr	r3, [pc, #200]	@ (8000fcc <HAL_UART_MspInit+0x118>)
 8000f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f04:	4a31      	ldr	r2, [pc, #196]	@ (8000fcc <HAL_UART_MspInit+0x118>)
 8000f06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f0a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8000fcc <HAL_UART_MspInit+0x118>)
 8000f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	4b2c      	ldr	r3, [pc, #176]	@ (8000fcc <HAL_UART_MspInit+0x118>)
 8000f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8000fcc <HAL_UART_MspInit+0x118>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f24:	4b29      	ldr	r3, [pc, #164]	@ (8000fcc <HAL_UART_MspInit+0x118>)
 8000f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8000f30:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f54:	4619      	mov	r1, r3
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f5a:	f000 fd6d 	bl	8001a38 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <HAL_UART_MspInit+0x11c>)
 8000f60:	4a1c      	ldr	r2, [pc, #112]	@ (8000fd4 <HAL_UART_MspInit+0x120>)
 8000f62:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd0 <HAL_UART_MspInit+0x11c>)
 8000f66:	2202      	movs	r2, #2
 8000f68:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <HAL_UART_MspInit+0x11c>)
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f70:	4b17      	ldr	r3, [pc, #92]	@ (8000fd0 <HAL_UART_MspInit+0x11c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <HAL_UART_MspInit+0x11c>)
 8000f78:	2280      	movs	r2, #128	@ 0x80
 8000f7a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f7c:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <HAL_UART_MspInit+0x11c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f82:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <HAL_UART_MspInit+0x11c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000f88:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <HAL_UART_MspInit+0x11c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <HAL_UART_MspInit+0x11c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000f94:	480e      	ldr	r0, [pc, #56]	@ (8000fd0 <HAL_UART_MspInit+0x11c>)
 8000f96:	f000 fad9 	bl	800154c <HAL_DMA_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8000fa0:	f7ff ff5e 	bl	8000e60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <HAL_UART_MspInit+0x11c>)
 8000fa8:	671a      	str	r2, [r3, #112]	@ 0x70
 8000faa:	4a09      	ldr	r2, [pc, #36]	@ (8000fd0 <HAL_UART_MspInit+0x11c>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2025      	movs	r0, #37	@ 0x25
 8000fb6:	f000 fa92 	bl	80014de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fba:	2025      	movs	r0, #37	@ 0x25
 8000fbc:	f000 faab 	bl	8001516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fc0:	bf00      	nop
 8000fc2:	37b0      	adds	r7, #176	@ 0xb0
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40013800 	.word	0x40013800
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	20000114 	.word	0x20000114
 8000fd4:	40020044 	.word	0x40020044

08000fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <NMI_Handler+0x4>

08000fe0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <HardFault_Handler+0x4>

08000fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <MemManage_Handler+0x4>

08000ff0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <BusFault_Handler+0x4>

08000ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <UsageFault_Handler+0x4>

08001000 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800102e:	f000 f937 	bl	80012a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800103c:	4802      	ldr	r0, [pc, #8]	@ (8001048 <DMA1_Channel4_IRQHandler+0x10>)
 800103e:	f000 fc1c 	bl	800187a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000114 	.word	0x20000114

0800104c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001050:	4802      	ldr	r0, [pc, #8]	@ (800105c <USART1_IRQHandler+0x10>)
 8001052:	f002 fb03 	bl	800365c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000008c 	.word	0x2000008c

08001060 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	e00a      	b.n	8001088 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001072:	f3af 8000 	nop.w
 8001076:	4601      	mov	r1, r0
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	60ba      	str	r2, [r7, #8]
 800107e:	b2ca      	uxtb	r2, r1
 8001080:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	3301      	adds	r3, #1
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	429a      	cmp	r2, r3
 800108e:	dbf0      	blt.n	8001072 <_read+0x12>
  }

  return len;
 8001090:	687b      	ldr	r3, [r7, #4]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <_close>:
  }
  return len;
}

int _close(int file)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010c2:	605a      	str	r2, [r3, #4]
  return 0;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <_isatty>:

int _isatty(int file)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800110c:	4a14      	ldr	r2, [pc, #80]	@ (8001160 <_sbrk+0x5c>)
 800110e:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <_sbrk+0x60>)
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001118:	4b13      	ldr	r3, [pc, #76]	@ (8001168 <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d102      	bne.n	8001126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001120:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <_sbrk+0x64>)
 8001122:	4a12      	ldr	r2, [pc, #72]	@ (800116c <_sbrk+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001126:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	429a      	cmp	r2, r3
 8001132:	d207      	bcs.n	8001144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001134:	f003 ff98 	bl	8005068 <__errno>
 8001138:	4603      	mov	r3, r0
 800113a:	220c      	movs	r2, #12
 800113c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	e009      	b.n	8001158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001144:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <_sbrk+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114a:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	4a05      	ldr	r2, [pc, #20]	@ (8001168 <_sbrk+0x64>)
 8001154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001156:	68fb      	ldr	r3, [r7, #12]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20018000 	.word	0x20018000
 8001164:	00000400 	.word	0x00000400
 8001168:	200004b4 	.word	0x200004b4
 800116c:	20000608 	.word	0x20000608

08001170 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <SystemInit+0x20>)
 8001176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800117a:	4a05      	ldr	r2, [pc, #20]	@ (8001190 <SystemInit+0x20>)
 800117c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001180:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001194:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001198:	f7ff ffea 	bl	8001170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800119c:	480c      	ldr	r0, [pc, #48]	@ (80011d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800119e:	490d      	ldr	r1, [pc, #52]	@ (80011d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011a0:	4a0d      	ldr	r2, [pc, #52]	@ (80011d8 <LoopForever+0xe>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80011b4:	4c0a      	ldr	r4, [pc, #40]	@ (80011e0 <LoopForever+0x16>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011c2:	f003 ff57 	bl	8005074 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011c6:	f7ff fb9b 	bl	8000900 <main>

080011ca <LoopForever>:

LoopForever:
    b LoopForever
 80011ca:	e7fe      	b.n	80011ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011d8:	08005db8 	.word	0x08005db8
  ldr r2, =_sbss
 80011dc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011e0:	20000608 	.word	0x20000608

080011e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC1_2_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <HAL_Init+0x3c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001224 <HAL_Init+0x3c>)
 80011f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011fc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fe:	2003      	movs	r0, #3
 8001200:	f000 f962 	bl	80014c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001204:	2000      	movs	r0, #0
 8001206:	f000 f80f 	bl	8001228 <HAL_InitTick>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	e001      	b.n	800121a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001216:	f7ff fe29 	bl	8000e6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800121a:	79fb      	ldrb	r3, [r7, #7]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40022000 	.word	0x40022000

08001228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001230:	2300      	movs	r3, #0
 8001232:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001234:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <HAL_InitTick+0x6c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d023      	beq.n	8001284 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800123c:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <HAL_InitTick+0x70>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <HAL_InitTick+0x6c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800124a:	fbb3 f3f1 	udiv	r3, r3, r1
 800124e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f96d 	bl	8001532 <HAL_SYSTICK_Config>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10f      	bne.n	800127e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b0f      	cmp	r3, #15
 8001262:	d809      	bhi.n	8001278 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001264:	2200      	movs	r2, #0
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f000 f937 	bl	80014de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001270:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <HAL_InitTick+0x74>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e007      	b.n	8001288 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	73fb      	strb	r3, [r7, #15]
 800127c:	e004      	b.n	8001288 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	73fb      	strb	r3, [r7, #15]
 8001282:	e001      	b.n	8001288 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001288:	7bfb      	ldrb	r3, [r7, #15]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000010 	.word	0x20000010
 8001298:	20000008 	.word	0x20000008
 800129c:	2000000c 	.word	0x2000000c

080012a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <HAL_IncTick+0x20>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <HAL_IncTick+0x24>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	4a04      	ldr	r2, [pc, #16]	@ (80012c4 <HAL_IncTick+0x24>)
 80012b2:	6013      	str	r3, [r2, #0]
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000010 	.word	0x20000010
 80012c4:	200004b8 	.word	0x200004b8

080012c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return uwTick;
 80012cc:	4b03      	ldr	r3, [pc, #12]	@ (80012dc <HAL_GetTick+0x14>)
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	200004b8 	.word	0x200004b8

080012e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e8:	f7ff ffee 	bl	80012c8 <HAL_GetTick>
 80012ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f8:	d005      	beq.n	8001306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001324 <HAL_Delay+0x44>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4413      	add	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001306:	bf00      	nop
 8001308:	f7ff ffde 	bl	80012c8 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	429a      	cmp	r2, r3
 8001316:	d8f7      	bhi.n	8001308 <HAL_Delay+0x28>
  {
  }
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000010 	.word	0x20000010

08001328 <__NVIC_SetPriorityGrouping>:
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001338:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <__NVIC_SetPriorityGrouping+0x44>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001344:	4013      	ands	r3, r2
 8001346:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001350:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001354:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135a:	4a04      	ldr	r2, [pc, #16]	@ (800136c <__NVIC_SetPriorityGrouping+0x44>)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	60d3      	str	r3, [r2, #12]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_GetPriorityGrouping>:
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001374:	4b04      	ldr	r3, [pc, #16]	@ (8001388 <__NVIC_GetPriorityGrouping+0x18>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	f003 0307 	and.w	r3, r3, #7
}
 800137e:	4618      	mov	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_EnableIRQ>:
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	db0b      	blt.n	80013b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	f003 021f 	and.w	r2, r3, #31
 80013a4:	4907      	ldr	r1, [pc, #28]	@ (80013c4 <__NVIC_EnableIRQ+0x38>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	2001      	movs	r0, #1
 80013ae:	fa00 f202 	lsl.w	r2, r0, r2
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000e100 	.word	0xe000e100

080013c8 <__NVIC_SetPriority>:
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	db0a      	blt.n	80013f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	490c      	ldr	r1, [pc, #48]	@ (8001414 <__NVIC_SetPriority+0x4c>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	0112      	lsls	r2, r2, #4
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	440b      	add	r3, r1
 80013ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80013f0:	e00a      	b.n	8001408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4908      	ldr	r1, [pc, #32]	@ (8001418 <__NVIC_SetPriority+0x50>)
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	3b04      	subs	r3, #4
 8001400:	0112      	lsls	r2, r2, #4
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	440b      	add	r3, r1
 8001406:	761a      	strb	r2, [r3, #24]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000e100 	.word	0xe000e100
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <NVIC_EncodePriority>:
{
 800141c:	b480      	push	{r7}
 800141e:	b089      	sub	sp, #36	@ 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f1c3 0307 	rsb	r3, r3, #7
 8001436:	2b04      	cmp	r3, #4
 8001438:	bf28      	it	cs
 800143a:	2304      	movcs	r3, #4
 800143c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3304      	adds	r3, #4
 8001442:	2b06      	cmp	r3, #6
 8001444:	d902      	bls.n	800144c <NVIC_EncodePriority+0x30>
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3b03      	subs	r3, #3
 800144a:	e000      	b.n	800144e <NVIC_EncodePriority+0x32>
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	f04f 32ff 	mov.w	r2, #4294967295
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43da      	mvns	r2, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	401a      	ands	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001464:	f04f 31ff 	mov.w	r1, #4294967295
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	fa01 f303 	lsl.w	r3, r1, r3
 800146e:	43d9      	mvns	r1, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	4313      	orrs	r3, r2
}
 8001476:	4618      	mov	r0, r3
 8001478:	3724      	adds	r7, #36	@ 0x24
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <SysTick_Config>:
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001494:	d301      	bcc.n	800149a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001496:	2301      	movs	r3, #1
 8001498:	e00f      	b.n	80014ba <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149a:	4a0a      	ldr	r2, [pc, #40]	@ (80014c4 <SysTick_Config+0x40>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a2:	210f      	movs	r1, #15
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f7ff ff8e 	bl	80013c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ac:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <SysTick_Config+0x40>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b2:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <SysTick_Config+0x40>)
 80014b4:	2207      	movs	r2, #7
 80014b6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	e000e010 	.word	0xe000e010

080014c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff29 	bl	8001328 <__NVIC_SetPriorityGrouping>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014f0:	f7ff ff3e 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80014f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f7ff ff8e 	bl	800141c <NVIC_EncodePriority>
 8001500:	4602      	mov	r2, r0
 8001502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff5d 	bl	80013c8 <__NVIC_SetPriority>
}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff31 	bl	800138c <__NVIC_EnableIRQ>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ffa2 	bl	8001484 <SysTick_Config>
 8001540:	4603      	mov	r3, r0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e098      	b.n	8001690 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	4b4d      	ldr	r3, [pc, #308]	@ (800169c <HAL_DMA_Init+0x150>)
 8001566:	429a      	cmp	r2, r3
 8001568:	d80f      	bhi.n	800158a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	461a      	mov	r2, r3
 8001570:	4b4b      	ldr	r3, [pc, #300]	@ (80016a0 <HAL_DMA_Init+0x154>)
 8001572:	4413      	add	r3, r2
 8001574:	4a4b      	ldr	r2, [pc, #300]	@ (80016a4 <HAL_DMA_Init+0x158>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	091b      	lsrs	r3, r3, #4
 800157c:	009a      	lsls	r2, r3, #2
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a48      	ldr	r2, [pc, #288]	@ (80016a8 <HAL_DMA_Init+0x15c>)
 8001586:	641a      	str	r2, [r3, #64]	@ 0x40
 8001588:	e00e      	b.n	80015a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	4b46      	ldr	r3, [pc, #280]	@ (80016ac <HAL_DMA_Init+0x160>)
 8001592:	4413      	add	r3, r2
 8001594:	4a43      	ldr	r2, [pc, #268]	@ (80016a4 <HAL_DMA_Init+0x158>)
 8001596:	fba2 2303 	umull	r2, r3, r2, r3
 800159a:	091b      	lsrs	r3, r3, #4
 800159c:	009a      	lsls	r2, r3, #2
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a42      	ldr	r2, [pc, #264]	@ (80016b0 <HAL_DMA_Init+0x164>)
 80015a6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2202      	movs	r2, #2
 80015ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80015be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80015c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80015cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001602:	d039      	beq.n	8001678 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001608:	4a27      	ldr	r2, [pc, #156]	@ (80016a8 <HAL_DMA_Init+0x15c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d11a      	bne.n	8001644 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800160e:	4b29      	ldr	r3, [pc, #164]	@ (80016b4 <HAL_DMA_Init+0x168>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001616:	f003 031c 	and.w	r3, r3, #28
 800161a:	210f      	movs	r1, #15
 800161c:	fa01 f303 	lsl.w	r3, r1, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	4924      	ldr	r1, [pc, #144]	@ (80016b4 <HAL_DMA_Init+0x168>)
 8001624:	4013      	ands	r3, r2
 8001626:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001628:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <HAL_DMA_Init+0x168>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6859      	ldr	r1, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001634:	f003 031c 	and.w	r3, r3, #28
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	491d      	ldr	r1, [pc, #116]	@ (80016b4 <HAL_DMA_Init+0x168>)
 800163e:	4313      	orrs	r3, r2
 8001640:	600b      	str	r3, [r1, #0]
 8001642:	e019      	b.n	8001678 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001644:	4b1c      	ldr	r3, [pc, #112]	@ (80016b8 <HAL_DMA_Init+0x16c>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164c:	f003 031c 	and.w	r3, r3, #28
 8001650:	210f      	movs	r1, #15
 8001652:	fa01 f303 	lsl.w	r3, r1, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	4917      	ldr	r1, [pc, #92]	@ (80016b8 <HAL_DMA_Init+0x16c>)
 800165a:	4013      	ands	r3, r2
 800165c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800165e:	4b16      	ldr	r3, [pc, #88]	@ (80016b8 <HAL_DMA_Init+0x16c>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6859      	ldr	r1, [r3, #4]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166a:	f003 031c 	and.w	r3, r3, #28
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	4911      	ldr	r1, [pc, #68]	@ (80016b8 <HAL_DMA_Init+0x16c>)
 8001674:	4313      	orrs	r3, r2
 8001676:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	40020407 	.word	0x40020407
 80016a0:	bffdfff8 	.word	0xbffdfff8
 80016a4:	cccccccd 	.word	0xcccccccd
 80016a8:	40020000 	.word	0x40020000
 80016ac:	bffdfbf8 	.word	0xbffdfbf8
 80016b0:	40020400 	.word	0x40020400
 80016b4:	400200a8 	.word	0x400200a8
 80016b8:	400204a8 	.word	0x400204a8

080016bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
 80016c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d101      	bne.n	80016dc <HAL_DMA_Start_IT+0x20>
 80016d8:	2302      	movs	r3, #2
 80016da:	e04b      	b.n	8001774 <HAL_DMA_Start_IT+0xb8>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d13a      	bne.n	8001766 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2202      	movs	r2, #2
 80016f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0201 	bic.w	r2, r2, #1
 800170c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	68b9      	ldr	r1, [r7, #8]
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 f95f 	bl	80019d8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	2b00      	cmp	r3, #0
 8001720:	d008      	beq.n	8001734 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f042 020e 	orr.w	r2, r2, #14
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	e00f      	b.n	8001754 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0204 	bic.w	r2, r2, #4
 8001742:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 020a 	orr.w	r2, r2, #10
 8001752:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0201 	orr.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e005      	b.n	8001772 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800176e:	2302      	movs	r3, #2
 8001770:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001772:	7dfb      	ldrb	r3, [r7, #23]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d008      	beq.n	80017a6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2204      	movs	r2, #4
 8001798:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e022      	b.n	80017ec <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 020e 	bic.w	r2, r2, #14
 80017b4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0201 	bic.w	r2, r2, #1
 80017c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ca:	f003 021c 	and.w	r2, r3, #28
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	2101      	movs	r1, #1
 80017d4:	fa01 f202 	lsl.w	r2, r1, r2
 80017d8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d005      	beq.n	800181c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2204      	movs	r2, #4
 8001814:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	73fb      	strb	r3, [r7, #15]
 800181a:	e029      	b.n	8001870 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 020e 	bic.w	r2, r2, #14
 800182a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0201 	bic.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001840:	f003 021c 	and.w	r2, r3, #28
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001848:	2101      	movs	r1, #1
 800184a:	fa01 f202 	lsl.w	r2, r1, r2
 800184e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	4798      	blx	r3
    }
  }
  return status;
 8001870:	7bfb      	ldrb	r3, [r7, #15]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001896:	f003 031c 	and.w	r3, r3, #28
 800189a:	2204      	movs	r2, #4
 800189c:	409a      	lsls	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d026      	beq.n	80018f4 <HAL_DMA_IRQHandler+0x7a>
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d021      	beq.n	80018f4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0320 	and.w	r3, r3, #32
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d107      	bne.n	80018ce <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 0204 	bic.w	r2, r2, #4
 80018cc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d2:	f003 021c 	and.w	r2, r3, #28
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	2104      	movs	r1, #4
 80018dc:	fa01 f202 	lsl.w	r2, r1, r2
 80018e0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d071      	beq.n	80019ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80018f2:	e06c      	b.n	80019ce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f8:	f003 031c 	and.w	r3, r3, #28
 80018fc:	2202      	movs	r2, #2
 80018fe:	409a      	lsls	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4013      	ands	r3, r2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d02e      	beq.n	8001966 <HAL_DMA_IRQHandler+0xec>
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d029      	beq.n	8001966 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0320 	and.w	r3, r3, #32
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10b      	bne.n	8001938 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 020a 	bic.w	r2, r2, #10
 800192e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193c:	f003 021c 	and.w	r2, r3, #28
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	2102      	movs	r1, #2
 8001946:	fa01 f202 	lsl.w	r2, r1, r2
 800194a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001958:	2b00      	cmp	r3, #0
 800195a:	d038      	beq.n	80019ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001964:	e033      	b.n	80019ce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196a:	f003 031c 	and.w	r3, r3, #28
 800196e:	2208      	movs	r2, #8
 8001970:	409a      	lsls	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4013      	ands	r3, r2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d02a      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x156>
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d025      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 020e 	bic.w	r2, r2, #14
 8001992:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001998:	f003 021c 	and.w	r2, r3, #28
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a0:	2101      	movs	r1, #1
 80019a2:	fa01 f202 	lsl.w	r2, r1, r2
 80019a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d004      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80019ce:	bf00      	nop
 80019d0:	bf00      	nop
}
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
 80019e4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ea:	f003 021c 	and.w	r2, r3, #28
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	2101      	movs	r1, #1
 80019f4:	fa01 f202 	lsl.w	r2, r1, r2
 80019f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b10      	cmp	r3, #16
 8001a08:	d108      	bne.n	8001a1c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a1a:	e007      	b.n	8001a2c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	60da      	str	r2, [r3, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a46:	e17f      	b.n	8001d48 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	4013      	ands	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 8171 	beq.w	8001d42 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d005      	beq.n	8001a78 <HAL_GPIO_Init+0x40>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d130      	bne.n	8001ada <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aae:	2201      	movs	r2, #1
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	f003 0201 	and.w	r2, r3, #1
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d118      	bne.n	8001b18 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001aec:	2201      	movs	r2, #1
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	08db      	lsrs	r3, r3, #3
 8001b02:	f003 0201 	and.w	r2, r3, #1
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d017      	beq.n	8001b54 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d123      	bne.n	8001ba8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	08da      	lsrs	r2, r3, #3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3208      	adds	r2, #8
 8001b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	220f      	movs	r2, #15
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	08da      	lsrs	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3208      	adds	r2, #8
 8001ba2:	6939      	ldr	r1, [r7, #16]
 8001ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0203 	and.w	r2, r3, #3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80ac 	beq.w	8001d42 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bea:	4b5f      	ldr	r3, [pc, #380]	@ (8001d68 <HAL_GPIO_Init+0x330>)
 8001bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bee:	4a5e      	ldr	r2, [pc, #376]	@ (8001d68 <HAL_GPIO_Init+0x330>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bf6:	4b5c      	ldr	r3, [pc, #368]	@ (8001d68 <HAL_GPIO_Init+0x330>)
 8001bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c02:	4a5a      	ldr	r2, [pc, #360]	@ (8001d6c <HAL_GPIO_Init+0x334>)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	089b      	lsrs	r3, r3, #2
 8001c08:	3302      	adds	r3, #2
 8001c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	220f      	movs	r2, #15
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c2c:	d025      	beq.n	8001c7a <HAL_GPIO_Init+0x242>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4f      	ldr	r2, [pc, #316]	@ (8001d70 <HAL_GPIO_Init+0x338>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d01f      	beq.n	8001c76 <HAL_GPIO_Init+0x23e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4e      	ldr	r2, [pc, #312]	@ (8001d74 <HAL_GPIO_Init+0x33c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d019      	beq.n	8001c72 <HAL_GPIO_Init+0x23a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4d      	ldr	r2, [pc, #308]	@ (8001d78 <HAL_GPIO_Init+0x340>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d013      	beq.n	8001c6e <HAL_GPIO_Init+0x236>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a4c      	ldr	r2, [pc, #304]	@ (8001d7c <HAL_GPIO_Init+0x344>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00d      	beq.n	8001c6a <HAL_GPIO_Init+0x232>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a4b      	ldr	r2, [pc, #300]	@ (8001d80 <HAL_GPIO_Init+0x348>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d007      	beq.n	8001c66 <HAL_GPIO_Init+0x22e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4a      	ldr	r2, [pc, #296]	@ (8001d84 <HAL_GPIO_Init+0x34c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d101      	bne.n	8001c62 <HAL_GPIO_Init+0x22a>
 8001c5e:	2306      	movs	r3, #6
 8001c60:	e00c      	b.n	8001c7c <HAL_GPIO_Init+0x244>
 8001c62:	2307      	movs	r3, #7
 8001c64:	e00a      	b.n	8001c7c <HAL_GPIO_Init+0x244>
 8001c66:	2305      	movs	r3, #5
 8001c68:	e008      	b.n	8001c7c <HAL_GPIO_Init+0x244>
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x244>
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e004      	b.n	8001c7c <HAL_GPIO_Init+0x244>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e002      	b.n	8001c7c <HAL_GPIO_Init+0x244>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <HAL_GPIO_Init+0x244>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	f002 0203 	and.w	r2, r2, #3
 8001c82:	0092      	lsls	r2, r2, #2
 8001c84:	4093      	lsls	r3, r2
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c8c:	4937      	ldr	r1, [pc, #220]	@ (8001d6c <HAL_GPIO_Init+0x334>)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	3302      	adds	r3, #2
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d88 <HAL_GPIO_Init+0x350>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cbe:	4a32      	ldr	r2, [pc, #200]	@ (8001d88 <HAL_GPIO_Init+0x350>)
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cc4:	4b30      	ldr	r3, [pc, #192]	@ (8001d88 <HAL_GPIO_Init+0x350>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ce8:	4a27      	ldr	r2, [pc, #156]	@ (8001d88 <HAL_GPIO_Init+0x350>)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001cee:	4b26      	ldr	r3, [pc, #152]	@ (8001d88 <HAL_GPIO_Init+0x350>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d12:	4a1d      	ldr	r2, [pc, #116]	@ (8001d88 <HAL_GPIO_Init+0x350>)
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d18:	4b1b      	ldr	r3, [pc, #108]	@ (8001d88 <HAL_GPIO_Init+0x350>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d3c:	4a12      	ldr	r2, [pc, #72]	@ (8001d88 <HAL_GPIO_Init+0x350>)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	3301      	adds	r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f47f ae78 	bne.w	8001a48 <HAL_GPIO_Init+0x10>
  }
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	371c      	adds	r7, #28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40010000 	.word	0x40010000
 8001d70:	48000400 	.word	0x48000400
 8001d74:	48000800 	.word	0x48000800
 8001d78:	48000c00 	.word	0x48000c00
 8001d7c:	48001000 	.word	0x48001000
 8001d80:	48001400 	.word	0x48001400
 8001d84:	48001800 	.word	0x48001800
 8001d88:	40010400 	.word	0x40010400

08001d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	807b      	strh	r3, [r7, #2]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d9c:	787b      	ldrb	r3, [r7, #1]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001da2:	887a      	ldrh	r2, [r7, #2]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001da8:	e002      	b.n	8001db0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dce:	887a      	ldrh	r2, [r7, #2]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	041a      	lsls	r2, r3, #16
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	43d9      	mvns	r1, r3
 8001dda:	887b      	ldrh	r3, [r7, #2]
 8001ddc:	400b      	ands	r3, r1
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	619a      	str	r2, [r3, #24]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001df4:	4b04      	ldr	r3, [pc, #16]	@ (8001e08 <HAL_PWREx_GetVoltageRange+0x18>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40007000 	.word	0x40007000

08001e0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e1a:	d130      	bne.n	8001e7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e1c:	4b23      	ldr	r3, [pc, #140]	@ (8001eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e28:	d038      	beq.n	8001e9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e2a:	4b20      	ldr	r3, [pc, #128]	@ (8001eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e32:	4a1e      	ldr	r2, [pc, #120]	@ (8001eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e34:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2232      	movs	r2, #50	@ 0x32
 8001e40:	fb02 f303 	mul.w	r3, r2, r3
 8001e44:	4a1b      	ldr	r2, [pc, #108]	@ (8001eb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e46:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4a:	0c9b      	lsrs	r3, r3, #18
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e50:	e002      	b.n	8001e58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e58:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e64:	d102      	bne.n	8001e6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f2      	bne.n	8001e52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e78:	d110      	bne.n	8001e9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e00f      	b.n	8001e9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e8a:	d007      	beq.n	8001e9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e8c:	4b07      	ldr	r3, [pc, #28]	@ (8001eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e94:	4a05      	ldr	r2, [pc, #20]	@ (8001eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40007000 	.word	0x40007000
 8001eb0:	20000008 	.word	0x20000008
 8001eb4:	431bde83 	.word	0x431bde83

08001eb8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e3ca      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eca:	4b97      	ldr	r3, [pc, #604]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
 8001ed2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ed4:	4b94      	ldr	r3, [pc, #592]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0310 	and.w	r3, r3, #16
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 80e4 	beq.w	80020b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d007      	beq.n	8001f02 <HAL_RCC_OscConfig+0x4a>
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	2b0c      	cmp	r3, #12
 8001ef6:	f040 808b 	bne.w	8002010 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	f040 8087 	bne.w	8002010 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f02:	4b89      	ldr	r3, [pc, #548]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <HAL_RCC_OscConfig+0x62>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e3a2      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1a      	ldr	r2, [r3, #32]
 8001f1e:	4b82      	ldr	r3, [pc, #520]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d004      	beq.n	8001f34 <HAL_RCC_OscConfig+0x7c>
 8001f2a:	4b7f      	ldr	r3, [pc, #508]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f32:	e005      	b.n	8001f40 <HAL_RCC_OscConfig+0x88>
 8001f34:	4b7c      	ldr	r3, [pc, #496]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8001f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f3a:	091b      	lsrs	r3, r3, #4
 8001f3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d223      	bcs.n	8001f8c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f000 fd55 	bl	80029f8 <RCC_SetFlashLatencyFromMSIRange>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e383      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f58:	4b73      	ldr	r3, [pc, #460]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a72      	ldr	r2, [pc, #456]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8001f5e:	f043 0308 	orr.w	r3, r3, #8
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	4b70      	ldr	r3, [pc, #448]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	496d      	ldr	r1, [pc, #436]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f76:	4b6c      	ldr	r3, [pc, #432]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	021b      	lsls	r3, r3, #8
 8001f84:	4968      	ldr	r1, [pc, #416]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	604b      	str	r3, [r1, #4]
 8001f8a:	e025      	b.n	8001fd8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f8c:	4b66      	ldr	r3, [pc, #408]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a65      	ldr	r2, [pc, #404]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8001f92:	f043 0308 	orr.w	r3, r3, #8
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	4b63      	ldr	r3, [pc, #396]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	4960      	ldr	r1, [pc, #384]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001faa:	4b5f      	ldr	r3, [pc, #380]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	495b      	ldr	r1, [pc, #364]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d109      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 fd15 	bl	80029f8 <RCC_SetFlashLatencyFromMSIRange>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e343      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fd8:	f000 fc4a 	bl	8002870 <HAL_RCC_GetSysClockFreq>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	4b52      	ldr	r3, [pc, #328]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	091b      	lsrs	r3, r3, #4
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	4950      	ldr	r1, [pc, #320]	@ (800212c <HAL_RCC_OscConfig+0x274>)
 8001fea:	5ccb      	ldrb	r3, [r1, r3]
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff4:	4a4e      	ldr	r2, [pc, #312]	@ (8002130 <HAL_RCC_OscConfig+0x278>)
 8001ff6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ff8:	4b4e      	ldr	r3, [pc, #312]	@ (8002134 <HAL_RCC_OscConfig+0x27c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff f913 	bl	8001228 <HAL_InitTick>
 8002002:	4603      	mov	r3, r0
 8002004:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d052      	beq.n	80020b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	e327      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d032      	beq.n	800207e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002018:	4b43      	ldr	r3, [pc, #268]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a42      	ldr	r2, [pc, #264]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002024:	f7ff f950 	bl	80012c8 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800202c:	f7ff f94c 	bl	80012c8 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e310      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800203e:	4b3a      	ldr	r3, [pc, #232]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800204a:	4b37      	ldr	r3, [pc, #220]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a36      	ldr	r2, [pc, #216]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8002050:	f043 0308 	orr.w	r3, r3, #8
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	4b34      	ldr	r3, [pc, #208]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	4931      	ldr	r1, [pc, #196]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8002064:	4313      	orrs	r3, r2
 8002066:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002068:	4b2f      	ldr	r3, [pc, #188]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	492c      	ldr	r1, [pc, #176]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]
 800207c:	e01a      	b.n	80020b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800207e:	4b2a      	ldr	r3, [pc, #168]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a29      	ldr	r2, [pc, #164]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8002084:	f023 0301 	bic.w	r3, r3, #1
 8002088:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800208a:	f7ff f91d 	bl	80012c8 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002092:	f7ff f919 	bl	80012c8 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e2dd      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020a4:	4b20      	ldr	r3, [pc, #128]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f0      	bne.n	8002092 <HAL_RCC_OscConfig+0x1da>
 80020b0:	e000      	b.n	80020b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d074      	beq.n	80021aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d005      	beq.n	80020d2 <HAL_RCC_OscConfig+0x21a>
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	2b0c      	cmp	r3, #12
 80020ca:	d10e      	bne.n	80020ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d10b      	bne.n	80020ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d2:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d064      	beq.n	80021a8 <HAL_RCC_OscConfig+0x2f0>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d160      	bne.n	80021a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e2ba      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020f2:	d106      	bne.n	8002102 <HAL_RCC_OscConfig+0x24a>
 80020f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 80020fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	e026      	b.n	8002150 <HAL_RCC_OscConfig+0x298>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800210a:	d115      	bne.n	8002138 <HAL_RCC_OscConfig+0x280>
 800210c:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a05      	ldr	r2, [pc, #20]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8002112:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	4b03      	ldr	r3, [pc, #12]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a02      	ldr	r2, [pc, #8]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 800211e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	e014      	b.n	8002150 <HAL_RCC_OscConfig+0x298>
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000
 800212c:	08005d2c 	.word	0x08005d2c
 8002130:	20000008 	.word	0x20000008
 8002134:	2000000c 	.word	0x2000000c
 8002138:	4ba0      	ldr	r3, [pc, #640]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a9f      	ldr	r2, [pc, #636]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 800213e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	4b9d      	ldr	r3, [pc, #628]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a9c      	ldr	r2, [pc, #624]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 800214a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800214e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d013      	beq.n	8002180 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002158:	f7ff f8b6 	bl	80012c8 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002160:	f7ff f8b2 	bl	80012c8 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b64      	cmp	r3, #100	@ 0x64
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e276      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002172:	4b92      	ldr	r3, [pc, #584]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0x2a8>
 800217e:	e014      	b.n	80021aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7ff f8a2 	bl	80012c8 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002188:	f7ff f89e 	bl	80012c8 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b64      	cmp	r3, #100	@ 0x64
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e262      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800219a:	4b88      	ldr	r3, [pc, #544]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x2d0>
 80021a6:	e000      	b.n	80021aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d060      	beq.n	8002278 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d005      	beq.n	80021c8 <HAL_RCC_OscConfig+0x310>
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	2b0c      	cmp	r3, #12
 80021c0:	d119      	bne.n	80021f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d116      	bne.n	80021f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021c8:	4b7c      	ldr	r3, [pc, #496]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_RCC_OscConfig+0x328>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e23f      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e0:	4b76      	ldr	r3, [pc, #472]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	061b      	lsls	r3, r3, #24
 80021ee:	4973      	ldr	r1, [pc, #460]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f4:	e040      	b.n	8002278 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d023      	beq.n	8002246 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021fe:	4b6f      	ldr	r3, [pc, #444]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a6e      	ldr	r2, [pc, #440]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 8002204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220a:	f7ff f85d 	bl	80012c8 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002212:	f7ff f859 	bl	80012c8 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e21d      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002224:	4b65      	ldr	r3, [pc, #404]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0f0      	beq.n	8002212 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002230:	4b62      	ldr	r3, [pc, #392]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	061b      	lsls	r3, r3, #24
 800223e:	495f      	ldr	r1, [pc, #380]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 8002240:	4313      	orrs	r3, r2
 8002242:	604b      	str	r3, [r1, #4]
 8002244:	e018      	b.n	8002278 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002246:	4b5d      	ldr	r3, [pc, #372]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a5c      	ldr	r2, [pc, #368]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 800224c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002250:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002252:	f7ff f839 	bl	80012c8 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800225a:	f7ff f835 	bl	80012c8 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e1f9      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800226c:	4b53      	ldr	r3, [pc, #332]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f0      	bne.n	800225a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d03c      	beq.n	80022fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d01c      	beq.n	80022c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800228c:	4b4b      	ldr	r3, [pc, #300]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 800228e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002292:	4a4a      	ldr	r2, [pc, #296]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229c:	f7ff f814 	bl	80012c8 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a4:	f7ff f810 	bl	80012c8 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e1d4      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022b6:	4b41      	ldr	r3, [pc, #260]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 80022b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0ef      	beq.n	80022a4 <HAL_RCC_OscConfig+0x3ec>
 80022c4:	e01b      	b.n	80022fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c6:	4b3d      	ldr	r3, [pc, #244]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 80022c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022cc:	4a3b      	ldr	r2, [pc, #236]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 80022ce:	f023 0301 	bic.w	r3, r3, #1
 80022d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d6:	f7fe fff7 	bl	80012c8 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022de:	f7fe fff3 	bl	80012c8 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e1b7      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022f0:	4b32      	ldr	r3, [pc, #200]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 80022f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1ef      	bne.n	80022de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 80a6 	beq.w	8002458 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800230c:	2300      	movs	r3, #0
 800230e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002310:	4b2a      	ldr	r3, [pc, #168]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 8002312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10d      	bne.n	8002338 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800231c:	4b27      	ldr	r3, [pc, #156]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 800231e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002320:	4a26      	ldr	r2, [pc, #152]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 8002322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002326:	6593      	str	r3, [r2, #88]	@ 0x58
 8002328:	4b24      	ldr	r3, [pc, #144]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 800232a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002334:	2301      	movs	r3, #1
 8002336:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002338:	4b21      	ldr	r3, [pc, #132]	@ (80023c0 <HAL_RCC_OscConfig+0x508>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d118      	bne.n	8002376 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002344:	4b1e      	ldr	r3, [pc, #120]	@ (80023c0 <HAL_RCC_OscConfig+0x508>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a1d      	ldr	r2, [pc, #116]	@ (80023c0 <HAL_RCC_OscConfig+0x508>)
 800234a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800234e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002350:	f7fe ffba 	bl	80012c8 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002358:	f7fe ffb6 	bl	80012c8 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e17a      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800236a:	4b15      	ldr	r3, [pc, #84]	@ (80023c0 <HAL_RCC_OscConfig+0x508>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d108      	bne.n	8002390 <HAL_RCC_OscConfig+0x4d8>
 800237e:	4b0f      	ldr	r3, [pc, #60]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 8002380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002384:	4a0d      	ldr	r2, [pc, #52]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800238e:	e029      	b.n	80023e4 <HAL_RCC_OscConfig+0x52c>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b05      	cmp	r3, #5
 8002396:	d115      	bne.n	80023c4 <HAL_RCC_OscConfig+0x50c>
 8002398:	4b08      	ldr	r3, [pc, #32]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800239e:	4a07      	ldr	r2, [pc, #28]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 80023a0:	f043 0304 	orr.w	r3, r3, #4
 80023a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023a8:	4b04      	ldr	r3, [pc, #16]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 80023aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ae:	4a03      	ldr	r2, [pc, #12]	@ (80023bc <HAL_RCC_OscConfig+0x504>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023b8:	e014      	b.n	80023e4 <HAL_RCC_OscConfig+0x52c>
 80023ba:	bf00      	nop
 80023bc:	40021000 	.word	0x40021000
 80023c0:	40007000 	.word	0x40007000
 80023c4:	4b9c      	ldr	r3, [pc, #624]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ca:	4a9b      	ldr	r2, [pc, #620]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 80023cc:	f023 0301 	bic.w	r3, r3, #1
 80023d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023d4:	4b98      	ldr	r3, [pc, #608]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 80023d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023da:	4a97      	ldr	r2, [pc, #604]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 80023dc:	f023 0304 	bic.w	r3, r3, #4
 80023e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d016      	beq.n	800241a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ec:	f7fe ff6c 	bl	80012c8 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f2:	e00a      	b.n	800240a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f4:	f7fe ff68 	bl	80012c8 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e12a      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800240a:	4b8b      	ldr	r3, [pc, #556]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 800240c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0ed      	beq.n	80023f4 <HAL_RCC_OscConfig+0x53c>
 8002418:	e015      	b.n	8002446 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241a:	f7fe ff55 	bl	80012c8 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002420:	e00a      	b.n	8002438 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002422:	f7fe ff51 	bl	80012c8 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002430:	4293      	cmp	r3, r2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e113      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002438:	4b7f      	ldr	r3, [pc, #508]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1ed      	bne.n	8002422 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002446:	7ffb      	ldrb	r3, [r7, #31]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d105      	bne.n	8002458 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244c:	4b7a      	ldr	r3, [pc, #488]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 800244e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002450:	4a79      	ldr	r2, [pc, #484]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 8002452:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002456:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 80fe 	beq.w	800265e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002466:	2b02      	cmp	r3, #2
 8002468:	f040 80d0 	bne.w	800260c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800246c:	4b72      	ldr	r3, [pc, #456]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f003 0203 	and.w	r2, r3, #3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247c:	429a      	cmp	r2, r3
 800247e:	d130      	bne.n	80024e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	3b01      	subs	r3, #1
 800248c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800248e:	429a      	cmp	r2, r3
 8002490:	d127      	bne.n	80024e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800249c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800249e:	429a      	cmp	r2, r3
 80024a0:	d11f      	bne.n	80024e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80024ac:	2a07      	cmp	r2, #7
 80024ae:	bf14      	ite	ne
 80024b0:	2201      	movne	r2, #1
 80024b2:	2200      	moveq	r2, #0
 80024b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d113      	bne.n	80024e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024c4:	085b      	lsrs	r3, r3, #1
 80024c6:	3b01      	subs	r3, #1
 80024c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d109      	bne.n	80024e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d8:	085b      	lsrs	r3, r3, #1
 80024da:	3b01      	subs	r3, #1
 80024dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024de:	429a      	cmp	r2, r3
 80024e0:	d06e      	beq.n	80025c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	2b0c      	cmp	r3, #12
 80024e6:	d069      	beq.n	80025bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024e8:	4b53      	ldr	r3, [pc, #332]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d105      	bne.n	8002500 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80024f4:	4b50      	ldr	r3, [pc, #320]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0ad      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002504:	4b4c      	ldr	r3, [pc, #304]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a4b      	ldr	r2, [pc, #300]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 800250a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800250e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002510:	f7fe feda 	bl	80012c8 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002518:	f7fe fed6 	bl	80012c8 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e09a      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800252a:	4b43      	ldr	r3, [pc, #268]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002536:	4b40      	ldr	r3, [pc, #256]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	4b40      	ldr	r3, [pc, #256]	@ (800263c <HAL_RCC_OscConfig+0x784>)
 800253c:	4013      	ands	r3, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002546:	3a01      	subs	r2, #1
 8002548:	0112      	lsls	r2, r2, #4
 800254a:	4311      	orrs	r1, r2
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002550:	0212      	lsls	r2, r2, #8
 8002552:	4311      	orrs	r1, r2
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002558:	0852      	lsrs	r2, r2, #1
 800255a:	3a01      	subs	r2, #1
 800255c:	0552      	lsls	r2, r2, #21
 800255e:	4311      	orrs	r1, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002564:	0852      	lsrs	r2, r2, #1
 8002566:	3a01      	subs	r2, #1
 8002568:	0652      	lsls	r2, r2, #25
 800256a:	4311      	orrs	r1, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002570:	0912      	lsrs	r2, r2, #4
 8002572:	0452      	lsls	r2, r2, #17
 8002574:	430a      	orrs	r2, r1
 8002576:	4930      	ldr	r1, [pc, #192]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 8002578:	4313      	orrs	r3, r2
 800257a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800257c:	4b2e      	ldr	r3, [pc, #184]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a2d      	ldr	r2, [pc, #180]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 8002582:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002586:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002588:	4b2b      	ldr	r3, [pc, #172]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4a2a      	ldr	r2, [pc, #168]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 800258e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002592:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002594:	f7fe fe98 	bl	80012c8 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259c:	f7fe fe94 	bl	80012c8 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e058      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ae:	4b22      	ldr	r3, [pc, #136]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025ba:	e050      	b.n	800265e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e04f      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d148      	bne.n	800265e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a19      	ldr	r2, [pc, #100]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 80025d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025d8:	4b17      	ldr	r3, [pc, #92]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	4a16      	ldr	r2, [pc, #88]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 80025de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025e4:	f7fe fe70 	bl	80012c8 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ec:	f7fe fe6c 	bl	80012c8 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e030      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x734>
 800260a:	e028      	b.n	800265e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	2b0c      	cmp	r3, #12
 8002610:	d023      	beq.n	800265a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002612:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a08      	ldr	r2, [pc, #32]	@ (8002638 <HAL_RCC_OscConfig+0x780>)
 8002618:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800261c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7fe fe53 	bl	80012c8 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002624:	e00c      	b.n	8002640 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002626:	f7fe fe4f 	bl	80012c8 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d905      	bls.n	8002640 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e013      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
 8002638:	40021000 	.word	0x40021000
 800263c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002640:	4b09      	ldr	r3, [pc, #36]	@ (8002668 <HAL_RCC_OscConfig+0x7b0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1ec      	bne.n	8002626 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800264c:	4b06      	ldr	r3, [pc, #24]	@ (8002668 <HAL_RCC_OscConfig+0x7b0>)
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	4905      	ldr	r1, [pc, #20]	@ (8002668 <HAL_RCC_OscConfig+0x7b0>)
 8002652:	4b06      	ldr	r3, [pc, #24]	@ (800266c <HAL_RCC_OscConfig+0x7b4>)
 8002654:	4013      	ands	r3, r2
 8002656:	60cb      	str	r3, [r1, #12]
 8002658:	e001      	b.n	800265e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3720      	adds	r7, #32
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	feeefffc 	.word	0xfeeefffc

08002670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0e7      	b.n	8002854 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002684:	4b75      	ldr	r3, [pc, #468]	@ (800285c <HAL_RCC_ClockConfig+0x1ec>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d910      	bls.n	80026b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002692:	4b72      	ldr	r3, [pc, #456]	@ (800285c <HAL_RCC_ClockConfig+0x1ec>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 0207 	bic.w	r2, r3, #7
 800269a:	4970      	ldr	r1, [pc, #448]	@ (800285c <HAL_RCC_ClockConfig+0x1ec>)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a2:	4b6e      	ldr	r3, [pc, #440]	@ (800285c <HAL_RCC_ClockConfig+0x1ec>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d001      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0cf      	b.n	8002854 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d010      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	4b66      	ldr	r3, [pc, #408]	@ (8002860 <HAL_RCC_ClockConfig+0x1f0>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d908      	bls.n	80026e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d0:	4b63      	ldr	r3, [pc, #396]	@ (8002860 <HAL_RCC_ClockConfig+0x1f0>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4960      	ldr	r1, [pc, #384]	@ (8002860 <HAL_RCC_ClockConfig+0x1f0>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d04c      	beq.n	8002788 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	d107      	bne.n	8002706 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f6:	4b5a      	ldr	r3, [pc, #360]	@ (8002860 <HAL_RCC_ClockConfig+0x1f0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d121      	bne.n	8002746 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e0a6      	b.n	8002854 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d107      	bne.n	800271e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800270e:	4b54      	ldr	r3, [pc, #336]	@ (8002860 <HAL_RCC_ClockConfig+0x1f0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d115      	bne.n	8002746 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e09a      	b.n	8002854 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d107      	bne.n	8002736 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002726:	4b4e      	ldr	r3, [pc, #312]	@ (8002860 <HAL_RCC_ClockConfig+0x1f0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e08e      	b.n	8002854 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002736:	4b4a      	ldr	r3, [pc, #296]	@ (8002860 <HAL_RCC_ClockConfig+0x1f0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e086      	b.n	8002854 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002746:	4b46      	ldr	r3, [pc, #280]	@ (8002860 <HAL_RCC_ClockConfig+0x1f0>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f023 0203 	bic.w	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4943      	ldr	r1, [pc, #268]	@ (8002860 <HAL_RCC_ClockConfig+0x1f0>)
 8002754:	4313      	orrs	r3, r2
 8002756:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002758:	f7fe fdb6 	bl	80012c8 <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	e00a      	b.n	8002776 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002760:	f7fe fdb2 	bl	80012c8 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e06e      	b.n	8002854 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	4b3a      	ldr	r3, [pc, #232]	@ (8002860 <HAL_RCC_ClockConfig+0x1f0>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 020c 	and.w	r2, r3, #12
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	429a      	cmp	r2, r3
 8002786:	d1eb      	bne.n	8002760 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d010      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	4b31      	ldr	r3, [pc, #196]	@ (8002860 <HAL_RCC_ClockConfig+0x1f0>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d208      	bcs.n	80027b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002860 <HAL_RCC_ClockConfig+0x1f0>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	492b      	ldr	r1, [pc, #172]	@ (8002860 <HAL_RCC_ClockConfig+0x1f0>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027b6:	4b29      	ldr	r3, [pc, #164]	@ (800285c <HAL_RCC_ClockConfig+0x1ec>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d210      	bcs.n	80027e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c4:	4b25      	ldr	r3, [pc, #148]	@ (800285c <HAL_RCC_ClockConfig+0x1ec>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 0207 	bic.w	r2, r3, #7
 80027cc:	4923      	ldr	r1, [pc, #140]	@ (800285c <HAL_RCC_ClockConfig+0x1ec>)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d4:	4b21      	ldr	r3, [pc, #132]	@ (800285c <HAL_RCC_ClockConfig+0x1ec>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d001      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e036      	b.n	8002854 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d008      	beq.n	8002804 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002860 <HAL_RCC_ClockConfig+0x1f0>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4918      	ldr	r1, [pc, #96]	@ (8002860 <HAL_RCC_ClockConfig+0x1f0>)
 8002800:	4313      	orrs	r3, r2
 8002802:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d009      	beq.n	8002824 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002810:	4b13      	ldr	r3, [pc, #76]	@ (8002860 <HAL_RCC_ClockConfig+0x1f0>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	4910      	ldr	r1, [pc, #64]	@ (8002860 <HAL_RCC_ClockConfig+0x1f0>)
 8002820:	4313      	orrs	r3, r2
 8002822:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002824:	f000 f824 	bl	8002870 <HAL_RCC_GetSysClockFreq>
 8002828:	4602      	mov	r2, r0
 800282a:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <HAL_RCC_ClockConfig+0x1f0>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	091b      	lsrs	r3, r3, #4
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	490b      	ldr	r1, [pc, #44]	@ (8002864 <HAL_RCC_ClockConfig+0x1f4>)
 8002836:	5ccb      	ldrb	r3, [r1, r3]
 8002838:	f003 031f 	and.w	r3, r3, #31
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
 8002840:	4a09      	ldr	r2, [pc, #36]	@ (8002868 <HAL_RCC_ClockConfig+0x1f8>)
 8002842:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002844:	4b09      	ldr	r3, [pc, #36]	@ (800286c <HAL_RCC_ClockConfig+0x1fc>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f7fe fced 	bl	8001228 <HAL_InitTick>
 800284e:	4603      	mov	r3, r0
 8002850:	72fb      	strb	r3, [r7, #11]

  return status;
 8002852:	7afb      	ldrb	r3, [r7, #11]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40022000 	.word	0x40022000
 8002860:	40021000 	.word	0x40021000
 8002864:	08005d2c 	.word	0x08005d2c
 8002868:	20000008 	.word	0x20000008
 800286c:	2000000c 	.word	0x2000000c

08002870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002870:	b480      	push	{r7}
 8002872:	b089      	sub	sp, #36	@ 0x24
 8002874:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	2300      	movs	r3, #0
 800287c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800287e:	4b3e      	ldr	r3, [pc, #248]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x108>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002888:	4b3b      	ldr	r3, [pc, #236]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x108>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	2b0c      	cmp	r3, #12
 800289c:	d121      	bne.n	80028e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d11e      	bne.n	80028e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028a4:	4b34      	ldr	r3, [pc, #208]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x108>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d107      	bne.n	80028c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028b0:	4b31      	ldr	r3, [pc, #196]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028b6:	0a1b      	lsrs	r3, r3, #8
 80028b8:	f003 030f 	and.w	r3, r3, #15
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	e005      	b.n	80028cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x108>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028cc:	4a2b      	ldr	r2, [pc, #172]	@ (800297c <HAL_RCC_GetSysClockFreq+0x10c>)
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10d      	bne.n	80028f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028e0:	e00a      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d102      	bne.n	80028ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028e8:	4b25      	ldr	r3, [pc, #148]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x110>)
 80028ea:	61bb      	str	r3, [r7, #24]
 80028ec:	e004      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028f4:	4b23      	ldr	r3, [pc, #140]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x114>)
 80028f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	2b0c      	cmp	r3, #12
 80028fc:	d134      	bne.n	8002968 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x108>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d003      	beq.n	8002916 <HAL_RCC_GetSysClockFreq+0xa6>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b03      	cmp	r3, #3
 8002912:	d003      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0xac>
 8002914:	e005      	b.n	8002922 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002916:	4b1a      	ldr	r3, [pc, #104]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x110>)
 8002918:	617b      	str	r3, [r7, #20]
      break;
 800291a:	e005      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800291c:	4b19      	ldr	r3, [pc, #100]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x114>)
 800291e:	617b      	str	r3, [r7, #20]
      break;
 8002920:	e002      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	617b      	str	r3, [r7, #20]
      break;
 8002926:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002928:	4b13      	ldr	r3, [pc, #76]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x108>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	3301      	adds	r3, #1
 8002934:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002936:	4b10      	ldr	r3, [pc, #64]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x108>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	0a1b      	lsrs	r3, r3, #8
 800293c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	fb03 f202 	mul.w	r2, r3, r2
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	fbb2 f3f3 	udiv	r3, r2, r3
 800294c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800294e:	4b0a      	ldr	r3, [pc, #40]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x108>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	0e5b      	lsrs	r3, r3, #25
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	3301      	adds	r3, #1
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	fbb2 f3f3 	udiv	r3, r2, r3
 8002966:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002968:	69bb      	ldr	r3, [r7, #24]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3724      	adds	r7, #36	@ 0x24
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000
 800297c:	08005d44 	.word	0x08005d44
 8002980:	00f42400 	.word	0x00f42400
 8002984:	007a1200 	.word	0x007a1200

08002988 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800298c:	4b03      	ldr	r3, [pc, #12]	@ (800299c <HAL_RCC_GetHCLKFreq+0x14>)
 800298e:	681b      	ldr	r3, [r3, #0]
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	20000008 	.word	0x20000008

080029a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029a4:	f7ff fff0 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	0a1b      	lsrs	r3, r3, #8
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	4904      	ldr	r1, [pc, #16]	@ (80029c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40021000 	.word	0x40021000
 80029c8:	08005d3c 	.word	0x08005d3c

080029cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029d0:	f7ff ffda 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 80029d4:	4602      	mov	r2, r0
 80029d6:	4b06      	ldr	r3, [pc, #24]	@ (80029f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	0adb      	lsrs	r3, r3, #11
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	4904      	ldr	r1, [pc, #16]	@ (80029f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029e2:	5ccb      	ldrb	r3, [r1, r3]
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000
 80029f4:	08005d3c 	.word	0x08005d3c

080029f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a00:	2300      	movs	r3, #0
 8002a02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a04:	4b2a      	ldr	r3, [pc, #168]	@ (8002ab0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a10:	f7ff f9ee 	bl	8001df0 <HAL_PWREx_GetVoltageRange>
 8002a14:	6178      	str	r0, [r7, #20]
 8002a16:	e014      	b.n	8002a42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a18:	4b25      	ldr	r3, [pc, #148]	@ (8002ab0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a1c:	4a24      	ldr	r2, [pc, #144]	@ (8002ab0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a22:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a24:	4b22      	ldr	r3, [pc, #136]	@ (8002ab0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a30:	f7ff f9de 	bl	8001df0 <HAL_PWREx_GetVoltageRange>
 8002a34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a36:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ab0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a40:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a48:	d10b      	bne.n	8002a62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b80      	cmp	r3, #128	@ 0x80
 8002a4e:	d919      	bls.n	8002a84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a54:	d902      	bls.n	8002a5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a56:	2302      	movs	r3, #2
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	e013      	b.n	8002a84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	e010      	b.n	8002a84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b80      	cmp	r3, #128	@ 0x80
 8002a66:	d902      	bls.n	8002a6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a68:	2303      	movs	r3, #3
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	e00a      	b.n	8002a84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b80      	cmp	r3, #128	@ 0x80
 8002a72:	d102      	bne.n	8002a7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a74:	2302      	movs	r3, #2
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	e004      	b.n	8002a84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b70      	cmp	r3, #112	@ 0x70
 8002a7e:	d101      	bne.n	8002a84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a80:	2301      	movs	r3, #1
 8002a82:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a84:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f023 0207 	bic.w	r2, r3, #7
 8002a8c:	4909      	ldr	r1, [pc, #36]	@ (8002ab4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a94:	4b07      	ldr	r3, [pc, #28]	@ (8002ab4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d001      	beq.n	8002aa6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40022000 	.word	0x40022000

08002ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d041      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ad8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002adc:	d02a      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ade:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ae2:	d824      	bhi.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ae4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ae8:	d008      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002aea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002aee:	d81e      	bhi.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00a      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002af4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002af8:	d010      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002afa:	e018      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002afc:	4b86      	ldr	r3, [pc, #536]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	4a85      	ldr	r2, [pc, #532]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b06:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b08:	e015      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 fabb 	bl	800308c <RCCEx_PLLSAI1_Config>
 8002b16:	4603      	mov	r3, r0
 8002b18:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b1a:	e00c      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3320      	adds	r3, #32
 8002b20:	2100      	movs	r1, #0
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 fba6 	bl	8003274 <RCCEx_PLLSAI2_Config>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b2c:	e003      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	74fb      	strb	r3, [r7, #19]
      break;
 8002b32:	e000      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b36:	7cfb      	ldrb	r3, [r7, #19]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10b      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b3c:	4b76      	ldr	r3, [pc, #472]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b4a:	4973      	ldr	r1, [pc, #460]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002b52:	e001      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b54:	7cfb      	ldrb	r3, [r7, #19]
 8002b56:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d041      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b68:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b6c:	d02a      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002b6e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b72:	d824      	bhi.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b78:	d008      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b7e:	d81e      	bhi.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00a      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b88:	d010      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b8a:	e018      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b8c:	4b62      	ldr	r3, [pc, #392]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4a61      	ldr	r2, [pc, #388]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b96:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b98:	e015      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 fa73 	bl	800308c <RCCEx_PLLSAI1_Config>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002baa:	e00c      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3320      	adds	r3, #32
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 fb5e 	bl	8003274 <RCCEx_PLLSAI2_Config>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bbc:	e003      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	74fb      	strb	r3, [r7, #19]
      break;
 8002bc2:	e000      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002bc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bc6:	7cfb      	ldrb	r3, [r7, #19]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10b      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bcc:	4b52      	ldr	r3, [pc, #328]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bda:	494f      	ldr	r1, [pc, #316]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002be2:	e001      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be4:	7cfb      	ldrb	r3, [r7, #19]
 8002be6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80a0 	beq.w	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bfa:	4b47      	ldr	r3, [pc, #284]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00d      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c10:	4b41      	ldr	r3, [pc, #260]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c14:	4a40      	ldr	r2, [pc, #256]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c1c:	4b3e      	ldr	r3, [pc, #248]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c2c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a3a      	ldr	r2, [pc, #232]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c38:	f7fe fb46 	bl	80012c8 <HAL_GetTick>
 8002c3c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c3e:	e009      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c40:	f7fe fb42 	bl	80012c8 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d902      	bls.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	74fb      	strb	r3, [r7, #19]
        break;
 8002c52:	e005      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c54:	4b31      	ldr	r3, [pc, #196]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0ef      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002c60:	7cfb      	ldrb	r3, [r7, #19]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d15c      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c66:	4b2c      	ldr	r3, [pc, #176]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c70:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d01f      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d019      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c84:	4b24      	ldr	r3, [pc, #144]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c90:	4b21      	ldr	r3, [pc, #132]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c96:	4a20      	ldr	r2, [pc, #128]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cb0:	4a19      	ldr	r2, [pc, #100]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d016      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc2:	f7fe fb01 	bl	80012c8 <HAL_GetTick>
 8002cc6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc8:	e00b      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cca:	f7fe fafd 	bl	80012c8 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d902      	bls.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	74fb      	strb	r3, [r7, #19]
            break;
 8002ce0:	e006      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0ec      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cf6:	4b08      	ldr	r3, [pc, #32]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d06:	4904      	ldr	r1, [pc, #16]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d0e:	e009      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d10:	7cfb      	ldrb	r3, [r7, #19]
 8002d12:	74bb      	strb	r3, [r7, #18]
 8002d14:	e006      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d16:	bf00      	nop
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d20:	7cfb      	ldrb	r3, [r7, #19]
 8002d22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d24:	7c7b      	ldrb	r3, [r7, #17]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d105      	bne.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d2a:	4b9e      	ldr	r3, [pc, #632]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2e:	4a9d      	ldr	r2, [pc, #628]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d34:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d42:	4b98      	ldr	r3, [pc, #608]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d48:	f023 0203 	bic.w	r2, r3, #3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d50:	4994      	ldr	r1, [pc, #592]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00a      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d64:	4b8f      	ldr	r3, [pc, #572]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d6a:	f023 020c 	bic.w	r2, r3, #12
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d72:	498c      	ldr	r1, [pc, #560]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d86:	4b87      	ldr	r3, [pc, #540]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d8c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d94:	4983      	ldr	r1, [pc, #524]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002da8:	4b7e      	ldr	r3, [pc, #504]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db6:	497b      	ldr	r1, [pc, #492]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0310 	and.w	r3, r3, #16
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dca:	4b76      	ldr	r3, [pc, #472]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dd8:	4972      	ldr	r1, [pc, #456]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dec:	4b6d      	ldr	r3, [pc, #436]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dfa:	496a      	ldr	r1, [pc, #424]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e0e:	4b65      	ldr	r3, [pc, #404]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e14:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e1c:	4961      	ldr	r1, [pc, #388]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e30:	4b5c      	ldr	r3, [pc, #368]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e3e:	4959      	ldr	r1, [pc, #356]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e52:	4b54      	ldr	r3, [pc, #336]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e58:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e60:	4950      	ldr	r1, [pc, #320]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e74:	4b4b      	ldr	r3, [pc, #300]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e82:	4948      	ldr	r1, [pc, #288]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e96:	4b43      	ldr	r3, [pc, #268]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea4:	493f      	ldr	r1, [pc, #252]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d028      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002eb8:	4b3a      	ldr	r3, [pc, #232]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ebe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ec6:	4937      	ldr	r1, [pc, #220]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ed2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ed6:	d106      	bne.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ed8:	4b32      	ldr	r3, [pc, #200]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	4a31      	ldr	r2, [pc, #196]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ede:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ee2:	60d3      	str	r3, [r2, #12]
 8002ee4:	e011      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002eee:	d10c      	bne.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 f8c8 	bl	800308c <RCCEx_PLLSAI1_Config>
 8002efc:	4603      	mov	r3, r0
 8002efe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f00:	7cfb      	ldrb	r3, [r7, #19]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002f06:	7cfb      	ldrb	r3, [r7, #19]
 8002f08:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d028      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f16:	4b23      	ldr	r3, [pc, #140]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f1c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f24:	491f      	ldr	r1, [pc, #124]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f34:	d106      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f36:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	4a1a      	ldr	r2, [pc, #104]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f40:	60d3      	str	r3, [r2, #12]
 8002f42:	e011      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3304      	adds	r3, #4
 8002f52:	2101      	movs	r1, #1
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 f899 	bl	800308c <RCCEx_PLLSAI1_Config>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f5e:	7cfb      	ldrb	r3, [r7, #19]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002f64:	7cfb      	ldrb	r3, [r7, #19]
 8002f66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d02b      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f74:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f82:	4908      	ldr	r1, [pc, #32]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f92:	d109      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f94:	4b03      	ldr	r3, [pc, #12]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4a02      	ldr	r2, [pc, #8]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f9e:	60d3      	str	r3, [r2, #12]
 8002fa0:	e014      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002fa2:	bf00      	nop
 8002fa4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fb0:	d10c      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 f867 	bl	800308c <RCCEx_PLLSAI1_Config>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fc2:	7cfb      	ldrb	r3, [r7, #19]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002fc8:	7cfb      	ldrb	r3, [r7, #19]
 8002fca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d02f      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fde:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fe6:	4928      	ldr	r1, [pc, #160]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ff2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ff6:	d10d      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	2102      	movs	r1, #2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 f844 	bl	800308c <RCCEx_PLLSAI1_Config>
 8003004:	4603      	mov	r3, r0
 8003006:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003008:	7cfb      	ldrb	r3, [r7, #19]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d014      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800300e:	7cfb      	ldrb	r3, [r7, #19]
 8003010:	74bb      	strb	r3, [r7, #18]
 8003012:	e011      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003018:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800301c:	d10c      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3320      	adds	r3, #32
 8003022:	2102      	movs	r1, #2
 8003024:	4618      	mov	r0, r3
 8003026:	f000 f925 	bl	8003274 <RCCEx_PLLSAI2_Config>
 800302a:	4603      	mov	r3, r0
 800302c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800302e:	7cfb      	ldrb	r3, [r7, #19]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003034:	7cfb      	ldrb	r3, [r7, #19]
 8003036:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00a      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003044:	4b10      	ldr	r3, [pc, #64]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800304a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003052:	490d      	ldr	r1, [pc, #52]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00b      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003066:	4b08      	ldr	r3, [pc, #32]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800306c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003076:	4904      	ldr	r1, [pc, #16]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003078:	4313      	orrs	r3, r2
 800307a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800307e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40021000 	.word	0x40021000

0800308c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800309a:	4b75      	ldr	r3, [pc, #468]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1e4>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d018      	beq.n	80030d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030a6:	4b72      	ldr	r3, [pc, #456]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f003 0203 	and.w	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d10d      	bne.n	80030d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
       ||
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d009      	beq.n	80030d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030be:	4b6c      	ldr	r3, [pc, #432]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	091b      	lsrs	r3, r3, #4
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
       ||
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d047      	beq.n	8003162 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	73fb      	strb	r3, [r7, #15]
 80030d6:	e044      	b.n	8003162 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d018      	beq.n	8003112 <RCCEx_PLLSAI1_Config+0x86>
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d825      	bhi.n	8003130 <RCCEx_PLLSAI1_Config+0xa4>
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d002      	beq.n	80030ee <RCCEx_PLLSAI1_Config+0x62>
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d009      	beq.n	8003100 <RCCEx_PLLSAI1_Config+0x74>
 80030ec:	e020      	b.n	8003130 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030ee:	4b60      	ldr	r3, [pc, #384]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d11d      	bne.n	8003136 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030fe:	e01a      	b.n	8003136 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003100:	4b5b      	ldr	r3, [pc, #364]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003108:	2b00      	cmp	r3, #0
 800310a:	d116      	bne.n	800313a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003110:	e013      	b.n	800313a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003112:	4b57      	ldr	r3, [pc, #348]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10f      	bne.n	800313e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800311e:	4b54      	ldr	r3, [pc, #336]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800312e:	e006      	b.n	800313e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
      break;
 8003134:	e004      	b.n	8003140 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003136:	bf00      	nop
 8003138:	e002      	b.n	8003140 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800313a:	bf00      	nop
 800313c:	e000      	b.n	8003140 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800313e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10d      	bne.n	8003162 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003146:	4b4a      	ldr	r3, [pc, #296]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6819      	ldr	r1, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	430b      	orrs	r3, r1
 800315c:	4944      	ldr	r1, [pc, #272]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1e4>)
 800315e:	4313      	orrs	r3, r2
 8003160:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d17d      	bne.n	8003264 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003168:	4b41      	ldr	r3, [pc, #260]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1e4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a40      	ldr	r2, [pc, #256]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1e4>)
 800316e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003172:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003174:	f7fe f8a8 	bl	80012c8 <HAL_GetTick>
 8003178:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800317a:	e009      	b.n	8003190 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800317c:	f7fe f8a4 	bl	80012c8 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d902      	bls.n	8003190 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	73fb      	strb	r3, [r7, #15]
        break;
 800318e:	e005      	b.n	800319c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003190:	4b37      	ldr	r3, [pc, #220]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1ef      	bne.n	800317c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d160      	bne.n	8003264 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d111      	bne.n	80031cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031a8:	4b31      	ldr	r3, [pc, #196]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80031b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6892      	ldr	r2, [r2, #8]
 80031b8:	0211      	lsls	r1, r2, #8
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68d2      	ldr	r2, [r2, #12]
 80031be:	0912      	lsrs	r2, r2, #4
 80031c0:	0452      	lsls	r2, r2, #17
 80031c2:	430a      	orrs	r2, r1
 80031c4:	492a      	ldr	r1, [pc, #168]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	610b      	str	r3, [r1, #16]
 80031ca:	e027      	b.n	800321c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d112      	bne.n	80031f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031d2:	4b27      	ldr	r3, [pc, #156]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80031da:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6892      	ldr	r2, [r2, #8]
 80031e2:	0211      	lsls	r1, r2, #8
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6912      	ldr	r2, [r2, #16]
 80031e8:	0852      	lsrs	r2, r2, #1
 80031ea:	3a01      	subs	r2, #1
 80031ec:	0552      	lsls	r2, r2, #21
 80031ee:	430a      	orrs	r2, r1
 80031f0:	491f      	ldr	r1, [pc, #124]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	610b      	str	r3, [r1, #16]
 80031f6:	e011      	b.n	800321c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003200:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6892      	ldr	r2, [r2, #8]
 8003208:	0211      	lsls	r1, r2, #8
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6952      	ldr	r2, [r2, #20]
 800320e:	0852      	lsrs	r2, r2, #1
 8003210:	3a01      	subs	r2, #1
 8003212:	0652      	lsls	r2, r2, #25
 8003214:	430a      	orrs	r2, r1
 8003216:	4916      	ldr	r1, [pc, #88]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003218:	4313      	orrs	r3, r2
 800321a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800321c:	4b14      	ldr	r3, [pc, #80]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1e4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a13      	ldr	r2, [pc, #76]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003222:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003226:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003228:	f7fe f84e 	bl	80012c8 <HAL_GetTick>
 800322c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800322e:	e009      	b.n	8003244 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003230:	f7fe f84a 	bl	80012c8 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d902      	bls.n	8003244 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	73fb      	strb	r3, [r7, #15]
          break;
 8003242:	e005      	b.n	8003250 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003244:	4b0a      	ldr	r3, [pc, #40]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0ef      	beq.n	8003230 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003256:	4b06      	ldr	r3, [pc, #24]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	4904      	ldr	r1, [pc, #16]	@ (8003270 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003260:	4313      	orrs	r3, r2
 8003262:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003264:	7bfb      	ldrb	r3, [r7, #15]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40021000 	.word	0x40021000

08003274 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003282:	4b6a      	ldr	r3, [pc, #424]	@ (800342c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d018      	beq.n	80032c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800328e:	4b67      	ldr	r3, [pc, #412]	@ (800342c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f003 0203 	and.w	r2, r3, #3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d10d      	bne.n	80032ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
       ||
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d009      	beq.n	80032ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80032a6:	4b61      	ldr	r3, [pc, #388]	@ (800342c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
       ||
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d047      	beq.n	800334a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	73fb      	strb	r3, [r7, #15]
 80032be:	e044      	b.n	800334a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d018      	beq.n	80032fa <RCCEx_PLLSAI2_Config+0x86>
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d825      	bhi.n	8003318 <RCCEx_PLLSAI2_Config+0xa4>
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d002      	beq.n	80032d6 <RCCEx_PLLSAI2_Config+0x62>
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d009      	beq.n	80032e8 <RCCEx_PLLSAI2_Config+0x74>
 80032d4:	e020      	b.n	8003318 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032d6:	4b55      	ldr	r3, [pc, #340]	@ (800342c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d11d      	bne.n	800331e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e6:	e01a      	b.n	800331e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032e8:	4b50      	ldr	r3, [pc, #320]	@ (800342c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d116      	bne.n	8003322 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f8:	e013      	b.n	8003322 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032fa:	4b4c      	ldr	r3, [pc, #304]	@ (800342c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10f      	bne.n	8003326 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003306:	4b49      	ldr	r3, [pc, #292]	@ (800342c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d109      	bne.n	8003326 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003316:	e006      	b.n	8003326 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
      break;
 800331c:	e004      	b.n	8003328 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800331e:	bf00      	nop
 8003320:	e002      	b.n	8003328 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003322:	bf00      	nop
 8003324:	e000      	b.n	8003328 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003326:	bf00      	nop
    }

    if(status == HAL_OK)
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10d      	bne.n	800334a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800332e:	4b3f      	ldr	r3, [pc, #252]	@ (800342c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6819      	ldr	r1, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	3b01      	subs	r3, #1
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	430b      	orrs	r3, r1
 8003344:	4939      	ldr	r1, [pc, #228]	@ (800342c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003346:	4313      	orrs	r3, r2
 8003348:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d167      	bne.n	8003420 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003350:	4b36      	ldr	r3, [pc, #216]	@ (800342c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a35      	ldr	r2, [pc, #212]	@ (800342c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003356:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800335a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800335c:	f7fd ffb4 	bl	80012c8 <HAL_GetTick>
 8003360:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003362:	e009      	b.n	8003378 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003364:	f7fd ffb0 	bl	80012c8 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d902      	bls.n	8003378 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	73fb      	strb	r3, [r7, #15]
        break;
 8003376:	e005      	b.n	8003384 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003378:	4b2c      	ldr	r3, [pc, #176]	@ (800342c <RCCEx_PLLSAI2_Config+0x1b8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1ef      	bne.n	8003364 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d14a      	bne.n	8003420 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d111      	bne.n	80033b4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003390:	4b26      	ldr	r3, [pc, #152]	@ (800342c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003398:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6892      	ldr	r2, [r2, #8]
 80033a0:	0211      	lsls	r1, r2, #8
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68d2      	ldr	r2, [r2, #12]
 80033a6:	0912      	lsrs	r2, r2, #4
 80033a8:	0452      	lsls	r2, r2, #17
 80033aa:	430a      	orrs	r2, r1
 80033ac:	491f      	ldr	r1, [pc, #124]	@ (800342c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	614b      	str	r3, [r1, #20]
 80033b2:	e011      	b.n	80033d8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033b4:	4b1d      	ldr	r3, [pc, #116]	@ (800342c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80033bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6892      	ldr	r2, [r2, #8]
 80033c4:	0211      	lsls	r1, r2, #8
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6912      	ldr	r2, [r2, #16]
 80033ca:	0852      	lsrs	r2, r2, #1
 80033cc:	3a01      	subs	r2, #1
 80033ce:	0652      	lsls	r2, r2, #25
 80033d0:	430a      	orrs	r2, r1
 80033d2:	4916      	ldr	r1, [pc, #88]	@ (800342c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80033d8:	4b14      	ldr	r3, [pc, #80]	@ (800342c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a13      	ldr	r2, [pc, #76]	@ (800342c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e4:	f7fd ff70 	bl	80012c8 <HAL_GetTick>
 80033e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033ea:	e009      	b.n	8003400 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033ec:	f7fd ff6c 	bl	80012c8 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d902      	bls.n	8003400 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	73fb      	strb	r3, [r7, #15]
          break;
 80033fe:	e005      	b.n	800340c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003400:	4b0a      	ldr	r3, [pc, #40]	@ (800342c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0ef      	beq.n	80033ec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003412:	4b06      	ldr	r3, [pc, #24]	@ (800342c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	4904      	ldr	r1, [pc, #16]	@ (800342c <RCCEx_PLLSAI2_Config+0x1b8>)
 800341c:	4313      	orrs	r3, r2
 800341e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003420:	7bfb      	ldrb	r3, [r7, #15]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40021000 	.word	0x40021000

08003430 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e040      	b.n	80034c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003446:	2b00      	cmp	r3, #0
 8003448:	d106      	bne.n	8003458 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7fd fd2e 	bl	8000eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2224      	movs	r2, #36	@ 0x24
 800345c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0201 	bic.w	r2, r2, #1
 800346c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fece 	bl	8004218 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 fc13 	bl	8003ca8 <UART_SetConfig>
 8003482:	4603      	mov	r3, r0
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e01b      	b.n	80034c4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800349a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 ff4d 	bl	800435c <UART_CheckIdleState>
 80034c2:	4603      	mov	r3, r0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08a      	sub	sp, #40	@ 0x28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	4613      	mov	r3, r2
 80034d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	d137      	bne.n	8003554 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <HAL_UART_Receive_IT+0x24>
 80034ea:	88fb      	ldrh	r3, [r7, #6]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e030      	b.n	8003556 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a18      	ldr	r2, [pc, #96]	@ (8003560 <HAL_UART_Receive_IT+0x94>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d01f      	beq.n	8003544 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d018      	beq.n	8003544 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	e853 3f00 	ldrex	r3, [r3]
 800351e:	613b      	str	r3, [r7, #16]
   return(result);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003526:	627b      	str	r3, [r7, #36]	@ 0x24
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	623b      	str	r3, [r7, #32]
 8003532:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003534:	69f9      	ldr	r1, [r7, #28]
 8003536:	6a3a      	ldr	r2, [r7, #32]
 8003538:	e841 2300 	strex	r3, r2, [r1]
 800353c:	61bb      	str	r3, [r7, #24]
   return(result);
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1e6      	bne.n	8003512 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	461a      	mov	r2, r3
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f001 f81c 	bl	8004588 <UART_Start_Receive_IT>
 8003550:	4603      	mov	r3, r0
 8003552:	e000      	b.n	8003556 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003554:	2302      	movs	r3, #2
  }
}
 8003556:	4618      	mov	r0, r3
 8003558:	3728      	adds	r7, #40	@ 0x28
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40008000 	.word	0x40008000

08003564 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	@ 0x28
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	4613      	mov	r3, r2
 8003570:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003576:	2b20      	cmp	r3, #32
 8003578:	d165      	bne.n	8003646 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <HAL_UART_Transmit_DMA+0x22>
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e05e      	b.n	8003648 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	88fa      	ldrh	r2, [r7, #6]
 8003594:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	88fa      	ldrh	r2, [r7, #6]
 800359c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2221      	movs	r2, #33	@ 0x21
 80035ac:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d027      	beq.n	8003606 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ba:	4a25      	ldr	r2, [pc, #148]	@ (8003650 <HAL_UART_Transmit_DMA+0xec>)
 80035bc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c2:	4a24      	ldr	r2, [pc, #144]	@ (8003654 <HAL_UART_Transmit_DMA+0xf0>)
 80035c4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ca:	4a23      	ldr	r2, [pc, #140]	@ (8003658 <HAL_UART_Transmit_DMA+0xf4>)
 80035cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d2:	2200      	movs	r2, #0
 80035d4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035de:	4619      	mov	r1, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3328      	adds	r3, #40	@ 0x28
 80035e6:	461a      	mov	r2, r3
 80035e8:	88fb      	ldrh	r3, [r7, #6]
 80035ea:	f7fe f867 	bl	80016bc <HAL_DMA_Start_IT>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2210      	movs	r2, #16
 80035f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2220      	movs	r2, #32
 8003600:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e020      	b.n	8003648 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2240      	movs	r2, #64	@ 0x40
 800360c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3308      	adds	r3, #8
 8003614:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	e853 3f00 	ldrex	r3, [r3]
 800361c:	613b      	str	r3, [r7, #16]
   return(result);
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003624:	627b      	str	r3, [r7, #36]	@ 0x24
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3308      	adds	r3, #8
 800362c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800362e:	623a      	str	r2, [r7, #32]
 8003630:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003632:	69f9      	ldr	r1, [r7, #28]
 8003634:	6a3a      	ldr	r2, [r7, #32]
 8003636:	e841 2300 	strex	r3, r2, [r1]
 800363a:	61bb      	str	r3, [r7, #24]
   return(result);
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1e5      	bne.n	800360e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	e000      	b.n	8003648 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8003646:	2302      	movs	r3, #2
  }
}
 8003648:	4618      	mov	r0, r3
 800364a:	3728      	adds	r7, #40	@ 0x28
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	08004829 	.word	0x08004829
 8003654:	080048c3 	.word	0x080048c3
 8003658:	080048df 	.word	0x080048df

0800365c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b0ba      	sub	sp, #232	@ 0xe8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003682:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003686:	f640 030f 	movw	r3, #2063	@ 0x80f
 800368a:	4013      	ands	r3, r2
 800368c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003690:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d115      	bne.n	80036c4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00f      	beq.n	80036c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d009      	beq.n	80036c4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 82ca 	beq.w	8003c4e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	4798      	blx	r3
      }
      return;
 80036c2:	e2c4      	b.n	8003c4e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80036c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 8117 	beq.w	80038fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80036ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80036da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80036de:	4b85      	ldr	r3, [pc, #532]	@ (80038f4 <HAL_UART_IRQHandler+0x298>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 810a 	beq.w	80038fc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d011      	beq.n	8003718 <HAL_UART_IRQHandler+0xbc>
 80036f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00b      	beq.n	8003718 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2201      	movs	r2, #1
 8003706:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800370e:	f043 0201 	orr.w	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d011      	beq.n	8003748 <HAL_UART_IRQHandler+0xec>
 8003724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00b      	beq.n	8003748 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2202      	movs	r2, #2
 8003736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800373e:	f043 0204 	orr.w	r2, r3, #4
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d011      	beq.n	8003778 <HAL_UART_IRQHandler+0x11c>
 8003754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00b      	beq.n	8003778 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2204      	movs	r2, #4
 8003766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800376e:	f043 0202 	orr.w	r2, r3, #2
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d017      	beq.n	80037b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b00      	cmp	r3, #0
 800378e:	d105      	bne.n	800379c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003794:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00b      	beq.n	80037b4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2208      	movs	r2, #8
 80037a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037aa:	f043 0208 	orr.w	r2, r3, #8
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80037b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d012      	beq.n	80037e6 <HAL_UART_IRQHandler+0x18a>
 80037c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00c      	beq.n	80037e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037dc:	f043 0220 	orr.w	r2, r3, #32
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 8230 	beq.w	8003c52 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80037f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00d      	beq.n	800381a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003820:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800382e:	2b40      	cmp	r3, #64	@ 0x40
 8003830:	d005      	beq.n	800383e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003836:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800383a:	2b00      	cmp	r3, #0
 800383c:	d04f      	beq.n	80038de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 ff8e 	bl	8004760 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800384e:	2b40      	cmp	r3, #64	@ 0x40
 8003850:	d141      	bne.n	80038d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3308      	adds	r3, #8
 8003858:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003868:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800386c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003870:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3308      	adds	r3, #8
 800387a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800387e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003882:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003886:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800388a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800388e:	e841 2300 	strex	r3, r2, [r1]
 8003892:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003896:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1d9      	bne.n	8003852 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d013      	beq.n	80038ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038aa:	4a13      	ldr	r2, [pc, #76]	@ (80038f8 <HAL_UART_IRQHandler+0x29c>)
 80038ac:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fd ffa0 	bl	80017f8 <HAL_DMA_Abort_IT>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d017      	beq.n	80038ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80038c8:	4610      	mov	r0, r2
 80038ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038cc:	e00f      	b.n	80038ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f9d4 	bl	8003c7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d4:	e00b      	b.n	80038ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f9d0 	bl	8003c7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038dc:	e007      	b.n	80038ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f9cc 	bl	8003c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80038ec:	e1b1      	b.n	8003c52 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ee:	bf00      	nop
    return;
 80038f0:	e1af      	b.n	8003c52 <HAL_UART_IRQHandler+0x5f6>
 80038f2:	bf00      	nop
 80038f4:	04000120 	.word	0x04000120
 80038f8:	0800495d 	.word	0x0800495d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003900:	2b01      	cmp	r3, #1
 8003902:	f040 816a 	bne.w	8003bda <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 8163 	beq.w	8003bda <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003918:	f003 0310 	and.w	r3, r3, #16
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 815c 	beq.w	8003bda <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2210      	movs	r2, #16
 8003928:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003934:	2b40      	cmp	r3, #64	@ 0x40
 8003936:	f040 80d4 	bne.w	8003ae2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003946:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 80ad 	beq.w	8003aaa <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003956:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800395a:	429a      	cmp	r2, r3
 800395c:	f080 80a5 	bcs.w	8003aaa <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003966:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	2b00      	cmp	r3, #0
 8003978:	f040 8086 	bne.w	8003a88 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003984:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003988:	e853 3f00 	ldrex	r3, [r3]
 800398c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003990:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003994:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003998:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	461a      	mov	r2, r3
 80039a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80039a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80039aa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039b6:	e841 2300 	strex	r3, r2, [r1]
 80039ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1da      	bne.n	800397c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3308      	adds	r3, #8
 80039cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039d0:	e853 3f00 	ldrex	r3, [r3]
 80039d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039d8:	f023 0301 	bic.w	r3, r3, #1
 80039dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3308      	adds	r3, #8
 80039e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80039ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80039f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80039f6:	e841 2300 	strex	r3, r2, [r1]
 80039fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80039fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1e1      	bne.n	80039c6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3308      	adds	r3, #8
 8003a08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a0c:	e853 3f00 	ldrex	r3, [r3]
 8003a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3308      	adds	r3, #8
 8003a22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a2e:	e841 2300 	strex	r3, r2, [r1]
 8003a32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e3      	bne.n	8003a02 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a50:	e853 3f00 	ldrex	r3, [r3]
 8003a54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a58:	f023 0310 	bic.w	r3, r3, #16
 8003a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	461a      	mov	r2, r3
 8003a66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a6c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a72:	e841 2300 	strex	r3, r2, [r1]
 8003a76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1e4      	bne.n	8003a48 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fd fe7a 	bl	800177c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f8f4 	bl	8003c90 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003aa8:	e0d5      	b.n	8003c56 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003ab0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	f040 80ce 	bne.w	8003c56 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	f040 80c5 	bne.w	8003c56 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003ad8:	4619      	mov	r1, r3
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f8d8 	bl	8003c90 <HAL_UARTEx_RxEventCallback>
      return;
 8003ae0:	e0b9      	b.n	8003c56 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 80ab 	beq.w	8003c5a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003b04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80a6 	beq.w	8003c5a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b16:	e853 3f00 	ldrex	r3, [r3]
 8003b1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b30:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b38:	e841 2300 	strex	r3, r2, [r1]
 8003b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1e4      	bne.n	8003b0e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3308      	adds	r3, #8
 8003b4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4e:	e853 3f00 	ldrex	r3, [r3]
 8003b52:	623b      	str	r3, [r7, #32]
   return(result);
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	f023 0301 	bic.w	r3, r3, #1
 8003b5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3308      	adds	r3, #8
 8003b64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b68:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b70:	e841 2300 	strex	r3, r2, [r1]
 8003b74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e3      	bne.n	8003b44 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	e853 3f00 	ldrex	r3, [r3]
 8003b9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f023 0310 	bic.w	r3, r3, #16
 8003ba4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	461a      	mov	r2, r3
 8003bae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003bb2:	61fb      	str	r3, [r7, #28]
 8003bb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	69b9      	ldr	r1, [r7, #24]
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	617b      	str	r3, [r7, #20]
   return(result);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e4      	bne.n	8003b90 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2202      	movs	r2, #2
 8003bca:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f85c 	bl	8003c90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bd8:	e03f      	b.n	8003c5a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00e      	beq.n	8003c04 <HAL_UART_IRQHandler+0x5a8>
 8003be6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d008      	beq.n	8003c04 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003bfa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f001 f8a9 	bl	8004d54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c02:	e02d      	b.n	8003c60 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00e      	beq.n	8003c2e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d01c      	beq.n	8003c5e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4798      	blx	r3
    }
    return;
 8003c2c:	e017      	b.n	8003c5e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d012      	beq.n	8003c60 <HAL_UART_IRQHandler+0x604>
 8003c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00c      	beq.n	8003c60 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 fe9e 	bl	8004988 <UART_EndTransmit_IT>
    return;
 8003c4c:	e008      	b.n	8003c60 <HAL_UART_IRQHandler+0x604>
      return;
 8003c4e:	bf00      	nop
 8003c50:	e006      	b.n	8003c60 <HAL_UART_IRQHandler+0x604>
    return;
 8003c52:	bf00      	nop
 8003c54:	e004      	b.n	8003c60 <HAL_UART_IRQHandler+0x604>
      return;
 8003c56:	bf00      	nop
 8003c58:	e002      	b.n	8003c60 <HAL_UART_IRQHandler+0x604>
      return;
 8003c5a:	bf00      	nop
 8003c5c:	e000      	b.n	8003c60 <HAL_UART_IRQHandler+0x604>
    return;
 8003c5e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003c60:	37e8      	adds	r7, #232	@ 0xe8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop

08003c68 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cac:	b08a      	sub	sp, #40	@ 0x28
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	4ba4      	ldr	r3, [pc, #656]	@ (8003f68 <UART_SetConfig+0x2c0>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	6812      	ldr	r2, [r2, #0]
 8003cde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a99      	ldr	r2, [pc, #612]	@ (8003f6c <UART_SetConfig+0x2c4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d004      	beq.n	8003d14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d10:	4313      	orrs	r3, r2
 8003d12:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d24:	430a      	orrs	r2, r1
 8003d26:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a90      	ldr	r2, [pc, #576]	@ (8003f70 <UART_SetConfig+0x2c8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d126      	bne.n	8003d80 <UART_SetConfig+0xd8>
 8003d32:	4b90      	ldr	r3, [pc, #576]	@ (8003f74 <UART_SetConfig+0x2cc>)
 8003d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d38:	f003 0303 	and.w	r3, r3, #3
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d81b      	bhi.n	8003d78 <UART_SetConfig+0xd0>
 8003d40:	a201      	add	r2, pc, #4	@ (adr r2, 8003d48 <UART_SetConfig+0xa0>)
 8003d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d46:	bf00      	nop
 8003d48:	08003d59 	.word	0x08003d59
 8003d4c:	08003d69 	.word	0x08003d69
 8003d50:	08003d61 	.word	0x08003d61
 8003d54:	08003d71 	.word	0x08003d71
 8003d58:	2301      	movs	r3, #1
 8003d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d5e:	e116      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003d60:	2302      	movs	r3, #2
 8003d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d66:	e112      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003d68:	2304      	movs	r3, #4
 8003d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d6e:	e10e      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003d70:	2308      	movs	r3, #8
 8003d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d76:	e10a      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003d78:	2310      	movs	r3, #16
 8003d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d7e:	e106      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a7c      	ldr	r2, [pc, #496]	@ (8003f78 <UART_SetConfig+0x2d0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d138      	bne.n	8003dfc <UART_SetConfig+0x154>
 8003d8a:	4b7a      	ldr	r3, [pc, #488]	@ (8003f74 <UART_SetConfig+0x2cc>)
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d90:	f003 030c 	and.w	r3, r3, #12
 8003d94:	2b0c      	cmp	r3, #12
 8003d96:	d82d      	bhi.n	8003df4 <UART_SetConfig+0x14c>
 8003d98:	a201      	add	r2, pc, #4	@ (adr r2, 8003da0 <UART_SetConfig+0xf8>)
 8003d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9e:	bf00      	nop
 8003da0:	08003dd5 	.word	0x08003dd5
 8003da4:	08003df5 	.word	0x08003df5
 8003da8:	08003df5 	.word	0x08003df5
 8003dac:	08003df5 	.word	0x08003df5
 8003db0:	08003de5 	.word	0x08003de5
 8003db4:	08003df5 	.word	0x08003df5
 8003db8:	08003df5 	.word	0x08003df5
 8003dbc:	08003df5 	.word	0x08003df5
 8003dc0:	08003ddd 	.word	0x08003ddd
 8003dc4:	08003df5 	.word	0x08003df5
 8003dc8:	08003df5 	.word	0x08003df5
 8003dcc:	08003df5 	.word	0x08003df5
 8003dd0:	08003ded 	.word	0x08003ded
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dda:	e0d8      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003de2:	e0d4      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003de4:	2304      	movs	r3, #4
 8003de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dea:	e0d0      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003dec:	2308      	movs	r3, #8
 8003dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003df2:	e0cc      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003df4:	2310      	movs	r3, #16
 8003df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dfa:	e0c8      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a5e      	ldr	r2, [pc, #376]	@ (8003f7c <UART_SetConfig+0x2d4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d125      	bne.n	8003e52 <UART_SetConfig+0x1aa>
 8003e06:	4b5b      	ldr	r3, [pc, #364]	@ (8003f74 <UART_SetConfig+0x2cc>)
 8003e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e10:	2b30      	cmp	r3, #48	@ 0x30
 8003e12:	d016      	beq.n	8003e42 <UART_SetConfig+0x19a>
 8003e14:	2b30      	cmp	r3, #48	@ 0x30
 8003e16:	d818      	bhi.n	8003e4a <UART_SetConfig+0x1a2>
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	d00a      	beq.n	8003e32 <UART_SetConfig+0x18a>
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d814      	bhi.n	8003e4a <UART_SetConfig+0x1a2>
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <UART_SetConfig+0x182>
 8003e24:	2b10      	cmp	r3, #16
 8003e26:	d008      	beq.n	8003e3a <UART_SetConfig+0x192>
 8003e28:	e00f      	b.n	8003e4a <UART_SetConfig+0x1a2>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e30:	e0ad      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003e32:	2302      	movs	r3, #2
 8003e34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e38:	e0a9      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003e3a:	2304      	movs	r3, #4
 8003e3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e40:	e0a5      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003e42:	2308      	movs	r3, #8
 8003e44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e48:	e0a1      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003e4a:	2310      	movs	r3, #16
 8003e4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e50:	e09d      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a4a      	ldr	r2, [pc, #296]	@ (8003f80 <UART_SetConfig+0x2d8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d125      	bne.n	8003ea8 <UART_SetConfig+0x200>
 8003e5c:	4b45      	ldr	r3, [pc, #276]	@ (8003f74 <UART_SetConfig+0x2cc>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e62:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003e66:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e68:	d016      	beq.n	8003e98 <UART_SetConfig+0x1f0>
 8003e6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e6c:	d818      	bhi.n	8003ea0 <UART_SetConfig+0x1f8>
 8003e6e:	2b80      	cmp	r3, #128	@ 0x80
 8003e70:	d00a      	beq.n	8003e88 <UART_SetConfig+0x1e0>
 8003e72:	2b80      	cmp	r3, #128	@ 0x80
 8003e74:	d814      	bhi.n	8003ea0 <UART_SetConfig+0x1f8>
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <UART_SetConfig+0x1d8>
 8003e7a:	2b40      	cmp	r3, #64	@ 0x40
 8003e7c:	d008      	beq.n	8003e90 <UART_SetConfig+0x1e8>
 8003e7e:	e00f      	b.n	8003ea0 <UART_SetConfig+0x1f8>
 8003e80:	2300      	movs	r3, #0
 8003e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e86:	e082      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e8e:	e07e      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003e90:	2304      	movs	r3, #4
 8003e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e96:	e07a      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003e98:	2308      	movs	r3, #8
 8003e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e9e:	e076      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003ea0:	2310      	movs	r3, #16
 8003ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ea6:	e072      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a35      	ldr	r2, [pc, #212]	@ (8003f84 <UART_SetConfig+0x2dc>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d12a      	bne.n	8003f08 <UART_SetConfig+0x260>
 8003eb2:	4b30      	ldr	r3, [pc, #192]	@ (8003f74 <UART_SetConfig+0x2cc>)
 8003eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ebc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ec0:	d01a      	beq.n	8003ef8 <UART_SetConfig+0x250>
 8003ec2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ec6:	d81b      	bhi.n	8003f00 <UART_SetConfig+0x258>
 8003ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ecc:	d00c      	beq.n	8003ee8 <UART_SetConfig+0x240>
 8003ece:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ed2:	d815      	bhi.n	8003f00 <UART_SetConfig+0x258>
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <UART_SetConfig+0x238>
 8003ed8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003edc:	d008      	beq.n	8003ef0 <UART_SetConfig+0x248>
 8003ede:	e00f      	b.n	8003f00 <UART_SetConfig+0x258>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ee6:	e052      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eee:	e04e      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003ef0:	2304      	movs	r3, #4
 8003ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ef6:	e04a      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003ef8:	2308      	movs	r3, #8
 8003efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003efe:	e046      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003f00:	2310      	movs	r3, #16
 8003f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f06:	e042      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a17      	ldr	r2, [pc, #92]	@ (8003f6c <UART_SetConfig+0x2c4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d13a      	bne.n	8003f88 <UART_SetConfig+0x2e0>
 8003f12:	4b18      	ldr	r3, [pc, #96]	@ (8003f74 <UART_SetConfig+0x2cc>)
 8003f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003f1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f20:	d01a      	beq.n	8003f58 <UART_SetConfig+0x2b0>
 8003f22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f26:	d81b      	bhi.n	8003f60 <UART_SetConfig+0x2b8>
 8003f28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f2c:	d00c      	beq.n	8003f48 <UART_SetConfig+0x2a0>
 8003f2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f32:	d815      	bhi.n	8003f60 <UART_SetConfig+0x2b8>
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <UART_SetConfig+0x298>
 8003f38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f3c:	d008      	beq.n	8003f50 <UART_SetConfig+0x2a8>
 8003f3e:	e00f      	b.n	8003f60 <UART_SetConfig+0x2b8>
 8003f40:	2300      	movs	r3, #0
 8003f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f46:	e022      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f4e:	e01e      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003f50:	2304      	movs	r3, #4
 8003f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f56:	e01a      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003f58:	2308      	movs	r3, #8
 8003f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f5e:	e016      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003f60:	2310      	movs	r3, #16
 8003f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f66:	e012      	b.n	8003f8e <UART_SetConfig+0x2e6>
 8003f68:	efff69f3 	.word	0xefff69f3
 8003f6c:	40008000 	.word	0x40008000
 8003f70:	40013800 	.word	0x40013800
 8003f74:	40021000 	.word	0x40021000
 8003f78:	40004400 	.word	0x40004400
 8003f7c:	40004800 	.word	0x40004800
 8003f80:	40004c00 	.word	0x40004c00
 8003f84:	40005000 	.word	0x40005000
 8003f88:	2310      	movs	r3, #16
 8003f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a9f      	ldr	r2, [pc, #636]	@ (8004210 <UART_SetConfig+0x568>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d17a      	bne.n	800408e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d824      	bhi.n	8003fea <UART_SetConfig+0x342>
 8003fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8003fa8 <UART_SetConfig+0x300>)
 8003fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa6:	bf00      	nop
 8003fa8:	08003fcd 	.word	0x08003fcd
 8003fac:	08003feb 	.word	0x08003feb
 8003fb0:	08003fd5 	.word	0x08003fd5
 8003fb4:	08003feb 	.word	0x08003feb
 8003fb8:	08003fdb 	.word	0x08003fdb
 8003fbc:	08003feb 	.word	0x08003feb
 8003fc0:	08003feb 	.word	0x08003feb
 8003fc4:	08003feb 	.word	0x08003feb
 8003fc8:	08003fe3 	.word	0x08003fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fcc:	f7fe fce8 	bl	80029a0 <HAL_RCC_GetPCLK1Freq>
 8003fd0:	61f8      	str	r0, [r7, #28]
        break;
 8003fd2:	e010      	b.n	8003ff6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fd4:	4b8f      	ldr	r3, [pc, #572]	@ (8004214 <UART_SetConfig+0x56c>)
 8003fd6:	61fb      	str	r3, [r7, #28]
        break;
 8003fd8:	e00d      	b.n	8003ff6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fda:	f7fe fc49 	bl	8002870 <HAL_RCC_GetSysClockFreq>
 8003fde:	61f8      	str	r0, [r7, #28]
        break;
 8003fe0:	e009      	b.n	8003ff6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fe2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fe6:	61fb      	str	r3, [r7, #28]
        break;
 8003fe8:	e005      	b.n	8003ff6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ff4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 80fb 	beq.w	80041f4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	4413      	add	r3, r2
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	429a      	cmp	r2, r3
 800400c:	d305      	bcc.n	800401a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004014:	69fa      	ldr	r2, [r7, #28]
 8004016:	429a      	cmp	r2, r3
 8004018:	d903      	bls.n	8004022 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004020:	e0e8      	b.n	80041f4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	2200      	movs	r2, #0
 8004026:	461c      	mov	r4, r3
 8004028:	4615      	mov	r5, r2
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	022b      	lsls	r3, r5, #8
 8004034:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004038:	0222      	lsls	r2, r4, #8
 800403a:	68f9      	ldr	r1, [r7, #12]
 800403c:	6849      	ldr	r1, [r1, #4]
 800403e:	0849      	lsrs	r1, r1, #1
 8004040:	2000      	movs	r0, #0
 8004042:	4688      	mov	r8, r1
 8004044:	4681      	mov	r9, r0
 8004046:	eb12 0a08 	adds.w	sl, r2, r8
 800404a:	eb43 0b09 	adc.w	fp, r3, r9
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	603b      	str	r3, [r7, #0]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800405c:	4650      	mov	r0, sl
 800405e:	4659      	mov	r1, fp
 8004060:	f7fc f90e 	bl	8000280 <__aeabi_uldivmod>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4613      	mov	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004072:	d308      	bcc.n	8004086 <UART_SetConfig+0x3de>
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800407a:	d204      	bcs.n	8004086 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	60da      	str	r2, [r3, #12]
 8004084:	e0b6      	b.n	80041f4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800408c:	e0b2      	b.n	80041f4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004096:	d15e      	bne.n	8004156 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004098:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800409c:	2b08      	cmp	r3, #8
 800409e:	d828      	bhi.n	80040f2 <UART_SetConfig+0x44a>
 80040a0:	a201      	add	r2, pc, #4	@ (adr r2, 80040a8 <UART_SetConfig+0x400>)
 80040a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a6:	bf00      	nop
 80040a8:	080040cd 	.word	0x080040cd
 80040ac:	080040d5 	.word	0x080040d5
 80040b0:	080040dd 	.word	0x080040dd
 80040b4:	080040f3 	.word	0x080040f3
 80040b8:	080040e3 	.word	0x080040e3
 80040bc:	080040f3 	.word	0x080040f3
 80040c0:	080040f3 	.word	0x080040f3
 80040c4:	080040f3 	.word	0x080040f3
 80040c8:	080040eb 	.word	0x080040eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040cc:	f7fe fc68 	bl	80029a0 <HAL_RCC_GetPCLK1Freq>
 80040d0:	61f8      	str	r0, [r7, #28]
        break;
 80040d2:	e014      	b.n	80040fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040d4:	f7fe fc7a 	bl	80029cc <HAL_RCC_GetPCLK2Freq>
 80040d8:	61f8      	str	r0, [r7, #28]
        break;
 80040da:	e010      	b.n	80040fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040dc:	4b4d      	ldr	r3, [pc, #308]	@ (8004214 <UART_SetConfig+0x56c>)
 80040de:	61fb      	str	r3, [r7, #28]
        break;
 80040e0:	e00d      	b.n	80040fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040e2:	f7fe fbc5 	bl	8002870 <HAL_RCC_GetSysClockFreq>
 80040e6:	61f8      	str	r0, [r7, #28]
        break;
 80040e8:	e009      	b.n	80040fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040ee:	61fb      	str	r3, [r7, #28]
        break;
 80040f0:	e005      	b.n	80040fe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80040fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d077      	beq.n	80041f4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	005a      	lsls	r2, r3, #1
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	085b      	lsrs	r3, r3, #1
 800410e:	441a      	add	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	fbb2 f3f3 	udiv	r3, r2, r3
 8004118:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	2b0f      	cmp	r3, #15
 800411e:	d916      	bls.n	800414e <UART_SetConfig+0x4a6>
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004126:	d212      	bcs.n	800414e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	b29b      	uxth	r3, r3
 800412c:	f023 030f 	bic.w	r3, r3, #15
 8004130:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	085b      	lsrs	r3, r3, #1
 8004136:	b29b      	uxth	r3, r3
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	b29a      	uxth	r2, r3
 800413e:	8afb      	ldrh	r3, [r7, #22]
 8004140:	4313      	orrs	r3, r2
 8004142:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	8afa      	ldrh	r2, [r7, #22]
 800414a:	60da      	str	r2, [r3, #12]
 800414c:	e052      	b.n	80041f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004154:	e04e      	b.n	80041f4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004156:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800415a:	2b08      	cmp	r3, #8
 800415c:	d827      	bhi.n	80041ae <UART_SetConfig+0x506>
 800415e:	a201      	add	r2, pc, #4	@ (adr r2, 8004164 <UART_SetConfig+0x4bc>)
 8004160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004164:	08004189 	.word	0x08004189
 8004168:	08004191 	.word	0x08004191
 800416c:	08004199 	.word	0x08004199
 8004170:	080041af 	.word	0x080041af
 8004174:	0800419f 	.word	0x0800419f
 8004178:	080041af 	.word	0x080041af
 800417c:	080041af 	.word	0x080041af
 8004180:	080041af 	.word	0x080041af
 8004184:	080041a7 	.word	0x080041a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004188:	f7fe fc0a 	bl	80029a0 <HAL_RCC_GetPCLK1Freq>
 800418c:	61f8      	str	r0, [r7, #28]
        break;
 800418e:	e014      	b.n	80041ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004190:	f7fe fc1c 	bl	80029cc <HAL_RCC_GetPCLK2Freq>
 8004194:	61f8      	str	r0, [r7, #28]
        break;
 8004196:	e010      	b.n	80041ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004198:	4b1e      	ldr	r3, [pc, #120]	@ (8004214 <UART_SetConfig+0x56c>)
 800419a:	61fb      	str	r3, [r7, #28]
        break;
 800419c:	e00d      	b.n	80041ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800419e:	f7fe fb67 	bl	8002870 <HAL_RCC_GetSysClockFreq>
 80041a2:	61f8      	str	r0, [r7, #28]
        break;
 80041a4:	e009      	b.n	80041ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041aa:	61fb      	str	r3, [r7, #28]
        break;
 80041ac:	e005      	b.n	80041ba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80041b8:	bf00      	nop
    }

    if (pclk != 0U)
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d019      	beq.n	80041f4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	085a      	lsrs	r2, r3, #1
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	441a      	add	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	2b0f      	cmp	r3, #15
 80041d8:	d909      	bls.n	80041ee <UART_SetConfig+0x546>
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041e0:	d205      	bcs.n	80041ee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	60da      	str	r2, [r3, #12]
 80041ec:	e002      	b.n	80041f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004200:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004204:	4618      	mov	r0, r3
 8004206:	3728      	adds	r7, #40	@ 0x28
 8004208:	46bd      	mov	sp, r7
 800420a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800420e:	bf00      	nop
 8004210:	40008000 	.word	0x40008000
 8004214:	00f42400 	.word	0x00f42400

08004218 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	f003 0310 	and.w	r3, r3, #16
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d01a      	beq.n	800432e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004316:	d10a      	bne.n	800432e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	605a      	str	r2, [r3, #4]
  }
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b098      	sub	sp, #96	@ 0x60
 8004360:	af02      	add	r7, sp, #8
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800436c:	f7fc ffac 	bl	80012c8 <HAL_GetTick>
 8004370:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b08      	cmp	r3, #8
 800437e:	d12e      	bne.n	80043de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004380:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004388:	2200      	movs	r2, #0
 800438a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f88c 	bl	80044ac <UART_WaitOnFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d021      	beq.n	80043de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80043ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043c0:	e841 2300 	strex	r3, r2, [r1]
 80043c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e6      	bne.n	800439a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e062      	b.n	80044a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d149      	bne.n	8004480 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043f4:	2200      	movs	r2, #0
 80043f6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f856 	bl	80044ac <UART_WaitOnFlagUntilTimeout>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d03c      	beq.n	8004480 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440e:	e853 3f00 	ldrex	r3, [r3]
 8004412:	623b      	str	r3, [r7, #32]
   return(result);
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800441a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	461a      	mov	r2, r3
 8004422:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004424:	633b      	str	r3, [r7, #48]	@ 0x30
 8004426:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004428:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800442a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800442c:	e841 2300 	strex	r3, r2, [r1]
 8004430:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1e6      	bne.n	8004406 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3308      	adds	r3, #8
 800443e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	e853 3f00 	ldrex	r3, [r3]
 8004446:	60fb      	str	r3, [r7, #12]
   return(result);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0301 	bic.w	r3, r3, #1
 800444e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3308      	adds	r3, #8
 8004456:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004458:	61fa      	str	r2, [r7, #28]
 800445a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445c:	69b9      	ldr	r1, [r7, #24]
 800445e:	69fa      	ldr	r2, [r7, #28]
 8004460:	e841 2300 	strex	r3, r2, [r1]
 8004464:	617b      	str	r3, [r7, #20]
   return(result);
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1e5      	bne.n	8004438 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2220      	movs	r2, #32
 8004470:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e011      	b.n	80044a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2220      	movs	r2, #32
 8004484:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2220      	movs	r2, #32
 800448a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3758      	adds	r7, #88	@ 0x58
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	4613      	mov	r3, r2
 80044ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044bc:	e04f      	b.n	800455e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c4:	d04b      	beq.n	800455e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c6:	f7fc feff 	bl	80012c8 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d302      	bcc.n	80044dc <UART_WaitOnFlagUntilTimeout+0x30>
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e04e      	b.n	800457e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d037      	beq.n	800455e <UART_WaitOnFlagUntilTimeout+0xb2>
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b80      	cmp	r3, #128	@ 0x80
 80044f2:	d034      	beq.n	800455e <UART_WaitOnFlagUntilTimeout+0xb2>
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b40      	cmp	r3, #64	@ 0x40
 80044f8:	d031      	beq.n	800455e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b08      	cmp	r3, #8
 8004506:	d110      	bne.n	800452a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2208      	movs	r2, #8
 800450e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 f925 	bl	8004760 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2208      	movs	r2, #8
 800451a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e029      	b.n	800457e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004534:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004538:	d111      	bne.n	800455e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004542:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 f90b 	bl	8004760 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2220      	movs	r2, #32
 800454e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e00f      	b.n	800457e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69da      	ldr	r2, [r3, #28]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	4013      	ands	r3, r2
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	429a      	cmp	r2, r3
 800456c:	bf0c      	ite	eq
 800456e:	2301      	moveq	r3, #1
 8004570:	2300      	movne	r3, #0
 8004572:	b2db      	uxtb	r3, r3
 8004574:	461a      	mov	r2, r3
 8004576:	79fb      	ldrb	r3, [r7, #7]
 8004578:	429a      	cmp	r2, r3
 800457a:	d0a0      	beq.n	80044be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004588:	b480      	push	{r7}
 800458a:	b097      	sub	sp, #92	@ 0x5c
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	4613      	mov	r3, r2
 8004594:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	88fa      	ldrh	r2, [r7, #6]
 80045a0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	88fa      	ldrh	r2, [r7, #6]
 80045a8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ba:	d10e      	bne.n	80045da <UART_Start_Receive_IT+0x52>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d105      	bne.n	80045d0 <UART_Start_Receive_IT+0x48>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80045ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80045ce:	e02d      	b.n	800462c <UART_Start_Receive_IT+0xa4>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	22ff      	movs	r2, #255	@ 0xff
 80045d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80045d8:	e028      	b.n	800462c <UART_Start_Receive_IT+0xa4>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10d      	bne.n	80045fe <UART_Start_Receive_IT+0x76>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d104      	bne.n	80045f4 <UART_Start_Receive_IT+0x6c>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	22ff      	movs	r2, #255	@ 0xff
 80045ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80045f2:	e01b      	b.n	800462c <UART_Start_Receive_IT+0xa4>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	227f      	movs	r2, #127	@ 0x7f
 80045f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80045fc:	e016      	b.n	800462c <UART_Start_Receive_IT+0xa4>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004606:	d10d      	bne.n	8004624 <UART_Start_Receive_IT+0x9c>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d104      	bne.n	800461a <UART_Start_Receive_IT+0x92>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	227f      	movs	r2, #127	@ 0x7f
 8004614:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004618:	e008      	b.n	800462c <UART_Start_Receive_IT+0xa4>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	223f      	movs	r2, #63	@ 0x3f
 800461e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004622:	e003      	b.n	800462c <UART_Start_Receive_IT+0xa4>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2222      	movs	r2, #34	@ 0x22
 8004638:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3308      	adds	r3, #8
 8004642:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004646:	e853 3f00 	ldrex	r3, [r3]
 800464a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800464c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464e:	f043 0301 	orr.w	r3, r3, #1
 8004652:	657b      	str	r3, [r7, #84]	@ 0x54
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3308      	adds	r3, #8
 800465a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800465c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800465e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004660:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004662:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004664:	e841 2300 	strex	r3, r2, [r1]
 8004668:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800466a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1e5      	bne.n	800463c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004678:	d107      	bne.n	800468a <UART_Start_Receive_IT+0x102>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d103      	bne.n	800468a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4a21      	ldr	r2, [pc, #132]	@ (800470c <UART_Start_Receive_IT+0x184>)
 8004686:	669a      	str	r2, [r3, #104]	@ 0x68
 8004688:	e002      	b.n	8004690 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4a20      	ldr	r2, [pc, #128]	@ (8004710 <UART_Start_Receive_IT+0x188>)
 800468e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d019      	beq.n	80046cc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a0:	e853 3f00 	ldrex	r3, [r3]
 80046a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80046ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80046b8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80046bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046be:	e841 2300 	strex	r3, r2, [r1]
 80046c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80046c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e6      	bne.n	8004698 <UART_Start_Receive_IT+0x110>
 80046ca:	e018      	b.n	80046fe <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	613b      	str	r3, [r7, #16]
   return(result);
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f043 0320 	orr.w	r3, r3, #32
 80046e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	461a      	mov	r2, r3
 80046e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046ea:	623b      	str	r3, [r7, #32]
 80046ec:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ee:	69f9      	ldr	r1, [r7, #28]
 80046f0:	6a3a      	ldr	r2, [r7, #32]
 80046f2:	e841 2300 	strex	r3, r2, [r1]
 80046f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1e6      	bne.n	80046cc <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	375c      	adds	r7, #92	@ 0x5c
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	08004b99 	.word	0x08004b99
 8004710:	080049dd 	.word	0x080049dd

08004714 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004714:	b480      	push	{r7}
 8004716:	b089      	sub	sp, #36	@ 0x24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	e853 3f00 	ldrex	r3, [r3]
 8004728:	60bb      	str	r3, [r7, #8]
   return(result);
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004730:	61fb      	str	r3, [r7, #28]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	61bb      	str	r3, [r7, #24]
 800473c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473e:	6979      	ldr	r1, [r7, #20]
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	e841 2300 	strex	r3, r2, [r1]
 8004746:	613b      	str	r3, [r7, #16]
   return(result);
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1e6      	bne.n	800471c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2220      	movs	r2, #32
 8004752:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004754:	bf00      	nop
 8004756:	3724      	adds	r7, #36	@ 0x24
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004760:	b480      	push	{r7}
 8004762:	b095      	sub	sp, #84	@ 0x54
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004770:	e853 3f00 	ldrex	r3, [r3]
 8004774:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004778:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800477c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	461a      	mov	r2, r3
 8004784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004786:	643b      	str	r3, [r7, #64]	@ 0x40
 8004788:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800478c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800478e:	e841 2300 	strex	r3, r2, [r1]
 8004792:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1e6      	bne.n	8004768 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3308      	adds	r3, #8
 80047a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	e853 3f00 	ldrex	r3, [r3]
 80047a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	f023 0301 	bic.w	r3, r3, #1
 80047b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3308      	adds	r3, #8
 80047b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047c2:	e841 2300 	strex	r3, r2, [r1]
 80047c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1e5      	bne.n	800479a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d118      	bne.n	8004808 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	e853 3f00 	ldrex	r3, [r3]
 80047e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f023 0310 	bic.w	r3, r3, #16
 80047ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047f4:	61bb      	str	r3, [r7, #24]
 80047f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f8:	6979      	ldr	r1, [r7, #20]
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	e841 2300 	strex	r3, r2, [r1]
 8004800:	613b      	str	r3, [r7, #16]
   return(result);
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e6      	bne.n	80047d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2220      	movs	r2, #32
 800480c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800481c:	bf00      	nop
 800481e:	3754      	adds	r7, #84	@ 0x54
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b090      	sub	sp, #64	@ 0x40
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004834:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0320 	and.w	r3, r3, #32
 8004840:	2b00      	cmp	r3, #0
 8004842:	d137      	bne.n	80048b4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8004844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004846:	2200      	movs	r2, #0
 8004848:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800484c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3308      	adds	r3, #8
 8004852:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004856:	e853 3f00 	ldrex	r3, [r3]
 800485a:	623b      	str	r3, [r7, #32]
   return(result);
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004862:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3308      	adds	r3, #8
 800486a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800486c:	633a      	str	r2, [r7, #48]	@ 0x30
 800486e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004870:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004872:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004874:	e841 2300 	strex	r3, r2, [r1]
 8004878:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800487a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1e5      	bne.n	800484c <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	e853 3f00 	ldrex	r3, [r3]
 800488c:	60fb      	str	r3, [r7, #12]
   return(result);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004894:	637b      	str	r3, [r7, #52]	@ 0x34
 8004896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800489e:	61fb      	str	r3, [r7, #28]
 80048a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a2:	69b9      	ldr	r1, [r7, #24]
 80048a4:	69fa      	ldr	r2, [r7, #28]
 80048a6:	e841 2300 	strex	r3, r2, [r1]
 80048aa:	617b      	str	r3, [r7, #20]
   return(result);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1e6      	bne.n	8004880 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048b2:	e002      	b.n	80048ba <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80048b4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80048b6:	f7fc f999 	bl	8000bec <HAL_UART_TxCpltCallback>
}
 80048ba:	bf00      	nop
 80048bc:	3740      	adds	r7, #64	@ 0x40
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b084      	sub	sp, #16
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f7ff f9c9 	bl	8003c68 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048d6:	bf00      	nop
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b086      	sub	sp, #24
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048f0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048f8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004904:	2b80      	cmp	r3, #128	@ 0x80
 8004906:	d109      	bne.n	800491c <UART_DMAError+0x3e>
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	2b21      	cmp	r3, #33	@ 0x21
 800490c:	d106      	bne.n	800491c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2200      	movs	r2, #0
 8004912:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8004916:	6978      	ldr	r0, [r7, #20]
 8004918:	f7ff fefc 	bl	8004714 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004926:	2b40      	cmp	r3, #64	@ 0x40
 8004928:	d109      	bne.n	800493e <UART_DMAError+0x60>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2b22      	cmp	r3, #34	@ 0x22
 800492e:	d106      	bne.n	800493e <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	2200      	movs	r2, #0
 8004934:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004938:	6978      	ldr	r0, [r7, #20]
 800493a:	f7ff ff11 	bl	8004760 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004944:	f043 0210 	orr.w	r2, r3, #16
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800494e:	6978      	ldr	r0, [r7, #20]
 8004950:	f7ff f994 	bl	8003c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004954:	bf00      	nop
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004968:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f7ff f97e 	bl	8003c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004980:	bf00      	nop
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b088      	sub	sp, #32
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	60bb      	str	r3, [r7, #8]
   return(result);
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049a4:	61fb      	str	r3, [r7, #28]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	461a      	mov	r2, r3
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	61bb      	str	r3, [r7, #24]
 80049b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b2:	6979      	ldr	r1, [r7, #20]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	e841 2300 	strex	r3, r2, [r1]
 80049ba:	613b      	str	r3, [r7, #16]
   return(result);
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1e6      	bne.n	8004990 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2220      	movs	r2, #32
 80049c6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7fc f90c 	bl	8000bec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049d4:	bf00      	nop
 80049d6:	3720      	adds	r7, #32
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b09c      	sub	sp, #112	@ 0x70
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80049ea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049f4:	2b22      	cmp	r3, #34	@ 0x22
 80049f6:	f040 80be 	bne.w	8004b76 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004a00:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004a04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004a08:	b2d9      	uxtb	r1, r3
 8004a0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a14:	400a      	ands	r2, r1
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1e:	1c5a      	adds	r2, r3, #1
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f040 80a3 	bne.w	8004b8a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e6      	bne.n	8004a44 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3308      	adds	r3, #8
 8004a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a88:	f023 0301 	bic.w	r3, r3, #1
 8004a8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3308      	adds	r3, #8
 8004a94:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004a96:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a9e:	e841 2300 	strex	r3, r2, [r1]
 8004aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1e5      	bne.n	8004a76 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a34      	ldr	r2, [pc, #208]	@ (8004b94 <UART_RxISR_8BIT+0x1b8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d01f      	beq.n	8004b08 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d018      	beq.n	8004b08 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ade:	e853 3f00 	ldrex	r3, [r3]
 8004ae2:	623b      	str	r3, [r7, #32]
   return(result);
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004aea:	663b      	str	r3, [r7, #96]	@ 0x60
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	461a      	mov	r2, r3
 8004af2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004af4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004af6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004afa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004afc:	e841 2300 	strex	r3, r2, [r1]
 8004b00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1e6      	bne.n	8004ad6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d12e      	bne.n	8004b6e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0310 	bic.w	r3, r3, #16
 8004b2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	461a      	mov	r2, r3
 8004b32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b38:	69b9      	ldr	r1, [r7, #24]
 8004b3a:	69fa      	ldr	r2, [r7, #28]
 8004b3c:	e841 2300 	strex	r3, r2, [r1]
 8004b40:	617b      	str	r3, [r7, #20]
   return(result);
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e6      	bne.n	8004b16 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f003 0310 	and.w	r3, r3, #16
 8004b52:	2b10      	cmp	r3, #16
 8004b54:	d103      	bne.n	8004b5e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2210      	movs	r2, #16
 8004b5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b64:	4619      	mov	r1, r3
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff f892 	bl	8003c90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b6c:	e00d      	b.n	8004b8a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fc f852 	bl	8000c18 <HAL_UART_RxCpltCallback>
}
 8004b74:	e009      	b.n	8004b8a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	8b1b      	ldrh	r3, [r3, #24]
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0208 	orr.w	r2, r2, #8
 8004b86:	b292      	uxth	r2, r2
 8004b88:	831a      	strh	r2, [r3, #24]
}
 8004b8a:	bf00      	nop
 8004b8c:	3770      	adds	r7, #112	@ 0x70
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	40008000 	.word	0x40008000

08004b98 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b09c      	sub	sp, #112	@ 0x70
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ba6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bb0:	2b22      	cmp	r3, #34	@ 0x22
 8004bb2:	f040 80be 	bne.w	8004d32 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004bbc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004bc6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004bca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004bce:	4013      	ands	r3, r2
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bd4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bda:	1c9a      	adds	r2, r3, #2
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f040 80a3 	bne.w	8004d46 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c08:	e853 3f00 	ldrex	r3, [r3]
 8004c0c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004c0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c14:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c20:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c22:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004c24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004c26:	e841 2300 	strex	r3, r2, [r1]
 8004c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1e6      	bne.n	8004c00 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3308      	adds	r3, #8
 8004c38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c3c:	e853 3f00 	ldrex	r3, [r3]
 8004c40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c44:	f023 0301 	bic.w	r3, r3, #1
 8004c48:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3308      	adds	r3, #8
 8004c50:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004c52:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c5a:	e841 2300 	strex	r3, r2, [r1]
 8004c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1e5      	bne.n	8004c32 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a34      	ldr	r2, [pc, #208]	@ (8004d50 <UART_RxISR_16BIT+0x1b8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d01f      	beq.n	8004cc4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d018      	beq.n	8004cc4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	e853 3f00 	ldrex	r3, [r3]
 8004c9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ca6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	461a      	mov	r2, r3
 8004cae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cb2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cb8:	e841 2300 	strex	r3, r2, [r1]
 8004cbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1e6      	bne.n	8004c92 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d12e      	bne.n	8004d2a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	e853 3f00 	ldrex	r3, [r3]
 8004cde:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f023 0310 	bic.w	r3, r3, #16
 8004ce6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	461a      	mov	r2, r3
 8004cee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf4:	6979      	ldr	r1, [r7, #20]
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	e841 2300 	strex	r3, r2, [r1]
 8004cfc:	613b      	str	r3, [r7, #16]
   return(result);
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1e6      	bne.n	8004cd2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	2b10      	cmp	r3, #16
 8004d10:	d103      	bne.n	8004d1a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2210      	movs	r2, #16
 8004d18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d20:	4619      	mov	r1, r3
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7fe ffb4 	bl	8003c90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d28:	e00d      	b.n	8004d46 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fb ff74 	bl	8000c18 <HAL_UART_RxCpltCallback>
}
 8004d30:	e009      	b.n	8004d46 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	8b1b      	ldrh	r3, [r3, #24]
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0208 	orr.w	r2, r2, #8
 8004d42:	b292      	uxth	r2, r2
 8004d44:	831a      	strh	r2, [r3, #24]
}
 8004d46:	bf00      	nop
 8004d48:	3770      	adds	r7, #112	@ 0x70
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	40008000 	.word	0x40008000

08004d54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <std>:
 8004d68:	2300      	movs	r3, #0
 8004d6a:	b510      	push	{r4, lr}
 8004d6c:	4604      	mov	r4, r0
 8004d6e:	e9c0 3300 	strd	r3, r3, [r0]
 8004d72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d76:	6083      	str	r3, [r0, #8]
 8004d78:	8181      	strh	r1, [r0, #12]
 8004d7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004d7c:	81c2      	strh	r2, [r0, #14]
 8004d7e:	6183      	str	r3, [r0, #24]
 8004d80:	4619      	mov	r1, r3
 8004d82:	2208      	movs	r2, #8
 8004d84:	305c      	adds	r0, #92	@ 0x5c
 8004d86:	f000 f90e 	bl	8004fa6 <memset>
 8004d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004dc0 <std+0x58>)
 8004d8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004dc4 <std+0x5c>)
 8004d90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004d92:	4b0d      	ldr	r3, [pc, #52]	@ (8004dc8 <std+0x60>)
 8004d94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004d96:	4b0d      	ldr	r3, [pc, #52]	@ (8004dcc <std+0x64>)
 8004d98:	6323      	str	r3, [r4, #48]	@ 0x30
 8004d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd0 <std+0x68>)
 8004d9c:	6224      	str	r4, [r4, #32]
 8004d9e:	429c      	cmp	r4, r3
 8004da0:	d006      	beq.n	8004db0 <std+0x48>
 8004da2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004da6:	4294      	cmp	r4, r2
 8004da8:	d002      	beq.n	8004db0 <std+0x48>
 8004daa:	33d0      	adds	r3, #208	@ 0xd0
 8004dac:	429c      	cmp	r4, r3
 8004dae:	d105      	bne.n	8004dbc <std+0x54>
 8004db0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004db8:	f000 b980 	b.w	80050bc <__retarget_lock_init_recursive>
 8004dbc:	bd10      	pop	{r4, pc}
 8004dbe:	bf00      	nop
 8004dc0:	08004f21 	.word	0x08004f21
 8004dc4:	08004f43 	.word	0x08004f43
 8004dc8:	08004f7b 	.word	0x08004f7b
 8004dcc:	08004f9f 	.word	0x08004f9f
 8004dd0:	200004bc 	.word	0x200004bc

08004dd4 <stdio_exit_handler>:
 8004dd4:	4a02      	ldr	r2, [pc, #8]	@ (8004de0 <stdio_exit_handler+0xc>)
 8004dd6:	4903      	ldr	r1, [pc, #12]	@ (8004de4 <stdio_exit_handler+0x10>)
 8004dd8:	4803      	ldr	r0, [pc, #12]	@ (8004de8 <stdio_exit_handler+0x14>)
 8004dda:	f000 b869 	b.w	8004eb0 <_fwalk_sglue>
 8004dde:	bf00      	nop
 8004de0:	20000014 	.word	0x20000014
 8004de4:	08005979 	.word	0x08005979
 8004de8:	20000024 	.word	0x20000024

08004dec <cleanup_stdio>:
 8004dec:	6841      	ldr	r1, [r0, #4]
 8004dee:	4b0c      	ldr	r3, [pc, #48]	@ (8004e20 <cleanup_stdio+0x34>)
 8004df0:	4299      	cmp	r1, r3
 8004df2:	b510      	push	{r4, lr}
 8004df4:	4604      	mov	r4, r0
 8004df6:	d001      	beq.n	8004dfc <cleanup_stdio+0x10>
 8004df8:	f000 fdbe 	bl	8005978 <_fflush_r>
 8004dfc:	68a1      	ldr	r1, [r4, #8]
 8004dfe:	4b09      	ldr	r3, [pc, #36]	@ (8004e24 <cleanup_stdio+0x38>)
 8004e00:	4299      	cmp	r1, r3
 8004e02:	d002      	beq.n	8004e0a <cleanup_stdio+0x1e>
 8004e04:	4620      	mov	r0, r4
 8004e06:	f000 fdb7 	bl	8005978 <_fflush_r>
 8004e0a:	68e1      	ldr	r1, [r4, #12]
 8004e0c:	4b06      	ldr	r3, [pc, #24]	@ (8004e28 <cleanup_stdio+0x3c>)
 8004e0e:	4299      	cmp	r1, r3
 8004e10:	d004      	beq.n	8004e1c <cleanup_stdio+0x30>
 8004e12:	4620      	mov	r0, r4
 8004e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e18:	f000 bdae 	b.w	8005978 <_fflush_r>
 8004e1c:	bd10      	pop	{r4, pc}
 8004e1e:	bf00      	nop
 8004e20:	200004bc 	.word	0x200004bc
 8004e24:	20000524 	.word	0x20000524
 8004e28:	2000058c 	.word	0x2000058c

08004e2c <global_stdio_init.part.0>:
 8004e2c:	b510      	push	{r4, lr}
 8004e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e5c <global_stdio_init.part.0+0x30>)
 8004e30:	4c0b      	ldr	r4, [pc, #44]	@ (8004e60 <global_stdio_init.part.0+0x34>)
 8004e32:	4a0c      	ldr	r2, [pc, #48]	@ (8004e64 <global_stdio_init.part.0+0x38>)
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	4620      	mov	r0, r4
 8004e38:	2200      	movs	r2, #0
 8004e3a:	2104      	movs	r1, #4
 8004e3c:	f7ff ff94 	bl	8004d68 <std>
 8004e40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e44:	2201      	movs	r2, #1
 8004e46:	2109      	movs	r1, #9
 8004e48:	f7ff ff8e 	bl	8004d68 <std>
 8004e4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004e50:	2202      	movs	r2, #2
 8004e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e56:	2112      	movs	r1, #18
 8004e58:	f7ff bf86 	b.w	8004d68 <std>
 8004e5c:	200005f4 	.word	0x200005f4
 8004e60:	200004bc 	.word	0x200004bc
 8004e64:	08004dd5 	.word	0x08004dd5

08004e68 <__sfp_lock_acquire>:
 8004e68:	4801      	ldr	r0, [pc, #4]	@ (8004e70 <__sfp_lock_acquire+0x8>)
 8004e6a:	f000 b928 	b.w	80050be <__retarget_lock_acquire_recursive>
 8004e6e:	bf00      	nop
 8004e70:	200005fd 	.word	0x200005fd

08004e74 <__sfp_lock_release>:
 8004e74:	4801      	ldr	r0, [pc, #4]	@ (8004e7c <__sfp_lock_release+0x8>)
 8004e76:	f000 b923 	b.w	80050c0 <__retarget_lock_release_recursive>
 8004e7a:	bf00      	nop
 8004e7c:	200005fd 	.word	0x200005fd

08004e80 <__sinit>:
 8004e80:	b510      	push	{r4, lr}
 8004e82:	4604      	mov	r4, r0
 8004e84:	f7ff fff0 	bl	8004e68 <__sfp_lock_acquire>
 8004e88:	6a23      	ldr	r3, [r4, #32]
 8004e8a:	b11b      	cbz	r3, 8004e94 <__sinit+0x14>
 8004e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e90:	f7ff bff0 	b.w	8004e74 <__sfp_lock_release>
 8004e94:	4b04      	ldr	r3, [pc, #16]	@ (8004ea8 <__sinit+0x28>)
 8004e96:	6223      	str	r3, [r4, #32]
 8004e98:	4b04      	ldr	r3, [pc, #16]	@ (8004eac <__sinit+0x2c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f5      	bne.n	8004e8c <__sinit+0xc>
 8004ea0:	f7ff ffc4 	bl	8004e2c <global_stdio_init.part.0>
 8004ea4:	e7f2      	b.n	8004e8c <__sinit+0xc>
 8004ea6:	bf00      	nop
 8004ea8:	08004ded 	.word	0x08004ded
 8004eac:	200005f4 	.word	0x200005f4

08004eb0 <_fwalk_sglue>:
 8004eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eb4:	4607      	mov	r7, r0
 8004eb6:	4688      	mov	r8, r1
 8004eb8:	4614      	mov	r4, r2
 8004eba:	2600      	movs	r6, #0
 8004ebc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ec0:	f1b9 0901 	subs.w	r9, r9, #1
 8004ec4:	d505      	bpl.n	8004ed2 <_fwalk_sglue+0x22>
 8004ec6:	6824      	ldr	r4, [r4, #0]
 8004ec8:	2c00      	cmp	r4, #0
 8004eca:	d1f7      	bne.n	8004ebc <_fwalk_sglue+0xc>
 8004ecc:	4630      	mov	r0, r6
 8004ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ed2:	89ab      	ldrh	r3, [r5, #12]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d907      	bls.n	8004ee8 <_fwalk_sglue+0x38>
 8004ed8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004edc:	3301      	adds	r3, #1
 8004ede:	d003      	beq.n	8004ee8 <_fwalk_sglue+0x38>
 8004ee0:	4629      	mov	r1, r5
 8004ee2:	4638      	mov	r0, r7
 8004ee4:	47c0      	blx	r8
 8004ee6:	4306      	orrs	r6, r0
 8004ee8:	3568      	adds	r5, #104	@ 0x68
 8004eea:	e7e9      	b.n	8004ec0 <_fwalk_sglue+0x10>

08004eec <iprintf>:
 8004eec:	b40f      	push	{r0, r1, r2, r3}
 8004eee:	b507      	push	{r0, r1, r2, lr}
 8004ef0:	4906      	ldr	r1, [pc, #24]	@ (8004f0c <iprintf+0x20>)
 8004ef2:	ab04      	add	r3, sp, #16
 8004ef4:	6808      	ldr	r0, [r1, #0]
 8004ef6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004efa:	6881      	ldr	r1, [r0, #8]
 8004efc:	9301      	str	r3, [sp, #4]
 8004efe:	f000 fa11 	bl	8005324 <_vfiprintf_r>
 8004f02:	b003      	add	sp, #12
 8004f04:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f08:	b004      	add	sp, #16
 8004f0a:	4770      	bx	lr
 8004f0c:	20000020 	.word	0x20000020

08004f10 <putchar>:
 8004f10:	4b02      	ldr	r3, [pc, #8]	@ (8004f1c <putchar+0xc>)
 8004f12:	4601      	mov	r1, r0
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	6882      	ldr	r2, [r0, #8]
 8004f18:	f000 bd56 	b.w	80059c8 <_putc_r>
 8004f1c:	20000020 	.word	0x20000020

08004f20 <__sread>:
 8004f20:	b510      	push	{r4, lr}
 8004f22:	460c      	mov	r4, r1
 8004f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f28:	f000 f87a 	bl	8005020 <_read_r>
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	bfab      	itete	ge
 8004f30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004f32:	89a3      	ldrhlt	r3, [r4, #12]
 8004f34:	181b      	addge	r3, r3, r0
 8004f36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004f3a:	bfac      	ite	ge
 8004f3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004f3e:	81a3      	strhlt	r3, [r4, #12]
 8004f40:	bd10      	pop	{r4, pc}

08004f42 <__swrite>:
 8004f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f46:	461f      	mov	r7, r3
 8004f48:	898b      	ldrh	r3, [r1, #12]
 8004f4a:	05db      	lsls	r3, r3, #23
 8004f4c:	4605      	mov	r5, r0
 8004f4e:	460c      	mov	r4, r1
 8004f50:	4616      	mov	r6, r2
 8004f52:	d505      	bpl.n	8004f60 <__swrite+0x1e>
 8004f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f58:	2302      	movs	r3, #2
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f000 f84e 	bl	8004ffc <_lseek_r>
 8004f60:	89a3      	ldrh	r3, [r4, #12]
 8004f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f6a:	81a3      	strh	r3, [r4, #12]
 8004f6c:	4632      	mov	r2, r6
 8004f6e:	463b      	mov	r3, r7
 8004f70:	4628      	mov	r0, r5
 8004f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f76:	f000 b865 	b.w	8005044 <_write_r>

08004f7a <__sseek>:
 8004f7a:	b510      	push	{r4, lr}
 8004f7c:	460c      	mov	r4, r1
 8004f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f82:	f000 f83b 	bl	8004ffc <_lseek_r>
 8004f86:	1c43      	adds	r3, r0, #1
 8004f88:	89a3      	ldrh	r3, [r4, #12]
 8004f8a:	bf15      	itete	ne
 8004f8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004f8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004f92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004f96:	81a3      	strheq	r3, [r4, #12]
 8004f98:	bf18      	it	ne
 8004f9a:	81a3      	strhne	r3, [r4, #12]
 8004f9c:	bd10      	pop	{r4, pc}

08004f9e <__sclose>:
 8004f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fa2:	f000 b81b 	b.w	8004fdc <_close_r>

08004fa6 <memset>:
 8004fa6:	4402      	add	r2, r0
 8004fa8:	4603      	mov	r3, r0
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d100      	bne.n	8004fb0 <memset+0xa>
 8004fae:	4770      	bx	lr
 8004fb0:	f803 1b01 	strb.w	r1, [r3], #1
 8004fb4:	e7f9      	b.n	8004faa <memset+0x4>

08004fb6 <strncmp>:
 8004fb6:	b510      	push	{r4, lr}
 8004fb8:	b16a      	cbz	r2, 8004fd6 <strncmp+0x20>
 8004fba:	3901      	subs	r1, #1
 8004fbc:	1884      	adds	r4, r0, r2
 8004fbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fc2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d103      	bne.n	8004fd2 <strncmp+0x1c>
 8004fca:	42a0      	cmp	r0, r4
 8004fcc:	d001      	beq.n	8004fd2 <strncmp+0x1c>
 8004fce:	2a00      	cmp	r2, #0
 8004fd0:	d1f5      	bne.n	8004fbe <strncmp+0x8>
 8004fd2:	1ad0      	subs	r0, r2, r3
 8004fd4:	bd10      	pop	{r4, pc}
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	e7fc      	b.n	8004fd4 <strncmp+0x1e>
	...

08004fdc <_close_r>:
 8004fdc:	b538      	push	{r3, r4, r5, lr}
 8004fde:	4d06      	ldr	r5, [pc, #24]	@ (8004ff8 <_close_r+0x1c>)
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	4604      	mov	r4, r0
 8004fe4:	4608      	mov	r0, r1
 8004fe6:	602b      	str	r3, [r5, #0]
 8004fe8:	f7fc f857 	bl	800109a <_close>
 8004fec:	1c43      	adds	r3, r0, #1
 8004fee:	d102      	bne.n	8004ff6 <_close_r+0x1a>
 8004ff0:	682b      	ldr	r3, [r5, #0]
 8004ff2:	b103      	cbz	r3, 8004ff6 <_close_r+0x1a>
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	bd38      	pop	{r3, r4, r5, pc}
 8004ff8:	200005f8 	.word	0x200005f8

08004ffc <_lseek_r>:
 8004ffc:	b538      	push	{r3, r4, r5, lr}
 8004ffe:	4d07      	ldr	r5, [pc, #28]	@ (800501c <_lseek_r+0x20>)
 8005000:	4604      	mov	r4, r0
 8005002:	4608      	mov	r0, r1
 8005004:	4611      	mov	r1, r2
 8005006:	2200      	movs	r2, #0
 8005008:	602a      	str	r2, [r5, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	f7fc f86c 	bl	80010e8 <_lseek>
 8005010:	1c43      	adds	r3, r0, #1
 8005012:	d102      	bne.n	800501a <_lseek_r+0x1e>
 8005014:	682b      	ldr	r3, [r5, #0]
 8005016:	b103      	cbz	r3, 800501a <_lseek_r+0x1e>
 8005018:	6023      	str	r3, [r4, #0]
 800501a:	bd38      	pop	{r3, r4, r5, pc}
 800501c:	200005f8 	.word	0x200005f8

08005020 <_read_r>:
 8005020:	b538      	push	{r3, r4, r5, lr}
 8005022:	4d07      	ldr	r5, [pc, #28]	@ (8005040 <_read_r+0x20>)
 8005024:	4604      	mov	r4, r0
 8005026:	4608      	mov	r0, r1
 8005028:	4611      	mov	r1, r2
 800502a:	2200      	movs	r2, #0
 800502c:	602a      	str	r2, [r5, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	f7fc f816 	bl	8001060 <_read>
 8005034:	1c43      	adds	r3, r0, #1
 8005036:	d102      	bne.n	800503e <_read_r+0x1e>
 8005038:	682b      	ldr	r3, [r5, #0]
 800503a:	b103      	cbz	r3, 800503e <_read_r+0x1e>
 800503c:	6023      	str	r3, [r4, #0]
 800503e:	bd38      	pop	{r3, r4, r5, pc}
 8005040:	200005f8 	.word	0x200005f8

08005044 <_write_r>:
 8005044:	b538      	push	{r3, r4, r5, lr}
 8005046:	4d07      	ldr	r5, [pc, #28]	@ (8005064 <_write_r+0x20>)
 8005048:	4604      	mov	r4, r0
 800504a:	4608      	mov	r0, r1
 800504c:	4611      	mov	r1, r2
 800504e:	2200      	movs	r2, #0
 8005050:	602a      	str	r2, [r5, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	f7fb fc38 	bl	80008c8 <_write>
 8005058:	1c43      	adds	r3, r0, #1
 800505a:	d102      	bne.n	8005062 <_write_r+0x1e>
 800505c:	682b      	ldr	r3, [r5, #0]
 800505e:	b103      	cbz	r3, 8005062 <_write_r+0x1e>
 8005060:	6023      	str	r3, [r4, #0]
 8005062:	bd38      	pop	{r3, r4, r5, pc}
 8005064:	200005f8 	.word	0x200005f8

08005068 <__errno>:
 8005068:	4b01      	ldr	r3, [pc, #4]	@ (8005070 <__errno+0x8>)
 800506a:	6818      	ldr	r0, [r3, #0]
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	20000020 	.word	0x20000020

08005074 <__libc_init_array>:
 8005074:	b570      	push	{r4, r5, r6, lr}
 8005076:	4d0d      	ldr	r5, [pc, #52]	@ (80050ac <__libc_init_array+0x38>)
 8005078:	4c0d      	ldr	r4, [pc, #52]	@ (80050b0 <__libc_init_array+0x3c>)
 800507a:	1b64      	subs	r4, r4, r5
 800507c:	10a4      	asrs	r4, r4, #2
 800507e:	2600      	movs	r6, #0
 8005080:	42a6      	cmp	r6, r4
 8005082:	d109      	bne.n	8005098 <__libc_init_array+0x24>
 8005084:	4d0b      	ldr	r5, [pc, #44]	@ (80050b4 <__libc_init_array+0x40>)
 8005086:	4c0c      	ldr	r4, [pc, #48]	@ (80050b8 <__libc_init_array+0x44>)
 8005088:	f000 fdfa 	bl	8005c80 <_init>
 800508c:	1b64      	subs	r4, r4, r5
 800508e:	10a4      	asrs	r4, r4, #2
 8005090:	2600      	movs	r6, #0
 8005092:	42a6      	cmp	r6, r4
 8005094:	d105      	bne.n	80050a2 <__libc_init_array+0x2e>
 8005096:	bd70      	pop	{r4, r5, r6, pc}
 8005098:	f855 3b04 	ldr.w	r3, [r5], #4
 800509c:	4798      	blx	r3
 800509e:	3601      	adds	r6, #1
 80050a0:	e7ee      	b.n	8005080 <__libc_init_array+0xc>
 80050a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a6:	4798      	blx	r3
 80050a8:	3601      	adds	r6, #1
 80050aa:	e7f2      	b.n	8005092 <__libc_init_array+0x1e>
 80050ac:	08005db0 	.word	0x08005db0
 80050b0:	08005db0 	.word	0x08005db0
 80050b4:	08005db0 	.word	0x08005db0
 80050b8:	08005db4 	.word	0x08005db4

080050bc <__retarget_lock_init_recursive>:
 80050bc:	4770      	bx	lr

080050be <__retarget_lock_acquire_recursive>:
 80050be:	4770      	bx	lr

080050c0 <__retarget_lock_release_recursive>:
 80050c0:	4770      	bx	lr

080050c2 <memcpy>:
 80050c2:	440a      	add	r2, r1
 80050c4:	4291      	cmp	r1, r2
 80050c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80050ca:	d100      	bne.n	80050ce <memcpy+0xc>
 80050cc:	4770      	bx	lr
 80050ce:	b510      	push	{r4, lr}
 80050d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050d8:	4291      	cmp	r1, r2
 80050da:	d1f9      	bne.n	80050d0 <memcpy+0xe>
 80050dc:	bd10      	pop	{r4, pc}
	...

080050e0 <_free_r>:
 80050e0:	b538      	push	{r3, r4, r5, lr}
 80050e2:	4605      	mov	r5, r0
 80050e4:	2900      	cmp	r1, #0
 80050e6:	d041      	beq.n	800516c <_free_r+0x8c>
 80050e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050ec:	1f0c      	subs	r4, r1, #4
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	bfb8      	it	lt
 80050f2:	18e4      	addlt	r4, r4, r3
 80050f4:	f000 f8e0 	bl	80052b8 <__malloc_lock>
 80050f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005170 <_free_r+0x90>)
 80050fa:	6813      	ldr	r3, [r2, #0]
 80050fc:	b933      	cbnz	r3, 800510c <_free_r+0x2c>
 80050fe:	6063      	str	r3, [r4, #4]
 8005100:	6014      	str	r4, [r2, #0]
 8005102:	4628      	mov	r0, r5
 8005104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005108:	f000 b8dc 	b.w	80052c4 <__malloc_unlock>
 800510c:	42a3      	cmp	r3, r4
 800510e:	d908      	bls.n	8005122 <_free_r+0x42>
 8005110:	6820      	ldr	r0, [r4, #0]
 8005112:	1821      	adds	r1, r4, r0
 8005114:	428b      	cmp	r3, r1
 8005116:	bf01      	itttt	eq
 8005118:	6819      	ldreq	r1, [r3, #0]
 800511a:	685b      	ldreq	r3, [r3, #4]
 800511c:	1809      	addeq	r1, r1, r0
 800511e:	6021      	streq	r1, [r4, #0]
 8005120:	e7ed      	b.n	80050fe <_free_r+0x1e>
 8005122:	461a      	mov	r2, r3
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	b10b      	cbz	r3, 800512c <_free_r+0x4c>
 8005128:	42a3      	cmp	r3, r4
 800512a:	d9fa      	bls.n	8005122 <_free_r+0x42>
 800512c:	6811      	ldr	r1, [r2, #0]
 800512e:	1850      	adds	r0, r2, r1
 8005130:	42a0      	cmp	r0, r4
 8005132:	d10b      	bne.n	800514c <_free_r+0x6c>
 8005134:	6820      	ldr	r0, [r4, #0]
 8005136:	4401      	add	r1, r0
 8005138:	1850      	adds	r0, r2, r1
 800513a:	4283      	cmp	r3, r0
 800513c:	6011      	str	r1, [r2, #0]
 800513e:	d1e0      	bne.n	8005102 <_free_r+0x22>
 8005140:	6818      	ldr	r0, [r3, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	6053      	str	r3, [r2, #4]
 8005146:	4408      	add	r0, r1
 8005148:	6010      	str	r0, [r2, #0]
 800514a:	e7da      	b.n	8005102 <_free_r+0x22>
 800514c:	d902      	bls.n	8005154 <_free_r+0x74>
 800514e:	230c      	movs	r3, #12
 8005150:	602b      	str	r3, [r5, #0]
 8005152:	e7d6      	b.n	8005102 <_free_r+0x22>
 8005154:	6820      	ldr	r0, [r4, #0]
 8005156:	1821      	adds	r1, r4, r0
 8005158:	428b      	cmp	r3, r1
 800515a:	bf04      	itt	eq
 800515c:	6819      	ldreq	r1, [r3, #0]
 800515e:	685b      	ldreq	r3, [r3, #4]
 8005160:	6063      	str	r3, [r4, #4]
 8005162:	bf04      	itt	eq
 8005164:	1809      	addeq	r1, r1, r0
 8005166:	6021      	streq	r1, [r4, #0]
 8005168:	6054      	str	r4, [r2, #4]
 800516a:	e7ca      	b.n	8005102 <_free_r+0x22>
 800516c:	bd38      	pop	{r3, r4, r5, pc}
 800516e:	bf00      	nop
 8005170:	20000604 	.word	0x20000604

08005174 <sbrk_aligned>:
 8005174:	b570      	push	{r4, r5, r6, lr}
 8005176:	4e0f      	ldr	r6, [pc, #60]	@ (80051b4 <sbrk_aligned+0x40>)
 8005178:	460c      	mov	r4, r1
 800517a:	6831      	ldr	r1, [r6, #0]
 800517c:	4605      	mov	r5, r0
 800517e:	b911      	cbnz	r1, 8005186 <sbrk_aligned+0x12>
 8005180:	f000 fcea 	bl	8005b58 <_sbrk_r>
 8005184:	6030      	str	r0, [r6, #0]
 8005186:	4621      	mov	r1, r4
 8005188:	4628      	mov	r0, r5
 800518a:	f000 fce5 	bl	8005b58 <_sbrk_r>
 800518e:	1c43      	adds	r3, r0, #1
 8005190:	d103      	bne.n	800519a <sbrk_aligned+0x26>
 8005192:	f04f 34ff 	mov.w	r4, #4294967295
 8005196:	4620      	mov	r0, r4
 8005198:	bd70      	pop	{r4, r5, r6, pc}
 800519a:	1cc4      	adds	r4, r0, #3
 800519c:	f024 0403 	bic.w	r4, r4, #3
 80051a0:	42a0      	cmp	r0, r4
 80051a2:	d0f8      	beq.n	8005196 <sbrk_aligned+0x22>
 80051a4:	1a21      	subs	r1, r4, r0
 80051a6:	4628      	mov	r0, r5
 80051a8:	f000 fcd6 	bl	8005b58 <_sbrk_r>
 80051ac:	3001      	adds	r0, #1
 80051ae:	d1f2      	bne.n	8005196 <sbrk_aligned+0x22>
 80051b0:	e7ef      	b.n	8005192 <sbrk_aligned+0x1e>
 80051b2:	bf00      	nop
 80051b4:	20000600 	.word	0x20000600

080051b8 <_malloc_r>:
 80051b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051bc:	1ccd      	adds	r5, r1, #3
 80051be:	f025 0503 	bic.w	r5, r5, #3
 80051c2:	3508      	adds	r5, #8
 80051c4:	2d0c      	cmp	r5, #12
 80051c6:	bf38      	it	cc
 80051c8:	250c      	movcc	r5, #12
 80051ca:	2d00      	cmp	r5, #0
 80051cc:	4606      	mov	r6, r0
 80051ce:	db01      	blt.n	80051d4 <_malloc_r+0x1c>
 80051d0:	42a9      	cmp	r1, r5
 80051d2:	d904      	bls.n	80051de <_malloc_r+0x26>
 80051d4:	230c      	movs	r3, #12
 80051d6:	6033      	str	r3, [r6, #0]
 80051d8:	2000      	movs	r0, #0
 80051da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80052b4 <_malloc_r+0xfc>
 80051e2:	f000 f869 	bl	80052b8 <__malloc_lock>
 80051e6:	f8d8 3000 	ldr.w	r3, [r8]
 80051ea:	461c      	mov	r4, r3
 80051ec:	bb44      	cbnz	r4, 8005240 <_malloc_r+0x88>
 80051ee:	4629      	mov	r1, r5
 80051f0:	4630      	mov	r0, r6
 80051f2:	f7ff ffbf 	bl	8005174 <sbrk_aligned>
 80051f6:	1c43      	adds	r3, r0, #1
 80051f8:	4604      	mov	r4, r0
 80051fa:	d158      	bne.n	80052ae <_malloc_r+0xf6>
 80051fc:	f8d8 4000 	ldr.w	r4, [r8]
 8005200:	4627      	mov	r7, r4
 8005202:	2f00      	cmp	r7, #0
 8005204:	d143      	bne.n	800528e <_malloc_r+0xd6>
 8005206:	2c00      	cmp	r4, #0
 8005208:	d04b      	beq.n	80052a2 <_malloc_r+0xea>
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	4639      	mov	r1, r7
 800520e:	4630      	mov	r0, r6
 8005210:	eb04 0903 	add.w	r9, r4, r3
 8005214:	f000 fca0 	bl	8005b58 <_sbrk_r>
 8005218:	4581      	cmp	r9, r0
 800521a:	d142      	bne.n	80052a2 <_malloc_r+0xea>
 800521c:	6821      	ldr	r1, [r4, #0]
 800521e:	1a6d      	subs	r5, r5, r1
 8005220:	4629      	mov	r1, r5
 8005222:	4630      	mov	r0, r6
 8005224:	f7ff ffa6 	bl	8005174 <sbrk_aligned>
 8005228:	3001      	adds	r0, #1
 800522a:	d03a      	beq.n	80052a2 <_malloc_r+0xea>
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	442b      	add	r3, r5
 8005230:	6023      	str	r3, [r4, #0]
 8005232:	f8d8 3000 	ldr.w	r3, [r8]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	bb62      	cbnz	r2, 8005294 <_malloc_r+0xdc>
 800523a:	f8c8 7000 	str.w	r7, [r8]
 800523e:	e00f      	b.n	8005260 <_malloc_r+0xa8>
 8005240:	6822      	ldr	r2, [r4, #0]
 8005242:	1b52      	subs	r2, r2, r5
 8005244:	d420      	bmi.n	8005288 <_malloc_r+0xd0>
 8005246:	2a0b      	cmp	r2, #11
 8005248:	d917      	bls.n	800527a <_malloc_r+0xc2>
 800524a:	1961      	adds	r1, r4, r5
 800524c:	42a3      	cmp	r3, r4
 800524e:	6025      	str	r5, [r4, #0]
 8005250:	bf18      	it	ne
 8005252:	6059      	strne	r1, [r3, #4]
 8005254:	6863      	ldr	r3, [r4, #4]
 8005256:	bf08      	it	eq
 8005258:	f8c8 1000 	streq.w	r1, [r8]
 800525c:	5162      	str	r2, [r4, r5]
 800525e:	604b      	str	r3, [r1, #4]
 8005260:	4630      	mov	r0, r6
 8005262:	f000 f82f 	bl	80052c4 <__malloc_unlock>
 8005266:	f104 000b 	add.w	r0, r4, #11
 800526a:	1d23      	adds	r3, r4, #4
 800526c:	f020 0007 	bic.w	r0, r0, #7
 8005270:	1ac2      	subs	r2, r0, r3
 8005272:	bf1c      	itt	ne
 8005274:	1a1b      	subne	r3, r3, r0
 8005276:	50a3      	strne	r3, [r4, r2]
 8005278:	e7af      	b.n	80051da <_malloc_r+0x22>
 800527a:	6862      	ldr	r2, [r4, #4]
 800527c:	42a3      	cmp	r3, r4
 800527e:	bf0c      	ite	eq
 8005280:	f8c8 2000 	streq.w	r2, [r8]
 8005284:	605a      	strne	r2, [r3, #4]
 8005286:	e7eb      	b.n	8005260 <_malloc_r+0xa8>
 8005288:	4623      	mov	r3, r4
 800528a:	6864      	ldr	r4, [r4, #4]
 800528c:	e7ae      	b.n	80051ec <_malloc_r+0x34>
 800528e:	463c      	mov	r4, r7
 8005290:	687f      	ldr	r7, [r7, #4]
 8005292:	e7b6      	b.n	8005202 <_malloc_r+0x4a>
 8005294:	461a      	mov	r2, r3
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	42a3      	cmp	r3, r4
 800529a:	d1fb      	bne.n	8005294 <_malloc_r+0xdc>
 800529c:	2300      	movs	r3, #0
 800529e:	6053      	str	r3, [r2, #4]
 80052a0:	e7de      	b.n	8005260 <_malloc_r+0xa8>
 80052a2:	230c      	movs	r3, #12
 80052a4:	6033      	str	r3, [r6, #0]
 80052a6:	4630      	mov	r0, r6
 80052a8:	f000 f80c 	bl	80052c4 <__malloc_unlock>
 80052ac:	e794      	b.n	80051d8 <_malloc_r+0x20>
 80052ae:	6005      	str	r5, [r0, #0]
 80052b0:	e7d6      	b.n	8005260 <_malloc_r+0xa8>
 80052b2:	bf00      	nop
 80052b4:	20000604 	.word	0x20000604

080052b8 <__malloc_lock>:
 80052b8:	4801      	ldr	r0, [pc, #4]	@ (80052c0 <__malloc_lock+0x8>)
 80052ba:	f7ff bf00 	b.w	80050be <__retarget_lock_acquire_recursive>
 80052be:	bf00      	nop
 80052c0:	200005fc 	.word	0x200005fc

080052c4 <__malloc_unlock>:
 80052c4:	4801      	ldr	r0, [pc, #4]	@ (80052cc <__malloc_unlock+0x8>)
 80052c6:	f7ff befb 	b.w	80050c0 <__retarget_lock_release_recursive>
 80052ca:	bf00      	nop
 80052cc:	200005fc 	.word	0x200005fc

080052d0 <__sfputc_r>:
 80052d0:	6893      	ldr	r3, [r2, #8]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	b410      	push	{r4}
 80052d8:	6093      	str	r3, [r2, #8]
 80052da:	da08      	bge.n	80052ee <__sfputc_r+0x1e>
 80052dc:	6994      	ldr	r4, [r2, #24]
 80052de:	42a3      	cmp	r3, r4
 80052e0:	db01      	blt.n	80052e6 <__sfputc_r+0x16>
 80052e2:	290a      	cmp	r1, #10
 80052e4:	d103      	bne.n	80052ee <__sfputc_r+0x1e>
 80052e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052ea:	f000 bba1 	b.w	8005a30 <__swbuf_r>
 80052ee:	6813      	ldr	r3, [r2, #0]
 80052f0:	1c58      	adds	r0, r3, #1
 80052f2:	6010      	str	r0, [r2, #0]
 80052f4:	7019      	strb	r1, [r3, #0]
 80052f6:	4608      	mov	r0, r1
 80052f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <__sfputs_r>:
 80052fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005300:	4606      	mov	r6, r0
 8005302:	460f      	mov	r7, r1
 8005304:	4614      	mov	r4, r2
 8005306:	18d5      	adds	r5, r2, r3
 8005308:	42ac      	cmp	r4, r5
 800530a:	d101      	bne.n	8005310 <__sfputs_r+0x12>
 800530c:	2000      	movs	r0, #0
 800530e:	e007      	b.n	8005320 <__sfputs_r+0x22>
 8005310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005314:	463a      	mov	r2, r7
 8005316:	4630      	mov	r0, r6
 8005318:	f7ff ffda 	bl	80052d0 <__sfputc_r>
 800531c:	1c43      	adds	r3, r0, #1
 800531e:	d1f3      	bne.n	8005308 <__sfputs_r+0xa>
 8005320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005324 <_vfiprintf_r>:
 8005324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005328:	460d      	mov	r5, r1
 800532a:	b09d      	sub	sp, #116	@ 0x74
 800532c:	4614      	mov	r4, r2
 800532e:	4698      	mov	r8, r3
 8005330:	4606      	mov	r6, r0
 8005332:	b118      	cbz	r0, 800533c <_vfiprintf_r+0x18>
 8005334:	6a03      	ldr	r3, [r0, #32]
 8005336:	b90b      	cbnz	r3, 800533c <_vfiprintf_r+0x18>
 8005338:	f7ff fda2 	bl	8004e80 <__sinit>
 800533c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800533e:	07d9      	lsls	r1, r3, #31
 8005340:	d405      	bmi.n	800534e <_vfiprintf_r+0x2a>
 8005342:	89ab      	ldrh	r3, [r5, #12]
 8005344:	059a      	lsls	r2, r3, #22
 8005346:	d402      	bmi.n	800534e <_vfiprintf_r+0x2a>
 8005348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800534a:	f7ff feb8 	bl	80050be <__retarget_lock_acquire_recursive>
 800534e:	89ab      	ldrh	r3, [r5, #12]
 8005350:	071b      	lsls	r3, r3, #28
 8005352:	d501      	bpl.n	8005358 <_vfiprintf_r+0x34>
 8005354:	692b      	ldr	r3, [r5, #16]
 8005356:	b99b      	cbnz	r3, 8005380 <_vfiprintf_r+0x5c>
 8005358:	4629      	mov	r1, r5
 800535a:	4630      	mov	r0, r6
 800535c:	f000 fba6 	bl	8005aac <__swsetup_r>
 8005360:	b170      	cbz	r0, 8005380 <_vfiprintf_r+0x5c>
 8005362:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005364:	07dc      	lsls	r4, r3, #31
 8005366:	d504      	bpl.n	8005372 <_vfiprintf_r+0x4e>
 8005368:	f04f 30ff 	mov.w	r0, #4294967295
 800536c:	b01d      	add	sp, #116	@ 0x74
 800536e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005372:	89ab      	ldrh	r3, [r5, #12]
 8005374:	0598      	lsls	r0, r3, #22
 8005376:	d4f7      	bmi.n	8005368 <_vfiprintf_r+0x44>
 8005378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800537a:	f7ff fea1 	bl	80050c0 <__retarget_lock_release_recursive>
 800537e:	e7f3      	b.n	8005368 <_vfiprintf_r+0x44>
 8005380:	2300      	movs	r3, #0
 8005382:	9309      	str	r3, [sp, #36]	@ 0x24
 8005384:	2320      	movs	r3, #32
 8005386:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800538a:	f8cd 800c 	str.w	r8, [sp, #12]
 800538e:	2330      	movs	r3, #48	@ 0x30
 8005390:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005540 <_vfiprintf_r+0x21c>
 8005394:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005398:	f04f 0901 	mov.w	r9, #1
 800539c:	4623      	mov	r3, r4
 800539e:	469a      	mov	sl, r3
 80053a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053a4:	b10a      	cbz	r2, 80053aa <_vfiprintf_r+0x86>
 80053a6:	2a25      	cmp	r2, #37	@ 0x25
 80053a8:	d1f9      	bne.n	800539e <_vfiprintf_r+0x7a>
 80053aa:	ebba 0b04 	subs.w	fp, sl, r4
 80053ae:	d00b      	beq.n	80053c8 <_vfiprintf_r+0xa4>
 80053b0:	465b      	mov	r3, fp
 80053b2:	4622      	mov	r2, r4
 80053b4:	4629      	mov	r1, r5
 80053b6:	4630      	mov	r0, r6
 80053b8:	f7ff ffa1 	bl	80052fe <__sfputs_r>
 80053bc:	3001      	adds	r0, #1
 80053be:	f000 80a7 	beq.w	8005510 <_vfiprintf_r+0x1ec>
 80053c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053c4:	445a      	add	r2, fp
 80053c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80053c8:	f89a 3000 	ldrb.w	r3, [sl]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 809f 	beq.w	8005510 <_vfiprintf_r+0x1ec>
 80053d2:	2300      	movs	r3, #0
 80053d4:	f04f 32ff 	mov.w	r2, #4294967295
 80053d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053dc:	f10a 0a01 	add.w	sl, sl, #1
 80053e0:	9304      	str	r3, [sp, #16]
 80053e2:	9307      	str	r3, [sp, #28]
 80053e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80053e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80053ea:	4654      	mov	r4, sl
 80053ec:	2205      	movs	r2, #5
 80053ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053f2:	4853      	ldr	r0, [pc, #332]	@ (8005540 <_vfiprintf_r+0x21c>)
 80053f4:	f7fa fef4 	bl	80001e0 <memchr>
 80053f8:	9a04      	ldr	r2, [sp, #16]
 80053fa:	b9d8      	cbnz	r0, 8005434 <_vfiprintf_r+0x110>
 80053fc:	06d1      	lsls	r1, r2, #27
 80053fe:	bf44      	itt	mi
 8005400:	2320      	movmi	r3, #32
 8005402:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005406:	0713      	lsls	r3, r2, #28
 8005408:	bf44      	itt	mi
 800540a:	232b      	movmi	r3, #43	@ 0x2b
 800540c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005410:	f89a 3000 	ldrb.w	r3, [sl]
 8005414:	2b2a      	cmp	r3, #42	@ 0x2a
 8005416:	d015      	beq.n	8005444 <_vfiprintf_r+0x120>
 8005418:	9a07      	ldr	r2, [sp, #28]
 800541a:	4654      	mov	r4, sl
 800541c:	2000      	movs	r0, #0
 800541e:	f04f 0c0a 	mov.w	ip, #10
 8005422:	4621      	mov	r1, r4
 8005424:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005428:	3b30      	subs	r3, #48	@ 0x30
 800542a:	2b09      	cmp	r3, #9
 800542c:	d94b      	bls.n	80054c6 <_vfiprintf_r+0x1a2>
 800542e:	b1b0      	cbz	r0, 800545e <_vfiprintf_r+0x13a>
 8005430:	9207      	str	r2, [sp, #28]
 8005432:	e014      	b.n	800545e <_vfiprintf_r+0x13a>
 8005434:	eba0 0308 	sub.w	r3, r0, r8
 8005438:	fa09 f303 	lsl.w	r3, r9, r3
 800543c:	4313      	orrs	r3, r2
 800543e:	9304      	str	r3, [sp, #16]
 8005440:	46a2      	mov	sl, r4
 8005442:	e7d2      	b.n	80053ea <_vfiprintf_r+0xc6>
 8005444:	9b03      	ldr	r3, [sp, #12]
 8005446:	1d19      	adds	r1, r3, #4
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	9103      	str	r1, [sp, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	bfbb      	ittet	lt
 8005450:	425b      	neglt	r3, r3
 8005452:	f042 0202 	orrlt.w	r2, r2, #2
 8005456:	9307      	strge	r3, [sp, #28]
 8005458:	9307      	strlt	r3, [sp, #28]
 800545a:	bfb8      	it	lt
 800545c:	9204      	strlt	r2, [sp, #16]
 800545e:	7823      	ldrb	r3, [r4, #0]
 8005460:	2b2e      	cmp	r3, #46	@ 0x2e
 8005462:	d10a      	bne.n	800547a <_vfiprintf_r+0x156>
 8005464:	7863      	ldrb	r3, [r4, #1]
 8005466:	2b2a      	cmp	r3, #42	@ 0x2a
 8005468:	d132      	bne.n	80054d0 <_vfiprintf_r+0x1ac>
 800546a:	9b03      	ldr	r3, [sp, #12]
 800546c:	1d1a      	adds	r2, r3, #4
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	9203      	str	r2, [sp, #12]
 8005472:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005476:	3402      	adds	r4, #2
 8005478:	9305      	str	r3, [sp, #20]
 800547a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005550 <_vfiprintf_r+0x22c>
 800547e:	7821      	ldrb	r1, [r4, #0]
 8005480:	2203      	movs	r2, #3
 8005482:	4650      	mov	r0, sl
 8005484:	f7fa feac 	bl	80001e0 <memchr>
 8005488:	b138      	cbz	r0, 800549a <_vfiprintf_r+0x176>
 800548a:	9b04      	ldr	r3, [sp, #16]
 800548c:	eba0 000a 	sub.w	r0, r0, sl
 8005490:	2240      	movs	r2, #64	@ 0x40
 8005492:	4082      	lsls	r2, r0
 8005494:	4313      	orrs	r3, r2
 8005496:	3401      	adds	r4, #1
 8005498:	9304      	str	r3, [sp, #16]
 800549a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800549e:	4829      	ldr	r0, [pc, #164]	@ (8005544 <_vfiprintf_r+0x220>)
 80054a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80054a4:	2206      	movs	r2, #6
 80054a6:	f7fa fe9b 	bl	80001e0 <memchr>
 80054aa:	2800      	cmp	r0, #0
 80054ac:	d03f      	beq.n	800552e <_vfiprintf_r+0x20a>
 80054ae:	4b26      	ldr	r3, [pc, #152]	@ (8005548 <_vfiprintf_r+0x224>)
 80054b0:	bb1b      	cbnz	r3, 80054fa <_vfiprintf_r+0x1d6>
 80054b2:	9b03      	ldr	r3, [sp, #12]
 80054b4:	3307      	adds	r3, #7
 80054b6:	f023 0307 	bic.w	r3, r3, #7
 80054ba:	3308      	adds	r3, #8
 80054bc:	9303      	str	r3, [sp, #12]
 80054be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054c0:	443b      	add	r3, r7
 80054c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80054c4:	e76a      	b.n	800539c <_vfiprintf_r+0x78>
 80054c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80054ca:	460c      	mov	r4, r1
 80054cc:	2001      	movs	r0, #1
 80054ce:	e7a8      	b.n	8005422 <_vfiprintf_r+0xfe>
 80054d0:	2300      	movs	r3, #0
 80054d2:	3401      	adds	r4, #1
 80054d4:	9305      	str	r3, [sp, #20]
 80054d6:	4619      	mov	r1, r3
 80054d8:	f04f 0c0a 	mov.w	ip, #10
 80054dc:	4620      	mov	r0, r4
 80054de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054e2:	3a30      	subs	r2, #48	@ 0x30
 80054e4:	2a09      	cmp	r2, #9
 80054e6:	d903      	bls.n	80054f0 <_vfiprintf_r+0x1cc>
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0c6      	beq.n	800547a <_vfiprintf_r+0x156>
 80054ec:	9105      	str	r1, [sp, #20]
 80054ee:	e7c4      	b.n	800547a <_vfiprintf_r+0x156>
 80054f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80054f4:	4604      	mov	r4, r0
 80054f6:	2301      	movs	r3, #1
 80054f8:	e7f0      	b.n	80054dc <_vfiprintf_r+0x1b8>
 80054fa:	ab03      	add	r3, sp, #12
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	462a      	mov	r2, r5
 8005500:	4b12      	ldr	r3, [pc, #72]	@ (800554c <_vfiprintf_r+0x228>)
 8005502:	a904      	add	r1, sp, #16
 8005504:	4630      	mov	r0, r6
 8005506:	f3af 8000 	nop.w
 800550a:	4607      	mov	r7, r0
 800550c:	1c78      	adds	r0, r7, #1
 800550e:	d1d6      	bne.n	80054be <_vfiprintf_r+0x19a>
 8005510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005512:	07d9      	lsls	r1, r3, #31
 8005514:	d405      	bmi.n	8005522 <_vfiprintf_r+0x1fe>
 8005516:	89ab      	ldrh	r3, [r5, #12]
 8005518:	059a      	lsls	r2, r3, #22
 800551a:	d402      	bmi.n	8005522 <_vfiprintf_r+0x1fe>
 800551c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800551e:	f7ff fdcf 	bl	80050c0 <__retarget_lock_release_recursive>
 8005522:	89ab      	ldrh	r3, [r5, #12]
 8005524:	065b      	lsls	r3, r3, #25
 8005526:	f53f af1f 	bmi.w	8005368 <_vfiprintf_r+0x44>
 800552a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800552c:	e71e      	b.n	800536c <_vfiprintf_r+0x48>
 800552e:	ab03      	add	r3, sp, #12
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	462a      	mov	r2, r5
 8005534:	4b05      	ldr	r3, [pc, #20]	@ (800554c <_vfiprintf_r+0x228>)
 8005536:	a904      	add	r1, sp, #16
 8005538:	4630      	mov	r0, r6
 800553a:	f000 f879 	bl	8005630 <_printf_i>
 800553e:	e7e4      	b.n	800550a <_vfiprintf_r+0x1e6>
 8005540:	08005d74 	.word	0x08005d74
 8005544:	08005d7e 	.word	0x08005d7e
 8005548:	00000000 	.word	0x00000000
 800554c:	080052ff 	.word	0x080052ff
 8005550:	08005d7a 	.word	0x08005d7a

08005554 <_printf_common>:
 8005554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005558:	4616      	mov	r6, r2
 800555a:	4698      	mov	r8, r3
 800555c:	688a      	ldr	r2, [r1, #8]
 800555e:	690b      	ldr	r3, [r1, #16]
 8005560:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005564:	4293      	cmp	r3, r2
 8005566:	bfb8      	it	lt
 8005568:	4613      	movlt	r3, r2
 800556a:	6033      	str	r3, [r6, #0]
 800556c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005570:	4607      	mov	r7, r0
 8005572:	460c      	mov	r4, r1
 8005574:	b10a      	cbz	r2, 800557a <_printf_common+0x26>
 8005576:	3301      	adds	r3, #1
 8005578:	6033      	str	r3, [r6, #0]
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	0699      	lsls	r1, r3, #26
 800557e:	bf42      	ittt	mi
 8005580:	6833      	ldrmi	r3, [r6, #0]
 8005582:	3302      	addmi	r3, #2
 8005584:	6033      	strmi	r3, [r6, #0]
 8005586:	6825      	ldr	r5, [r4, #0]
 8005588:	f015 0506 	ands.w	r5, r5, #6
 800558c:	d106      	bne.n	800559c <_printf_common+0x48>
 800558e:	f104 0a19 	add.w	sl, r4, #25
 8005592:	68e3      	ldr	r3, [r4, #12]
 8005594:	6832      	ldr	r2, [r6, #0]
 8005596:	1a9b      	subs	r3, r3, r2
 8005598:	42ab      	cmp	r3, r5
 800559a:	dc26      	bgt.n	80055ea <_printf_common+0x96>
 800559c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055a0:	6822      	ldr	r2, [r4, #0]
 80055a2:	3b00      	subs	r3, #0
 80055a4:	bf18      	it	ne
 80055a6:	2301      	movne	r3, #1
 80055a8:	0692      	lsls	r2, r2, #26
 80055aa:	d42b      	bmi.n	8005604 <_printf_common+0xb0>
 80055ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055b0:	4641      	mov	r1, r8
 80055b2:	4638      	mov	r0, r7
 80055b4:	47c8      	blx	r9
 80055b6:	3001      	adds	r0, #1
 80055b8:	d01e      	beq.n	80055f8 <_printf_common+0xa4>
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	6922      	ldr	r2, [r4, #16]
 80055be:	f003 0306 	and.w	r3, r3, #6
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	bf02      	ittt	eq
 80055c6:	68e5      	ldreq	r5, [r4, #12]
 80055c8:	6833      	ldreq	r3, [r6, #0]
 80055ca:	1aed      	subeq	r5, r5, r3
 80055cc:	68a3      	ldr	r3, [r4, #8]
 80055ce:	bf0c      	ite	eq
 80055d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055d4:	2500      	movne	r5, #0
 80055d6:	4293      	cmp	r3, r2
 80055d8:	bfc4      	itt	gt
 80055da:	1a9b      	subgt	r3, r3, r2
 80055dc:	18ed      	addgt	r5, r5, r3
 80055de:	2600      	movs	r6, #0
 80055e0:	341a      	adds	r4, #26
 80055e2:	42b5      	cmp	r5, r6
 80055e4:	d11a      	bne.n	800561c <_printf_common+0xc8>
 80055e6:	2000      	movs	r0, #0
 80055e8:	e008      	b.n	80055fc <_printf_common+0xa8>
 80055ea:	2301      	movs	r3, #1
 80055ec:	4652      	mov	r2, sl
 80055ee:	4641      	mov	r1, r8
 80055f0:	4638      	mov	r0, r7
 80055f2:	47c8      	blx	r9
 80055f4:	3001      	adds	r0, #1
 80055f6:	d103      	bne.n	8005600 <_printf_common+0xac>
 80055f8:	f04f 30ff 	mov.w	r0, #4294967295
 80055fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005600:	3501      	adds	r5, #1
 8005602:	e7c6      	b.n	8005592 <_printf_common+0x3e>
 8005604:	18e1      	adds	r1, r4, r3
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	2030      	movs	r0, #48	@ 0x30
 800560a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800560e:	4422      	add	r2, r4
 8005610:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005614:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005618:	3302      	adds	r3, #2
 800561a:	e7c7      	b.n	80055ac <_printf_common+0x58>
 800561c:	2301      	movs	r3, #1
 800561e:	4622      	mov	r2, r4
 8005620:	4641      	mov	r1, r8
 8005622:	4638      	mov	r0, r7
 8005624:	47c8      	blx	r9
 8005626:	3001      	adds	r0, #1
 8005628:	d0e6      	beq.n	80055f8 <_printf_common+0xa4>
 800562a:	3601      	adds	r6, #1
 800562c:	e7d9      	b.n	80055e2 <_printf_common+0x8e>
	...

08005630 <_printf_i>:
 8005630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005634:	7e0f      	ldrb	r7, [r1, #24]
 8005636:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005638:	2f78      	cmp	r7, #120	@ 0x78
 800563a:	4691      	mov	r9, r2
 800563c:	4680      	mov	r8, r0
 800563e:	460c      	mov	r4, r1
 8005640:	469a      	mov	sl, r3
 8005642:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005646:	d807      	bhi.n	8005658 <_printf_i+0x28>
 8005648:	2f62      	cmp	r7, #98	@ 0x62
 800564a:	d80a      	bhi.n	8005662 <_printf_i+0x32>
 800564c:	2f00      	cmp	r7, #0
 800564e:	f000 80d2 	beq.w	80057f6 <_printf_i+0x1c6>
 8005652:	2f58      	cmp	r7, #88	@ 0x58
 8005654:	f000 80b9 	beq.w	80057ca <_printf_i+0x19a>
 8005658:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800565c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005660:	e03a      	b.n	80056d8 <_printf_i+0xa8>
 8005662:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005666:	2b15      	cmp	r3, #21
 8005668:	d8f6      	bhi.n	8005658 <_printf_i+0x28>
 800566a:	a101      	add	r1, pc, #4	@ (adr r1, 8005670 <_printf_i+0x40>)
 800566c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005670:	080056c9 	.word	0x080056c9
 8005674:	080056dd 	.word	0x080056dd
 8005678:	08005659 	.word	0x08005659
 800567c:	08005659 	.word	0x08005659
 8005680:	08005659 	.word	0x08005659
 8005684:	08005659 	.word	0x08005659
 8005688:	080056dd 	.word	0x080056dd
 800568c:	08005659 	.word	0x08005659
 8005690:	08005659 	.word	0x08005659
 8005694:	08005659 	.word	0x08005659
 8005698:	08005659 	.word	0x08005659
 800569c:	080057dd 	.word	0x080057dd
 80056a0:	08005707 	.word	0x08005707
 80056a4:	08005797 	.word	0x08005797
 80056a8:	08005659 	.word	0x08005659
 80056ac:	08005659 	.word	0x08005659
 80056b0:	080057ff 	.word	0x080057ff
 80056b4:	08005659 	.word	0x08005659
 80056b8:	08005707 	.word	0x08005707
 80056bc:	08005659 	.word	0x08005659
 80056c0:	08005659 	.word	0x08005659
 80056c4:	0800579f 	.word	0x0800579f
 80056c8:	6833      	ldr	r3, [r6, #0]
 80056ca:	1d1a      	adds	r2, r3, #4
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6032      	str	r2, [r6, #0]
 80056d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056d8:	2301      	movs	r3, #1
 80056da:	e09d      	b.n	8005818 <_printf_i+0x1e8>
 80056dc:	6833      	ldr	r3, [r6, #0]
 80056de:	6820      	ldr	r0, [r4, #0]
 80056e0:	1d19      	adds	r1, r3, #4
 80056e2:	6031      	str	r1, [r6, #0]
 80056e4:	0606      	lsls	r6, r0, #24
 80056e6:	d501      	bpl.n	80056ec <_printf_i+0xbc>
 80056e8:	681d      	ldr	r5, [r3, #0]
 80056ea:	e003      	b.n	80056f4 <_printf_i+0xc4>
 80056ec:	0645      	lsls	r5, r0, #25
 80056ee:	d5fb      	bpl.n	80056e8 <_printf_i+0xb8>
 80056f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80056f4:	2d00      	cmp	r5, #0
 80056f6:	da03      	bge.n	8005700 <_printf_i+0xd0>
 80056f8:	232d      	movs	r3, #45	@ 0x2d
 80056fa:	426d      	negs	r5, r5
 80056fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005700:	4859      	ldr	r0, [pc, #356]	@ (8005868 <_printf_i+0x238>)
 8005702:	230a      	movs	r3, #10
 8005704:	e011      	b.n	800572a <_printf_i+0xfa>
 8005706:	6821      	ldr	r1, [r4, #0]
 8005708:	6833      	ldr	r3, [r6, #0]
 800570a:	0608      	lsls	r0, r1, #24
 800570c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005710:	d402      	bmi.n	8005718 <_printf_i+0xe8>
 8005712:	0649      	lsls	r1, r1, #25
 8005714:	bf48      	it	mi
 8005716:	b2ad      	uxthmi	r5, r5
 8005718:	2f6f      	cmp	r7, #111	@ 0x6f
 800571a:	4853      	ldr	r0, [pc, #332]	@ (8005868 <_printf_i+0x238>)
 800571c:	6033      	str	r3, [r6, #0]
 800571e:	bf14      	ite	ne
 8005720:	230a      	movne	r3, #10
 8005722:	2308      	moveq	r3, #8
 8005724:	2100      	movs	r1, #0
 8005726:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800572a:	6866      	ldr	r6, [r4, #4]
 800572c:	60a6      	str	r6, [r4, #8]
 800572e:	2e00      	cmp	r6, #0
 8005730:	bfa2      	ittt	ge
 8005732:	6821      	ldrge	r1, [r4, #0]
 8005734:	f021 0104 	bicge.w	r1, r1, #4
 8005738:	6021      	strge	r1, [r4, #0]
 800573a:	b90d      	cbnz	r5, 8005740 <_printf_i+0x110>
 800573c:	2e00      	cmp	r6, #0
 800573e:	d04b      	beq.n	80057d8 <_printf_i+0x1a8>
 8005740:	4616      	mov	r6, r2
 8005742:	fbb5 f1f3 	udiv	r1, r5, r3
 8005746:	fb03 5711 	mls	r7, r3, r1, r5
 800574a:	5dc7      	ldrb	r7, [r0, r7]
 800574c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005750:	462f      	mov	r7, r5
 8005752:	42bb      	cmp	r3, r7
 8005754:	460d      	mov	r5, r1
 8005756:	d9f4      	bls.n	8005742 <_printf_i+0x112>
 8005758:	2b08      	cmp	r3, #8
 800575a:	d10b      	bne.n	8005774 <_printf_i+0x144>
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	07df      	lsls	r7, r3, #31
 8005760:	d508      	bpl.n	8005774 <_printf_i+0x144>
 8005762:	6923      	ldr	r3, [r4, #16]
 8005764:	6861      	ldr	r1, [r4, #4]
 8005766:	4299      	cmp	r1, r3
 8005768:	bfde      	ittt	le
 800576a:	2330      	movle	r3, #48	@ 0x30
 800576c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005770:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005774:	1b92      	subs	r2, r2, r6
 8005776:	6122      	str	r2, [r4, #16]
 8005778:	f8cd a000 	str.w	sl, [sp]
 800577c:	464b      	mov	r3, r9
 800577e:	aa03      	add	r2, sp, #12
 8005780:	4621      	mov	r1, r4
 8005782:	4640      	mov	r0, r8
 8005784:	f7ff fee6 	bl	8005554 <_printf_common>
 8005788:	3001      	adds	r0, #1
 800578a:	d14a      	bne.n	8005822 <_printf_i+0x1f2>
 800578c:	f04f 30ff 	mov.w	r0, #4294967295
 8005790:	b004      	add	sp, #16
 8005792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	f043 0320 	orr.w	r3, r3, #32
 800579c:	6023      	str	r3, [r4, #0]
 800579e:	4833      	ldr	r0, [pc, #204]	@ (800586c <_printf_i+0x23c>)
 80057a0:	2778      	movs	r7, #120	@ 0x78
 80057a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	6831      	ldr	r1, [r6, #0]
 80057aa:	061f      	lsls	r7, r3, #24
 80057ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80057b0:	d402      	bmi.n	80057b8 <_printf_i+0x188>
 80057b2:	065f      	lsls	r7, r3, #25
 80057b4:	bf48      	it	mi
 80057b6:	b2ad      	uxthmi	r5, r5
 80057b8:	6031      	str	r1, [r6, #0]
 80057ba:	07d9      	lsls	r1, r3, #31
 80057bc:	bf44      	itt	mi
 80057be:	f043 0320 	orrmi.w	r3, r3, #32
 80057c2:	6023      	strmi	r3, [r4, #0]
 80057c4:	b11d      	cbz	r5, 80057ce <_printf_i+0x19e>
 80057c6:	2310      	movs	r3, #16
 80057c8:	e7ac      	b.n	8005724 <_printf_i+0xf4>
 80057ca:	4827      	ldr	r0, [pc, #156]	@ (8005868 <_printf_i+0x238>)
 80057cc:	e7e9      	b.n	80057a2 <_printf_i+0x172>
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	f023 0320 	bic.w	r3, r3, #32
 80057d4:	6023      	str	r3, [r4, #0]
 80057d6:	e7f6      	b.n	80057c6 <_printf_i+0x196>
 80057d8:	4616      	mov	r6, r2
 80057da:	e7bd      	b.n	8005758 <_printf_i+0x128>
 80057dc:	6833      	ldr	r3, [r6, #0]
 80057de:	6825      	ldr	r5, [r4, #0]
 80057e0:	6961      	ldr	r1, [r4, #20]
 80057e2:	1d18      	adds	r0, r3, #4
 80057e4:	6030      	str	r0, [r6, #0]
 80057e6:	062e      	lsls	r6, r5, #24
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	d501      	bpl.n	80057f0 <_printf_i+0x1c0>
 80057ec:	6019      	str	r1, [r3, #0]
 80057ee:	e002      	b.n	80057f6 <_printf_i+0x1c6>
 80057f0:	0668      	lsls	r0, r5, #25
 80057f2:	d5fb      	bpl.n	80057ec <_printf_i+0x1bc>
 80057f4:	8019      	strh	r1, [r3, #0]
 80057f6:	2300      	movs	r3, #0
 80057f8:	6123      	str	r3, [r4, #16]
 80057fa:	4616      	mov	r6, r2
 80057fc:	e7bc      	b.n	8005778 <_printf_i+0x148>
 80057fe:	6833      	ldr	r3, [r6, #0]
 8005800:	1d1a      	adds	r2, r3, #4
 8005802:	6032      	str	r2, [r6, #0]
 8005804:	681e      	ldr	r6, [r3, #0]
 8005806:	6862      	ldr	r2, [r4, #4]
 8005808:	2100      	movs	r1, #0
 800580a:	4630      	mov	r0, r6
 800580c:	f7fa fce8 	bl	80001e0 <memchr>
 8005810:	b108      	cbz	r0, 8005816 <_printf_i+0x1e6>
 8005812:	1b80      	subs	r0, r0, r6
 8005814:	6060      	str	r0, [r4, #4]
 8005816:	6863      	ldr	r3, [r4, #4]
 8005818:	6123      	str	r3, [r4, #16]
 800581a:	2300      	movs	r3, #0
 800581c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005820:	e7aa      	b.n	8005778 <_printf_i+0x148>
 8005822:	6923      	ldr	r3, [r4, #16]
 8005824:	4632      	mov	r2, r6
 8005826:	4649      	mov	r1, r9
 8005828:	4640      	mov	r0, r8
 800582a:	47d0      	blx	sl
 800582c:	3001      	adds	r0, #1
 800582e:	d0ad      	beq.n	800578c <_printf_i+0x15c>
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	079b      	lsls	r3, r3, #30
 8005834:	d413      	bmi.n	800585e <_printf_i+0x22e>
 8005836:	68e0      	ldr	r0, [r4, #12]
 8005838:	9b03      	ldr	r3, [sp, #12]
 800583a:	4298      	cmp	r0, r3
 800583c:	bfb8      	it	lt
 800583e:	4618      	movlt	r0, r3
 8005840:	e7a6      	b.n	8005790 <_printf_i+0x160>
 8005842:	2301      	movs	r3, #1
 8005844:	4632      	mov	r2, r6
 8005846:	4649      	mov	r1, r9
 8005848:	4640      	mov	r0, r8
 800584a:	47d0      	blx	sl
 800584c:	3001      	adds	r0, #1
 800584e:	d09d      	beq.n	800578c <_printf_i+0x15c>
 8005850:	3501      	adds	r5, #1
 8005852:	68e3      	ldr	r3, [r4, #12]
 8005854:	9903      	ldr	r1, [sp, #12]
 8005856:	1a5b      	subs	r3, r3, r1
 8005858:	42ab      	cmp	r3, r5
 800585a:	dcf2      	bgt.n	8005842 <_printf_i+0x212>
 800585c:	e7eb      	b.n	8005836 <_printf_i+0x206>
 800585e:	2500      	movs	r5, #0
 8005860:	f104 0619 	add.w	r6, r4, #25
 8005864:	e7f5      	b.n	8005852 <_printf_i+0x222>
 8005866:	bf00      	nop
 8005868:	08005d85 	.word	0x08005d85
 800586c:	08005d96 	.word	0x08005d96

08005870 <__sflush_r>:
 8005870:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005878:	0716      	lsls	r6, r2, #28
 800587a:	4605      	mov	r5, r0
 800587c:	460c      	mov	r4, r1
 800587e:	d454      	bmi.n	800592a <__sflush_r+0xba>
 8005880:	684b      	ldr	r3, [r1, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	dc02      	bgt.n	800588c <__sflush_r+0x1c>
 8005886:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005888:	2b00      	cmp	r3, #0
 800588a:	dd48      	ble.n	800591e <__sflush_r+0xae>
 800588c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800588e:	2e00      	cmp	r6, #0
 8005890:	d045      	beq.n	800591e <__sflush_r+0xae>
 8005892:	2300      	movs	r3, #0
 8005894:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005898:	682f      	ldr	r7, [r5, #0]
 800589a:	6a21      	ldr	r1, [r4, #32]
 800589c:	602b      	str	r3, [r5, #0]
 800589e:	d030      	beq.n	8005902 <__sflush_r+0x92>
 80058a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80058a2:	89a3      	ldrh	r3, [r4, #12]
 80058a4:	0759      	lsls	r1, r3, #29
 80058a6:	d505      	bpl.n	80058b4 <__sflush_r+0x44>
 80058a8:	6863      	ldr	r3, [r4, #4]
 80058aa:	1ad2      	subs	r2, r2, r3
 80058ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80058ae:	b10b      	cbz	r3, 80058b4 <__sflush_r+0x44>
 80058b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80058b2:	1ad2      	subs	r2, r2, r3
 80058b4:	2300      	movs	r3, #0
 80058b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80058b8:	6a21      	ldr	r1, [r4, #32]
 80058ba:	4628      	mov	r0, r5
 80058bc:	47b0      	blx	r6
 80058be:	1c43      	adds	r3, r0, #1
 80058c0:	89a3      	ldrh	r3, [r4, #12]
 80058c2:	d106      	bne.n	80058d2 <__sflush_r+0x62>
 80058c4:	6829      	ldr	r1, [r5, #0]
 80058c6:	291d      	cmp	r1, #29
 80058c8:	d82b      	bhi.n	8005922 <__sflush_r+0xb2>
 80058ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005974 <__sflush_r+0x104>)
 80058cc:	410a      	asrs	r2, r1
 80058ce:	07d6      	lsls	r6, r2, #31
 80058d0:	d427      	bmi.n	8005922 <__sflush_r+0xb2>
 80058d2:	2200      	movs	r2, #0
 80058d4:	6062      	str	r2, [r4, #4]
 80058d6:	04d9      	lsls	r1, r3, #19
 80058d8:	6922      	ldr	r2, [r4, #16]
 80058da:	6022      	str	r2, [r4, #0]
 80058dc:	d504      	bpl.n	80058e8 <__sflush_r+0x78>
 80058de:	1c42      	adds	r2, r0, #1
 80058e0:	d101      	bne.n	80058e6 <__sflush_r+0x76>
 80058e2:	682b      	ldr	r3, [r5, #0]
 80058e4:	b903      	cbnz	r3, 80058e8 <__sflush_r+0x78>
 80058e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80058e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058ea:	602f      	str	r7, [r5, #0]
 80058ec:	b1b9      	cbz	r1, 800591e <__sflush_r+0xae>
 80058ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058f2:	4299      	cmp	r1, r3
 80058f4:	d002      	beq.n	80058fc <__sflush_r+0x8c>
 80058f6:	4628      	mov	r0, r5
 80058f8:	f7ff fbf2 	bl	80050e0 <_free_r>
 80058fc:	2300      	movs	r3, #0
 80058fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8005900:	e00d      	b.n	800591e <__sflush_r+0xae>
 8005902:	2301      	movs	r3, #1
 8005904:	4628      	mov	r0, r5
 8005906:	47b0      	blx	r6
 8005908:	4602      	mov	r2, r0
 800590a:	1c50      	adds	r0, r2, #1
 800590c:	d1c9      	bne.n	80058a2 <__sflush_r+0x32>
 800590e:	682b      	ldr	r3, [r5, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0c6      	beq.n	80058a2 <__sflush_r+0x32>
 8005914:	2b1d      	cmp	r3, #29
 8005916:	d001      	beq.n	800591c <__sflush_r+0xac>
 8005918:	2b16      	cmp	r3, #22
 800591a:	d11e      	bne.n	800595a <__sflush_r+0xea>
 800591c:	602f      	str	r7, [r5, #0]
 800591e:	2000      	movs	r0, #0
 8005920:	e022      	b.n	8005968 <__sflush_r+0xf8>
 8005922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005926:	b21b      	sxth	r3, r3
 8005928:	e01b      	b.n	8005962 <__sflush_r+0xf2>
 800592a:	690f      	ldr	r7, [r1, #16]
 800592c:	2f00      	cmp	r7, #0
 800592e:	d0f6      	beq.n	800591e <__sflush_r+0xae>
 8005930:	0793      	lsls	r3, r2, #30
 8005932:	680e      	ldr	r6, [r1, #0]
 8005934:	bf08      	it	eq
 8005936:	694b      	ldreq	r3, [r1, #20]
 8005938:	600f      	str	r7, [r1, #0]
 800593a:	bf18      	it	ne
 800593c:	2300      	movne	r3, #0
 800593e:	eba6 0807 	sub.w	r8, r6, r7
 8005942:	608b      	str	r3, [r1, #8]
 8005944:	f1b8 0f00 	cmp.w	r8, #0
 8005948:	dde9      	ble.n	800591e <__sflush_r+0xae>
 800594a:	6a21      	ldr	r1, [r4, #32]
 800594c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800594e:	4643      	mov	r3, r8
 8005950:	463a      	mov	r2, r7
 8005952:	4628      	mov	r0, r5
 8005954:	47b0      	blx	r6
 8005956:	2800      	cmp	r0, #0
 8005958:	dc08      	bgt.n	800596c <__sflush_r+0xfc>
 800595a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800595e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005962:	81a3      	strh	r3, [r4, #12]
 8005964:	f04f 30ff 	mov.w	r0, #4294967295
 8005968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800596c:	4407      	add	r7, r0
 800596e:	eba8 0800 	sub.w	r8, r8, r0
 8005972:	e7e7      	b.n	8005944 <__sflush_r+0xd4>
 8005974:	dfbffffe 	.word	0xdfbffffe

08005978 <_fflush_r>:
 8005978:	b538      	push	{r3, r4, r5, lr}
 800597a:	690b      	ldr	r3, [r1, #16]
 800597c:	4605      	mov	r5, r0
 800597e:	460c      	mov	r4, r1
 8005980:	b913      	cbnz	r3, 8005988 <_fflush_r+0x10>
 8005982:	2500      	movs	r5, #0
 8005984:	4628      	mov	r0, r5
 8005986:	bd38      	pop	{r3, r4, r5, pc}
 8005988:	b118      	cbz	r0, 8005992 <_fflush_r+0x1a>
 800598a:	6a03      	ldr	r3, [r0, #32]
 800598c:	b90b      	cbnz	r3, 8005992 <_fflush_r+0x1a>
 800598e:	f7ff fa77 	bl	8004e80 <__sinit>
 8005992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0f3      	beq.n	8005982 <_fflush_r+0xa>
 800599a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800599c:	07d0      	lsls	r0, r2, #31
 800599e:	d404      	bmi.n	80059aa <_fflush_r+0x32>
 80059a0:	0599      	lsls	r1, r3, #22
 80059a2:	d402      	bmi.n	80059aa <_fflush_r+0x32>
 80059a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059a6:	f7ff fb8a 	bl	80050be <__retarget_lock_acquire_recursive>
 80059aa:	4628      	mov	r0, r5
 80059ac:	4621      	mov	r1, r4
 80059ae:	f7ff ff5f 	bl	8005870 <__sflush_r>
 80059b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059b4:	07da      	lsls	r2, r3, #31
 80059b6:	4605      	mov	r5, r0
 80059b8:	d4e4      	bmi.n	8005984 <_fflush_r+0xc>
 80059ba:	89a3      	ldrh	r3, [r4, #12]
 80059bc:	059b      	lsls	r3, r3, #22
 80059be:	d4e1      	bmi.n	8005984 <_fflush_r+0xc>
 80059c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059c2:	f7ff fb7d 	bl	80050c0 <__retarget_lock_release_recursive>
 80059c6:	e7dd      	b.n	8005984 <_fflush_r+0xc>

080059c8 <_putc_r>:
 80059c8:	b570      	push	{r4, r5, r6, lr}
 80059ca:	460d      	mov	r5, r1
 80059cc:	4614      	mov	r4, r2
 80059ce:	4606      	mov	r6, r0
 80059d0:	b118      	cbz	r0, 80059da <_putc_r+0x12>
 80059d2:	6a03      	ldr	r3, [r0, #32]
 80059d4:	b90b      	cbnz	r3, 80059da <_putc_r+0x12>
 80059d6:	f7ff fa53 	bl	8004e80 <__sinit>
 80059da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059dc:	07d8      	lsls	r0, r3, #31
 80059de:	d405      	bmi.n	80059ec <_putc_r+0x24>
 80059e0:	89a3      	ldrh	r3, [r4, #12]
 80059e2:	0599      	lsls	r1, r3, #22
 80059e4:	d402      	bmi.n	80059ec <_putc_r+0x24>
 80059e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059e8:	f7ff fb69 	bl	80050be <__retarget_lock_acquire_recursive>
 80059ec:	68a3      	ldr	r3, [r4, #8]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	60a3      	str	r3, [r4, #8]
 80059f4:	da05      	bge.n	8005a02 <_putc_r+0x3a>
 80059f6:	69a2      	ldr	r2, [r4, #24]
 80059f8:	4293      	cmp	r3, r2
 80059fa:	db12      	blt.n	8005a22 <_putc_r+0x5a>
 80059fc:	b2eb      	uxtb	r3, r5
 80059fe:	2b0a      	cmp	r3, #10
 8005a00:	d00f      	beq.n	8005a22 <_putc_r+0x5a>
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	6022      	str	r2, [r4, #0]
 8005a08:	701d      	strb	r5, [r3, #0]
 8005a0a:	b2ed      	uxtb	r5, r5
 8005a0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a0e:	07da      	lsls	r2, r3, #31
 8005a10:	d405      	bmi.n	8005a1e <_putc_r+0x56>
 8005a12:	89a3      	ldrh	r3, [r4, #12]
 8005a14:	059b      	lsls	r3, r3, #22
 8005a16:	d402      	bmi.n	8005a1e <_putc_r+0x56>
 8005a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a1a:	f7ff fb51 	bl	80050c0 <__retarget_lock_release_recursive>
 8005a1e:	4628      	mov	r0, r5
 8005a20:	bd70      	pop	{r4, r5, r6, pc}
 8005a22:	4629      	mov	r1, r5
 8005a24:	4622      	mov	r2, r4
 8005a26:	4630      	mov	r0, r6
 8005a28:	f000 f802 	bl	8005a30 <__swbuf_r>
 8005a2c:	4605      	mov	r5, r0
 8005a2e:	e7ed      	b.n	8005a0c <_putc_r+0x44>

08005a30 <__swbuf_r>:
 8005a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a32:	460e      	mov	r6, r1
 8005a34:	4614      	mov	r4, r2
 8005a36:	4605      	mov	r5, r0
 8005a38:	b118      	cbz	r0, 8005a42 <__swbuf_r+0x12>
 8005a3a:	6a03      	ldr	r3, [r0, #32]
 8005a3c:	b90b      	cbnz	r3, 8005a42 <__swbuf_r+0x12>
 8005a3e:	f7ff fa1f 	bl	8004e80 <__sinit>
 8005a42:	69a3      	ldr	r3, [r4, #24]
 8005a44:	60a3      	str	r3, [r4, #8]
 8005a46:	89a3      	ldrh	r3, [r4, #12]
 8005a48:	071a      	lsls	r2, r3, #28
 8005a4a:	d501      	bpl.n	8005a50 <__swbuf_r+0x20>
 8005a4c:	6923      	ldr	r3, [r4, #16]
 8005a4e:	b943      	cbnz	r3, 8005a62 <__swbuf_r+0x32>
 8005a50:	4621      	mov	r1, r4
 8005a52:	4628      	mov	r0, r5
 8005a54:	f000 f82a 	bl	8005aac <__swsetup_r>
 8005a58:	b118      	cbz	r0, 8005a62 <__swbuf_r+0x32>
 8005a5a:	f04f 37ff 	mov.w	r7, #4294967295
 8005a5e:	4638      	mov	r0, r7
 8005a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	6922      	ldr	r2, [r4, #16]
 8005a66:	1a98      	subs	r0, r3, r2
 8005a68:	6963      	ldr	r3, [r4, #20]
 8005a6a:	b2f6      	uxtb	r6, r6
 8005a6c:	4283      	cmp	r3, r0
 8005a6e:	4637      	mov	r7, r6
 8005a70:	dc05      	bgt.n	8005a7e <__swbuf_r+0x4e>
 8005a72:	4621      	mov	r1, r4
 8005a74:	4628      	mov	r0, r5
 8005a76:	f7ff ff7f 	bl	8005978 <_fflush_r>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	d1ed      	bne.n	8005a5a <__swbuf_r+0x2a>
 8005a7e:	68a3      	ldr	r3, [r4, #8]
 8005a80:	3b01      	subs	r3, #1
 8005a82:	60a3      	str	r3, [r4, #8]
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	6022      	str	r2, [r4, #0]
 8005a8a:	701e      	strb	r6, [r3, #0]
 8005a8c:	6962      	ldr	r2, [r4, #20]
 8005a8e:	1c43      	adds	r3, r0, #1
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d004      	beq.n	8005a9e <__swbuf_r+0x6e>
 8005a94:	89a3      	ldrh	r3, [r4, #12]
 8005a96:	07db      	lsls	r3, r3, #31
 8005a98:	d5e1      	bpl.n	8005a5e <__swbuf_r+0x2e>
 8005a9a:	2e0a      	cmp	r6, #10
 8005a9c:	d1df      	bne.n	8005a5e <__swbuf_r+0x2e>
 8005a9e:	4621      	mov	r1, r4
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	f7ff ff69 	bl	8005978 <_fflush_r>
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	d0d9      	beq.n	8005a5e <__swbuf_r+0x2e>
 8005aaa:	e7d6      	b.n	8005a5a <__swbuf_r+0x2a>

08005aac <__swsetup_r>:
 8005aac:	b538      	push	{r3, r4, r5, lr}
 8005aae:	4b29      	ldr	r3, [pc, #164]	@ (8005b54 <__swsetup_r+0xa8>)
 8005ab0:	4605      	mov	r5, r0
 8005ab2:	6818      	ldr	r0, [r3, #0]
 8005ab4:	460c      	mov	r4, r1
 8005ab6:	b118      	cbz	r0, 8005ac0 <__swsetup_r+0x14>
 8005ab8:	6a03      	ldr	r3, [r0, #32]
 8005aba:	b90b      	cbnz	r3, 8005ac0 <__swsetup_r+0x14>
 8005abc:	f7ff f9e0 	bl	8004e80 <__sinit>
 8005ac0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ac4:	0719      	lsls	r1, r3, #28
 8005ac6:	d422      	bmi.n	8005b0e <__swsetup_r+0x62>
 8005ac8:	06da      	lsls	r2, r3, #27
 8005aca:	d407      	bmi.n	8005adc <__swsetup_r+0x30>
 8005acc:	2209      	movs	r2, #9
 8005ace:	602a      	str	r2, [r5, #0]
 8005ad0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ad4:	81a3      	strh	r3, [r4, #12]
 8005ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8005ada:	e033      	b.n	8005b44 <__swsetup_r+0x98>
 8005adc:	0758      	lsls	r0, r3, #29
 8005ade:	d512      	bpl.n	8005b06 <__swsetup_r+0x5a>
 8005ae0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ae2:	b141      	cbz	r1, 8005af6 <__swsetup_r+0x4a>
 8005ae4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ae8:	4299      	cmp	r1, r3
 8005aea:	d002      	beq.n	8005af2 <__swsetup_r+0x46>
 8005aec:	4628      	mov	r0, r5
 8005aee:	f7ff faf7 	bl	80050e0 <_free_r>
 8005af2:	2300      	movs	r3, #0
 8005af4:	6363      	str	r3, [r4, #52]	@ 0x34
 8005af6:	89a3      	ldrh	r3, [r4, #12]
 8005af8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005afc:	81a3      	strh	r3, [r4, #12]
 8005afe:	2300      	movs	r3, #0
 8005b00:	6063      	str	r3, [r4, #4]
 8005b02:	6923      	ldr	r3, [r4, #16]
 8005b04:	6023      	str	r3, [r4, #0]
 8005b06:	89a3      	ldrh	r3, [r4, #12]
 8005b08:	f043 0308 	orr.w	r3, r3, #8
 8005b0c:	81a3      	strh	r3, [r4, #12]
 8005b0e:	6923      	ldr	r3, [r4, #16]
 8005b10:	b94b      	cbnz	r3, 8005b26 <__swsetup_r+0x7a>
 8005b12:	89a3      	ldrh	r3, [r4, #12]
 8005b14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005b18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b1c:	d003      	beq.n	8005b26 <__swsetup_r+0x7a>
 8005b1e:	4621      	mov	r1, r4
 8005b20:	4628      	mov	r0, r5
 8005b22:	f000 f84f 	bl	8005bc4 <__smakebuf_r>
 8005b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b2a:	f013 0201 	ands.w	r2, r3, #1
 8005b2e:	d00a      	beq.n	8005b46 <__swsetup_r+0x9a>
 8005b30:	2200      	movs	r2, #0
 8005b32:	60a2      	str	r2, [r4, #8]
 8005b34:	6962      	ldr	r2, [r4, #20]
 8005b36:	4252      	negs	r2, r2
 8005b38:	61a2      	str	r2, [r4, #24]
 8005b3a:	6922      	ldr	r2, [r4, #16]
 8005b3c:	b942      	cbnz	r2, 8005b50 <__swsetup_r+0xa4>
 8005b3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005b42:	d1c5      	bne.n	8005ad0 <__swsetup_r+0x24>
 8005b44:	bd38      	pop	{r3, r4, r5, pc}
 8005b46:	0799      	lsls	r1, r3, #30
 8005b48:	bf58      	it	pl
 8005b4a:	6962      	ldrpl	r2, [r4, #20]
 8005b4c:	60a2      	str	r2, [r4, #8]
 8005b4e:	e7f4      	b.n	8005b3a <__swsetup_r+0x8e>
 8005b50:	2000      	movs	r0, #0
 8005b52:	e7f7      	b.n	8005b44 <__swsetup_r+0x98>
 8005b54:	20000020 	.word	0x20000020

08005b58 <_sbrk_r>:
 8005b58:	b538      	push	{r3, r4, r5, lr}
 8005b5a:	4d06      	ldr	r5, [pc, #24]	@ (8005b74 <_sbrk_r+0x1c>)
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	4604      	mov	r4, r0
 8005b60:	4608      	mov	r0, r1
 8005b62:	602b      	str	r3, [r5, #0]
 8005b64:	f7fb face 	bl	8001104 <_sbrk>
 8005b68:	1c43      	adds	r3, r0, #1
 8005b6a:	d102      	bne.n	8005b72 <_sbrk_r+0x1a>
 8005b6c:	682b      	ldr	r3, [r5, #0]
 8005b6e:	b103      	cbz	r3, 8005b72 <_sbrk_r+0x1a>
 8005b70:	6023      	str	r3, [r4, #0]
 8005b72:	bd38      	pop	{r3, r4, r5, pc}
 8005b74:	200005f8 	.word	0x200005f8

08005b78 <__swhatbuf_r>:
 8005b78:	b570      	push	{r4, r5, r6, lr}
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b80:	2900      	cmp	r1, #0
 8005b82:	b096      	sub	sp, #88	@ 0x58
 8005b84:	4615      	mov	r5, r2
 8005b86:	461e      	mov	r6, r3
 8005b88:	da0d      	bge.n	8005ba6 <__swhatbuf_r+0x2e>
 8005b8a:	89a3      	ldrh	r3, [r4, #12]
 8005b8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005b90:	f04f 0100 	mov.w	r1, #0
 8005b94:	bf14      	ite	ne
 8005b96:	2340      	movne	r3, #64	@ 0x40
 8005b98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	6031      	str	r1, [r6, #0]
 8005ba0:	602b      	str	r3, [r5, #0]
 8005ba2:	b016      	add	sp, #88	@ 0x58
 8005ba4:	bd70      	pop	{r4, r5, r6, pc}
 8005ba6:	466a      	mov	r2, sp
 8005ba8:	f000 f848 	bl	8005c3c <_fstat_r>
 8005bac:	2800      	cmp	r0, #0
 8005bae:	dbec      	blt.n	8005b8a <__swhatbuf_r+0x12>
 8005bb0:	9901      	ldr	r1, [sp, #4]
 8005bb2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005bb6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005bba:	4259      	negs	r1, r3
 8005bbc:	4159      	adcs	r1, r3
 8005bbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bc2:	e7eb      	b.n	8005b9c <__swhatbuf_r+0x24>

08005bc4 <__smakebuf_r>:
 8005bc4:	898b      	ldrh	r3, [r1, #12]
 8005bc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bc8:	079d      	lsls	r5, r3, #30
 8005bca:	4606      	mov	r6, r0
 8005bcc:	460c      	mov	r4, r1
 8005bce:	d507      	bpl.n	8005be0 <__smakebuf_r+0x1c>
 8005bd0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	6123      	str	r3, [r4, #16]
 8005bd8:	2301      	movs	r3, #1
 8005bda:	6163      	str	r3, [r4, #20]
 8005bdc:	b003      	add	sp, #12
 8005bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005be0:	ab01      	add	r3, sp, #4
 8005be2:	466a      	mov	r2, sp
 8005be4:	f7ff ffc8 	bl	8005b78 <__swhatbuf_r>
 8005be8:	9f00      	ldr	r7, [sp, #0]
 8005bea:	4605      	mov	r5, r0
 8005bec:	4639      	mov	r1, r7
 8005bee:	4630      	mov	r0, r6
 8005bf0:	f7ff fae2 	bl	80051b8 <_malloc_r>
 8005bf4:	b948      	cbnz	r0, 8005c0a <__smakebuf_r+0x46>
 8005bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bfa:	059a      	lsls	r2, r3, #22
 8005bfc:	d4ee      	bmi.n	8005bdc <__smakebuf_r+0x18>
 8005bfe:	f023 0303 	bic.w	r3, r3, #3
 8005c02:	f043 0302 	orr.w	r3, r3, #2
 8005c06:	81a3      	strh	r3, [r4, #12]
 8005c08:	e7e2      	b.n	8005bd0 <__smakebuf_r+0xc>
 8005c0a:	89a3      	ldrh	r3, [r4, #12]
 8005c0c:	6020      	str	r0, [r4, #0]
 8005c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c12:	81a3      	strh	r3, [r4, #12]
 8005c14:	9b01      	ldr	r3, [sp, #4]
 8005c16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c1a:	b15b      	cbz	r3, 8005c34 <__smakebuf_r+0x70>
 8005c1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c20:	4630      	mov	r0, r6
 8005c22:	f000 f81d 	bl	8005c60 <_isatty_r>
 8005c26:	b128      	cbz	r0, 8005c34 <__smakebuf_r+0x70>
 8005c28:	89a3      	ldrh	r3, [r4, #12]
 8005c2a:	f023 0303 	bic.w	r3, r3, #3
 8005c2e:	f043 0301 	orr.w	r3, r3, #1
 8005c32:	81a3      	strh	r3, [r4, #12]
 8005c34:	89a3      	ldrh	r3, [r4, #12]
 8005c36:	431d      	orrs	r5, r3
 8005c38:	81a5      	strh	r5, [r4, #12]
 8005c3a:	e7cf      	b.n	8005bdc <__smakebuf_r+0x18>

08005c3c <_fstat_r>:
 8005c3c:	b538      	push	{r3, r4, r5, lr}
 8005c3e:	4d07      	ldr	r5, [pc, #28]	@ (8005c5c <_fstat_r+0x20>)
 8005c40:	2300      	movs	r3, #0
 8005c42:	4604      	mov	r4, r0
 8005c44:	4608      	mov	r0, r1
 8005c46:	4611      	mov	r1, r2
 8005c48:	602b      	str	r3, [r5, #0]
 8005c4a:	f7fb fa32 	bl	80010b2 <_fstat>
 8005c4e:	1c43      	adds	r3, r0, #1
 8005c50:	d102      	bne.n	8005c58 <_fstat_r+0x1c>
 8005c52:	682b      	ldr	r3, [r5, #0]
 8005c54:	b103      	cbz	r3, 8005c58 <_fstat_r+0x1c>
 8005c56:	6023      	str	r3, [r4, #0]
 8005c58:	bd38      	pop	{r3, r4, r5, pc}
 8005c5a:	bf00      	nop
 8005c5c:	200005f8 	.word	0x200005f8

08005c60 <_isatty_r>:
 8005c60:	b538      	push	{r3, r4, r5, lr}
 8005c62:	4d06      	ldr	r5, [pc, #24]	@ (8005c7c <_isatty_r+0x1c>)
 8005c64:	2300      	movs	r3, #0
 8005c66:	4604      	mov	r4, r0
 8005c68:	4608      	mov	r0, r1
 8005c6a:	602b      	str	r3, [r5, #0]
 8005c6c:	f7fb fa31 	bl	80010d2 <_isatty>
 8005c70:	1c43      	adds	r3, r0, #1
 8005c72:	d102      	bne.n	8005c7a <_isatty_r+0x1a>
 8005c74:	682b      	ldr	r3, [r5, #0]
 8005c76:	b103      	cbz	r3, 8005c7a <_isatty_r+0x1a>
 8005c78:	6023      	str	r3, [r4, #0]
 8005c7a:	bd38      	pop	{r3, r4, r5, pc}
 8005c7c:	200005f8 	.word	0x200005f8

08005c80 <_init>:
 8005c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c82:	bf00      	nop
 8005c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c86:	bc08      	pop	{r3}
 8005c88:	469e      	mov	lr, r3
 8005c8a:	4770      	bx	lr

08005c8c <_fini>:
 8005c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8e:	bf00      	nop
 8005c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c92:	bc08      	pop	{r3}
 8005c94:	469e      	mov	lr, r3
 8005c96:	4770      	bx	lr
